require('dotenv').config();
var uristring = process.env.MONGODB_URI;
var async = require('async');

const mongoose = require('mongoose');
const _ = require('underscore');
const TeleBot = require('telebot');
const program = require('commander');
const moment = require('moment');


const beastSchema = require('./src/schemes/beast');
const locationSchema = require('./src/schemes/location');
const userSchema = require('./src/schemes/user');


const parsePip = require('./src/parsers/parsePip');
const beastParser = require('./src/parsers/parseBeast');
const parseLocation = require('./src/parsers/parseLocation');
const parseFlee = require('./src/parsers/parseFlee');
const parseDeathMessage = require('./src/parsers/parseDeathMessage');
const parseBeastFaced = require('./src/parsers/parseBeastFaced');


const calculateUpgrade = require('./src/calculateUpgrade');

const upgradeAmountValidation = require('./src/utils/upgradeAmountValidation');

const processForwards = require('./src/utils/processForwards');

const Beast = mongoose.model('Beast', beastSchema);
const Location = mongoose.model('Location', locationSchema);
const User = mongoose.model('User', locationSchema);

mongoose.connect(uristring);


const {
    matcher,
    regExpSetMatcher
} = require('./src/utils/matcher');
const regexps = require('./src/regexp/regexp');

const config = require('./package.json');

program
    .version('0.1.0')
    .option('-D, --dev', 'Running bot with test token')
    .option('-P, --prod', 'Running bot with produciton token')
    .parse(process.argv);

const sessions = {};

const WAIT_FOR_SKILL = 'WAIT_FOR_SKILL';
const WAIT_FOR_DISTANCE = 'WAIT_FOR_DISTANCE';
const WAIT_FOR_LEVELS = 'WAIT_FOR_LEVELS';
const WAIT_FOR_RESPONSE = 'WAIT_FOR_RESPONSE';
const WAIT_FOR_FORWARD_END = 'WAIT_FOR_FORWARD_END';
const WAIT_FOR_START = 'WAIT_FOR_START';
const WAIT_FOR_PIP_FORWARD = 'WAIT_FOR_PIP_FORWARD';
const WAIT_FOR_DATA_TO_PROCESS = 'WAIT_FOR_DATA_TO_PROCESS';

const states = {
    WAIT_FOR_SKILL,
    WAIT_FOR_DISTANCE,
    WAIT_FOR_LEVELS,
    WAIT_FOR_RESPONSE,
    WAIT_FOR_START,
    WAIT_FOR_FORWARD_END,
    WAIT_FOR_PIP_FORWARD,
    WAIT_FOR_DATA_TO_PROCESS
};

const sessionAbort = (msg) => {
    const replyMarkup = bot.keyboard([
        [buttons.sessionAbortYes.label, buttons.sessionAbortNo.label]
    ], {
        resize: true
    });

    return bot.sendMessage(msg.from.id, '–¢—ã —Ö–æ—á–µ—à—å –æ–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ –ø–∏–ø-–±–æ—è ?', {
        replyMarkup
    });
}

const askAmountOfLevels = (msg) => {
    const replyMarkup = bot.keyboard([
        [
            buttons.amountOfLevelsTen.label,
            buttons.amountOfLevelsTwenty.label,
            buttons.amountOfLevelsThirty.label
        ],
        [
            buttons.amountOfLevelsFourty.label,
            buttons.amountOfLevelsFifty.label,
            buttons.amountOfLevelsSixty.label
        ],
        [
            buttons.amountOfLevelsMAX.label
        ]
    ], {
        resize: true
    });

    return bot.sendMessage(msg.from.id, `
–í—ã–±–µ—Ä–∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–∫–∞—á–∞—Ç—å *${sessions[msg.from.id].upgradeSkill}*
\`–õ–∏–±–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 17)\`
`, {
        replyMarkup,
        parseMode: 'markdown'
    });
};

const journeyForwardEndKeyboard = (msg) => {
    const replyMarkup = bot.keyboard([
        [
            buttons['journeyForwardEnd'].label
        ]
    ], {
        resize: true
    });

    if (sessions[msg.from.id] === undefined) {
        createSession(msg.from.id);
    }

    sessions[msg.from.id].state = states.WAIT_FOR_START;

    return bot.sendMessage(msg.from.id, `

    `, {
        replyMarkup,
        parseMode: 'markdown'
    });
}

const askReachableKm = (msg) => {
    const replyMarkup = bot.keyboard([
        [
            buttons['reachableKm20'].label,
            buttons['reachableKm30'].label,
            buttons['reachableKm40'].label
        ],
        [

            buttons['reachableKm50'].label,
            buttons['reachableKm60'].label,
            buttons['reachableKm70'].label
        ]
    ], {
        resize: true
    });

    return bot.sendMessage(msg.from.id, "–í—ã–±–µ—Ä–∏ –¥–æ –∫–∞–∫–æ–≥–æ –∫–∏–ª–æ–º–µ—Ç—Ä–∞ —Ç—ã —Ö–æ–¥–∏—à—å (–ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞–≤–∞—è—Å—å –≤ –∂–∏–≤–∏—Ö)?\n" +
        "`–õ–∏–±–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 28)`", {
            replyMarkup,
            parseMode: 'markdown'
        });
}

const getEffort = (msg, bot) => {
    if (sessions[msg.from.id].state == states.WAIT_FOR_START) {
        return false;
    }

    sessions[msg.from.id].state = states.WAIT_FOR_RESPONSE;

    sessions[msg.from.id].amountToUpgrade = msg.text;

    const effort = calculateUpgrade(sessions[msg.from.id]);

    bot.sendMessage(msg.from.id, effort, {
        replyMarkup: defaultKeyboard,
        parseMode: 'markdown'
    });

    console.log(`
------------------------------------------
[REPLY]
User: ${sessions[msg.from.id].pip.name} | ${sessions[msg.from.id].pip.faction} | ${msg.from.username}
Reachable distance: ${sessions[msg.from.id].reachableKm}
Amout to upgrade: ${sessions[msg.from.id].amountToUpgrade}
`);

    delete sessions[msg.from.id];
}

const createSession = id => {
    sessions[id] = {
        pip: null,
        state: states.WAIT_FOR_START,
        data: [],
        dataPips: []
    };
};

const buttons = {
    sessionAbortYes: {
        label: "–î–∞",
        command: "/resetSession"
    },
    sessionAbortNo: {
        label: "–ù–µ—Ç",
        command: "/resetSessionAbort"
    },
    skillSelectHealth: {
        label: "‚ù§ –ñ–∏–≤—É—á–µ—Å—Ç—å",
        command: "/levelUpHealth"
    },
    skillSelectStrength: {
        label: "üí™ –°–∏–ª–∞",
        command: "/levelUpStrength"
    },
    skillSelectAccuracy: {
        label: "üî´ –ú–µ—Ç–∫–æ—Å—Ç—å",
        command: "/levelUpAccuracy"
    },
    skillSelectCharisma: {
        label: "üó£ –•–∞—Ä–∏–∑–º–∞",
        command: "/levelUpCharisma"
    },
    skillSelectAgility: {
        label: "ü§∏‚Äç‚ôÄÔ∏è –õ–æ–≤–∫–æ—Å—Ç—å",
        command: "/levelUpAgility"
    },
    amountOfLevelsTen: {
        label: "+10",
        command: "/upgradeSkill"
    },
    amountOfLevelsTwenty: {
        label: "+20",
        command: "/upgradeSkill"
    },
    amountOfLevelsThirty: {
        label: "+20",
        command: "/upgradeSkill"
    },
    amountOfLevelsFourty: {
        label: "+40",
        command: "/upgradeSkill"
    },
    amountOfLevelsFifty: {
        label: "+50",
        command: "/upgradeSkill"
    },
    amountOfLevelsSixty: {
        label: "+60",
        command: "/upgradeSkill"
    },
    amountOfLevelsMAX: {
        label: "–ú–ê–ö–°–ò–ú–ê–õ–û–ß–ö–ê",
        command: "/upgradeSkill"
    },
    reachableKm20: {
        label: "20–∫–º",
        command: "/reachableKm"
    },
    reachableKm30: {
        label: "30–∫–º",
        command: "/reachableKm"
    },
    reachableKm40: {
        label: "40–∫–º",
        command: "/reachableKm"
    },
    reachableKm50: {
        label: "50–∫–º",
        command: "/reachableKm"
    },
    reachableKm60: {
        label: "60–∫–º",
        command: "/reachableKm"
    },
    reachableKm70: {
        label: "70+ –∫–º",
        command: "/reachableKm"
    },
    journeyForwardStart: {
        label: "–°–∫–∏–Ω—É—Ç—å –ª–æ–≥ üèÉ",
        command: "/journeyforwardstart"
    },
    journeyForwardEnd: {
        label: "–°—Ç–æ–ø üôÖ‚Äç‚ôÇÔ∏è",
        command: "/journeyforwardend"
    },
    journeyForwardCancel: {
        label: "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è",
        command: "/journeyforwardcancel"
    },
    showAllLocations: {
        label: "üèú –í—Å–µ –ª–æ–∫–∞—Ü–∏–∏",
        command: "/locs_text"
    },
    showRaidLocations: {
        label: "ü§ò –†–µ–π–¥–æ–≤—ã–µ –ª–æ–∫–∞—Ü–∏–∏",
        command: "/raids_text"
    },
    showHelp: {
        label: "üí¨ –ü–æ–º–æ—â—å",
        command: "/show_help"
    },
    showDrones: {
        label: "üõ∞ –î—Ä–æ–Ω—ã",
        command: "/show_drones"
    },
    hallOfFame: {
        label: "üèÜ –ó–∞–ª –°–ª–∞–≤—ã",
        command: "/show_hall_of_fame"
    }
};

const getToken = () => {
    if (program.dev) {
        console.log('RUNNING IN TEST MODE');
        return process.env.BOT_TOKEN_TEST;
    } else if (program.prod) {
        console.log('RUNNING IN PRODUCTION MODE');
        return process.env.BOT_TOKEN;
    }

    throw new Error('Please, specify bot token mode "--dev" for development and "--prod" production');
};

const levelsToMax = (pip, skillToUpgrade, cap) => {
    const skillMap = {
        "‚ù§ –ñ–∏–≤—É—á–µ—Å—Ç—å": "health",
        "üí™ –°–∏–ª–∞": "strength",
        "üî´ –ú–µ—Ç–∫–æ—Å—Ç—å": "precision",
        "üó£ –•–∞—Ä–∏–∑–º–∞": "charisma",
        "ü§∏‚Äç‚ôÄÔ∏è –õ–æ–≤–∫–æ—Å—Ç—å": "agility"
    };

    const currentSkillLevel = pip[skillMap[skillToUpgrade]];
    const amountToUpgrade = cap - currentSkillLevel;

    return amountToUpgrade;
}

const bot = new TeleBot({
    token: getToken(),
    usePlugins: ['namedButtons'],
    polling: {
        interval: 100, // How often check updates (in ms).
        limit: 500, // Limits the number of updates to be retrieved.
        retryTimeout: 1000 // Reconne   cting timeout (in ms).
    },
    pluginConfig: {
        namedButtons: {
            buttons
        }
    }
});

const defaultKeyboard = bot.keyboard([
    [
        buttons['journeyForwardStart'].label
    ],
    [
        buttons['showAllLocations'].label,
        buttons['showRaidLocations'].label,
        buttons['showDrones'].label
    ],
    [
        buttons['hallOfFame'].label,
        buttons['showHelp'].label
    ]
], {
    resize: true
});

bot.on('/start', (msg) => {
    if (sessions[msg.from.id] === undefined) {
        createSession(msg.from.id);
    };

    return bot.sendMessage(
        msg.from.id,
        `
–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç ¬´–°–∫–∏–ª–æ–∫–∞—á–∞—Ç–æ—Ä¬ª - —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∑–∞—Ö–æ–¥–æ–≤ –∏ –∫—Ä—ã—à–µ–∫ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ —Ç–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–æ–≤.
–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç—ã –ø–µ—Ä–µ—à–ª—ë—à –º–Ω–µ —Å–≤–æ–π *üìü–ü–∏–ø-–±–æ–π* —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫–æ–π –Ω–∞–≤—ã–∫ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–∫–∞—á–∞—Ç—å –∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π - –∏ —è —Å–¥–µ–ª–∞—é –≤—Å—é –≥—Ä—è–∑–Ω—É—é —Ä–∞–±–æ—Ç—É/–º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∑–∞ —Ç–µ–±—è.
–¢–∞–∫–∂–µ —è —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é –∫–∞–∫ –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∏–Ω—Ñ–∞ —Ç—É—Ç - https://teletype.in/@eko24/SkUiLkzCz

–ö–ê–ù–ê–õ –° –ù–û–í–û–°–¢–Ø–ú–ò https://t.me/wwCharismaCalculator

–ß–ê–¢ –ë–´–°–¢–†–û–ì–û –†–ï–ê–ì–ò–†–û–í–ê–ù–ò–Ø https://t.me/wwCharismaCalculatorChat

_–£—á—Ç–∏, —á—Ç–æ —è –µ—â—ë –Ω–∞—Ö–æ–∂—É—Å—å –≤ –±–µ—Ç–∞-—Ä–µ–∂–∏–º–µ, –∏ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Ç–∫–Ω—É—Ç—å—Å—è –Ω–∞ –±–æ–ª—å—à–∏–µ –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –±–∞–≥–∏.
–ù–æ, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π - –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ—Ñ–∏–∫—à–µ–Ω—ã_
        `, {
            replyMarkup: defaultKeyboard,
            parseMode: 'markdown',
            webPreview: false
        }
    );
});

/* bot.on('/resetSession', (msg) => {
    sessions[msg.from.id] = {
        pip: null,
        state: null
    };

    bot.sendMessage(
        msg.from.id, '–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã - –º–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å —Å–≤–æ–π –ø–∏–ø-–±–æ–π —Å–Ω–æ–≤–∞.', {
            replyMarkup: 'hide'
        }
    );
});

bot.on('/resetSessionAbort', (msg) => {
    bot.sendMessage(
        msg.from.id, 'C–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω—ë–Ω.', {
            replyMarkup: 'hide'
        }
    );
}); */

bot.on('forward', (msg) => {
    if (sessions[msg.from.id] === undefined) {
        createSession(msg.from.id);
    }

    if (sessions[msg.from.id].state === states.WAIT_FOR_PIP_FORWARD) {
        const pip = parsePip(msg);

        if (_.isObject(pip)) {
            data = pip;
            sessions[msg.from.id].dataPips.push(pip);
            dataType = 'pipboy';

            sessions[msg.from.id].data.push({
                data,
                dataType,
                date: msg.forward_date
            });

            msg.reply.text('–°—É–ø–µ—Ä, —è –≤–∏–∂—É —Ç–≤–æ–π –ø–∏–ø - —Å–µ–π—á–∞—Å –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å —Ç–≤–æ–∏–º–∏ —Ñ–æ—Ä–≤–∞—Ä–¥–∞–º–∏');

            processUserData(msg, {
                usePip: true
            });
        } else {
            return msg.reply.text('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–∏–ø-–±–æ–π. –ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª –µ–≥–æ –∫–∏–¥–∞—Ç—å - –∂–º–∏ /skippipforward', {
                asReply: true
            });
        }
    } else if (sessions[msg.from.id].state === states.WAIT_FOR_FORWARD_END) {
        let data;
        let dataType;
        const isLocation = regExpSetMatcher(msg.text, {
            regexpSet: regexps.location
        });

        const isRegularBeast = regExpSetMatcher(msg.text, {
            regexpSet: regexps.regularBeast
        });

        /* const isDungeonBeast = regExpSetMatcher(msg.text, {
            regexpSet: regexps.dungeonBeast
        }); */

        const isFlee = regExpSetMatcher(msg.text, {
            regexpSet: regexps.flee
        });

        const isDeathMessage = regExpSetMatcher(msg.text, {
            regexpSet: regexps.deathMessage
        });

        /* const isDungeonBeastFaced = regExpSetMatcher(msg.text, {
            regexpSet: regexps.dungeonBeastFaced
        }); */

        const pip = parsePip(msg);

        /*         if (isDungeonBeastFaced) {
                    data = parseBeastFaced.parseDungeonBeastFaced(msg.text);
                    dataType = 'dungeonBeastFaced';
                } */

        /* if (isDungeonBeast) {
            data = beastParser.parseDungeonBeast(msg.text);
            dataType = 'dungeonBeast';
        } else */

        if (isFlee) {
            data = parseFlee(msg.text);
            dataType = 'flee';
        } else if (isDeathMessage) {
            data = parseDeathMessage(msg.text);
            dataType = 'deathMessage';
        } else if (isRegularBeast) {
            data = beastParser.parseRegularBeast(msg.text);
            dataType = 'regularBeast';
        } else if (isLocation) {
            data = parseLocation(msg.text);
            dataType = 'location';
        } else if (_.isObject(pip)) {
            data = pip;
            sessions[msg.from.id].dataPips.push(pip);
            dataType = 'pipboy';
        }


        // isDungeonBeast ||
        if (isRegularBeast || isLocation || isFlee || isDeathMessage || parseBeastFaced) {
            sessions[msg.from.id].data.push({
                data,
                dataType,
                date: msg.forward_date
            });
        }

    } else {
        const pip = parsePip(msg);

        const isRegularBeast = regExpSetMatcher(msg.text, {
            regexpSet: regexps.regularBeastFaced
        });

        if (_.isObject(pip)) {
            sessions[msg.from.id].pip = pip;
            sessions[msg.from.id].state = states.WAIT_FOR_SKILL;

            const replyMarkup = bot.keyboard([
                [buttons.skillSelectStrength.label, buttons.skillSelectAccuracy.label, buttons.skillSelectAgility.label],
                [buttons.skillSelectHealth.label, buttons.skillSelectCharisma.label]
            ], {
                resize: true
            });

            return bot.sendMessage(msg.from.id, '–ß—Ç–æ –∫–∞—á–∞—Ç—å –±—É–¥–µ—à—å?', {
                replyMarkup
            });
        } else if (isRegularBeast) {
            const beast = parseBeastFaced.parseRegularBeastFaced(msg.text);

            Beast.findOne({
                name: beast.name,
                distanceRange: beast.distance
            }).then(fBeast => {
                if (fBeast !== null) {


                    const minMax = (array) => {
                        const min = _.min(array);
                        const max = _.max(array);

                        if (min !== max) {
                            return `${min}-${max}`;
                        }

                        return `${min}`;
                    }

                    const getItems = items => {
                        if (_.isEmpty(items)) {
                            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                        }

                        return Object.keys(items).join(', ');
                    }

                    const getFlees = flees => {
                        if (_.isEmpty(flees)) {
                            return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
                        }

                        const flee = flees.pop();
                        if (flee.outcome === 'win') {
                            return `‚ñ´Ô∏è –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏ ü§∏üèΩ‚Äç‚ôÇÔ∏è${flee.stats.agility || flee.agility}\n`;
                        }

                        return `‚ñ´Ô∏è –ù–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏ ü§∏üèΩ‚Äç‚ôÇÔ∏è${flee.stats.agility  || flee.agility}, —É—Ä–æ–Ω - üíî${flee.damageReceived}\n`;
                    }

                    const getConcussions = concussions => {
                        if (_.isEmpty(concussions)) {
                            return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
                        }

                        const concussion = concussions.pop();

                        return `‚ñ´Ô∏è ${concussion.amount} –æ–≥–ª—É—à–µ–Ω–∏–π –ø—Ä–∏ ü§∏üèΩ‚Äç‚ôÇÔ∏è${concussion.stats.agility}\n`
                    }

                    const getBattles = battles => {
                        if (_.isEmpty(battles)) {
                            return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
                        }

                        let successBattles = [];
                        let failBattles = [];

                        battles.forEach(battle => {
                            if (battle.outcome === 'win') {
                                successBattles.push(`‚ñ´Ô∏è –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏ —É—Ä–æ–Ω–µ –º–æ–±—É ${battle.totalDamageGiven}.\n–°—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–∞: ‚öîÔ∏è–£—Ä–æ–Ω: ${battle.stats.damage} üõ°–ë—Ä–æ–Ω—è: ${battle.stats.armor}.\n–í—Å–µ–≥–æ —É—Ä–æ–Ω–∞ –æ—Ç –º–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–æ - ${battle.damagesReceived}\n`)
                            } else {
                                failBattles.push(`‚ñ´Ô∏è –ù–µ—É–¥–∞—á–∞ –ø—Ä–∏ —É—Ä–æ–Ω–µ –º–æ–±—É ${battle.totalDamageGiven}.\n–°—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–∞:‚öîÔ∏è–£—Ä–æ–Ω: ${battle.start.damage} üõ°–ë—Ä–æ–Ω—è: ${battle.stats.armor}.\n–í—Å–µ–≥–æ —É—Ä–æ–Ω–∞ –æ—Ç –º–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–æ - ${battle.damagesReceived}\n`)
                            }
                        });

                        return {
                            successBattles: _.isEmpty(successBattles) ? ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É–¥–∞—á–Ω—ã—Ö –±–∏—Ç–≤–∞—Ö'] : successBattles,
                            failBattles: _.isEmpty(failBattles) ? ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –±–∏—Ç–≤–∞—Ö'] : failBattles
                        }
                    };

                    const processedBattles = getBattles(fBeast.battles);

                    let reply = `
*${fBeast.name}*
–ë—ã–ª –∑–∞–º–µ—á–µ–Ω –Ω–∞ ${minMax(fBeast.distanceRange)}–∫–º

[–î–†–û–ü]
üï≥${minMax(fBeast.capsReceived)} –∫—Ä—ã—à–µ–∫
üì¶${minMax(fBeast.materialsReceived)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

[–õ–£–¢]
${getItems(fBeast.receivedItems)}

[–ü–û–ë–ï–ì]
${getFlees(fBeast.flees)}

[–û–ì–õ–£–®–ï–ù–ò–Ø]
${getConcussions(fBeast.concussions)}

[–°–¢–´–ß–ö–ò]
${processedBattles.successBattles.join('\n')}

---

${processedBattles.failBattles.join('\n')}
                    `
                    return msg.reply.text(reply, {
                        asReply: true,
                        parseMode: 'markdown'
                    });
                } else {
                    return msg.reply.text(`–ü—Ä–æ—Å—Ç–∏, —è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—ã—à–∞–ª –ø—Ä–æ —ç—Ç–æ–≥–æ ${beast.name} :c`, {
                        asReply: true
                    })
                }
            }).catch(e => console.log(e));
        }
    }

});

bot.on([
    '/levelUpHealth',
    '/levelUpStrength',
    '/levelUpAccuracy',
    '/levelUpCharisma',
    '/levelUpAgility'
], msg => {
    sessions[msg.from.id].upgradeSkill = msg.text;
    sessions[msg.from.id].state = states.WAIT_FOR_DISTANCE;

    askReachableKm(msg);
});

bot.on('/reachableKm', msg => {
    sessions[msg.from.id].reachableKm = msg.text;
    sessions[msg.from.id].state = states.WAIT_FOR_LEVELS;

    askAmountOfLevels(msg);
});

bot.on('/locs_text', msg => {
    return msg.reply.text(`
[8 –∫–º] üßô‚Äç‚ôÇ –ë–µ–∑—É–º–Ω—ã–π —Å—Ç–∞—Ä–∏–∫
[11–∫–º] ‚õ∞ –°—Ç–∞—Ä–∞—è —à–∞—Ö—Ç–∞
[13–∫–º] ‚ö°Ô∏è –ö—É–ø–æ–ª –ì—Ä–æ–º–∞
[15–∫–º] üõ§ –û—Ä–µ–æ–ª
[19–∫–º] ‚ö†Ô∏è –ü–µ—â–µ—Ä–∞ –û—Ä–µ–æ–ª–∞
[23–∫–º] üöΩ –°—Ç–æ—á–Ω–∞—è —Ç—Ä—É–±–∞
-26–∫–º- üóø –†–∞–¥–∏–æ–∞–∫—Ç–∏–≤. –ì–æ–ª–µ–º
[27–∫–º] üèÉüèø –ë–µ–ª–æ–µ –≥–µ—Ç—Ç–æ
[29–∫–º] ‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç–æ–µ –£–±–µ–∂–∏—â–µ
[30–∫–º] üïé –Ø–¥—Ä–æ
[34–∫–º] ü¶á –ë—ç—Ç-–ø–µ—â–µ—Ä–∞
-36–∫–º- ü§ñ –ö–∏–±–æ—Ä–≥ –ê–Ω–∫–ª–∞–≤–∞
[39–∫–º] ü¶Ü –ü–µ—Ä–µ–≤–∞–ª –£—Ç–∫–∏–Ω–∞
[43–∫–º] üö™ –£—é—Ç–Ω—ã–π –ø–æ–¥–≤–∞–ª—å—á–∏–∫
-44–∫–º- üëπ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ü—É—Å—Ç–æ—à–∏
[45–∫–º] üåÅ –í—ã—Å–æ–∫–∏–π –•—Ä–æ—Ç–≥–∞—Ä
[50–∫–º] üî¥ –†—É–∏–Ω—ã –ì–µ–∫—Å–∞–≥–æ–Ω–∞
[51–∫–º] üõè –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–∏–≤–∞–ª
-55–∫–º- ‚ò†Ô∏è –ö–∏–±–µ—Ä–∫–æ–≥–æ—Ç—å
[56–∫–º] üî¨ –ù–∞—É—á–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å
-64–∫–º- üê∫ –Ø–æ-–ì–∏–≥–∞–Ω—Ç
[69–∫–º] ‚õ© –•—Ä–∞–º –ú—É–¥—Ä–æ—Å—Ç–∏
[74–∫–º] üëÅ‚Äçüó® –ß—ë—Ä–Ω–∞—è –ú–µ–∑–∞
    `, {
        webPreview: false
    });
});

bot.on('/raids_text', msg => {
    return msg.reply.text(`
–°—Ç–∞—Ä–∞—è —Ñ–∞–±—Ä–∏–∫–∞*
[5–∫–º] üì¶–ú–∞—Ç–µ—Ä–∏–∞–ª—ã

*–ó–∞–≤–æ–¥ "–Ø–¥–µ—Ä-–ö–æ–ª–∞"*
[9–∫–º] üï≥–ö—Ä—ã—à–∫–∏

*–¢—é—Ä—å–º–∞*
[12–∫–º] üíä–í–µ—â–µ—Å—Ç–≤–∞

*–°–∫–ª–∞–¥—ã*
[16–∫–º] üçó–ï–¥–∞

*–î–∞—Ç–∞—Ü–µ–Ω—Ç—Ä*
[20–∫–º] üîπ–ö–≤–∞—Ä—Ü

*–ì–æ—Å–ø–∏—Ç–∞–ª—å*
[24–∫–º] ‚ù§Ô∏è–õ–µ—á–µ–Ω–∏–µ

*–ó–∞–≤–æ–¥ "–≠–ª–µ–∫—Ç—Ä–æ–Ω"*
[28–∫–º] üí°–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã

*–û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ*
[32–∫–º] üíæ–ú–∏–∫—Ä–æ—á–∏–ø—ã

*–ò—Ä–∏–¥–∏–µ–≤—ã–µ —à–∞—Ö—Ç—ã*
[38–∫–º] üî©–ò—Ä–∏–¥–∏–π

*–°–∫–ª–∞–¥ –º–µ—Ç–∞–ª–ª–∞*
[46–∫–º] üîó–ö—É–±–æ–Ω–∏—Ç
    `, {
        webPreview: false
    });
});

bot.on('/upgradeSkill', msg => {
    if (msg.text === '–ú–ê–ö–°–ò–ú–ê–õ–û–ß–ö–ê') {
        const pip = sessions[msg.from.id].pip;
        const skillToUpgrade = sessions[msg.from.id].upgradeSkill;

        const newText = levelsToMax(pip, skillToUpgrade, 1200);
        msg.text = newText;

        getEffort(msg, bot);
    }

    getEffort(msg, bot);
});

bot.on('/journeyforwardstart', msg => {
    if (sessions[msg.from.id] === undefined) {
        createSession(msg.from.id);
    }

    let inlineReplyMarkup = bot.inlineKeyboard([
        [
            bot.inlineButton('üìü –ü–µ—Ä–µ–π—Ç–∏ –≤ –∏–≥—Ä—É.', {url: 'https://t.me/WastelandWarsBot'})
        ]
    ]);

    sessions[msg.from.id].state = states.WAIT_FOR_FORWARD_END;
    const replyMarkup = bot.keyboard([
        [
            buttons['journeyForwardEnd'].label,
            buttons['journeyForwardCancel'].label
        ]
    ], {
        resize: true
    });

    msg.reply.text(`
–•–µ–π, –≤–∏–∂—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π —Ü–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —Å –ø—É—Å—Ç–æ—à–∏ - –æ—Ç–ª–∏—á–Ω–æ!
–ù—É —á—Ç–æ –∂–µ, –∫–∏–¥–∞–π –µ—ë —Å—é–¥–∞.


    `, {
        replyMarkup,
        parseMode: 'markdown'
    }).then(() => {
        return msg.reply.text(`
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–±–µ–¥–∏—Å—å, —á—Ç–æ *–≠–¢–û* –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—Ç–µ–ª –ø–µ—Ä–µ—Å–ª–∞—Ç—å - –¢–µ–ª–µ–≥—Ä–∞–º –º–æ–∂–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∏—Ç–æ—Ä–º–∞–∂–∏–≤–∞—Ç—å.
–ù—É –∞ –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å - —Å–º–µ–ª–æ –∂–º–∏ –∫–Ω–æ–ø–∫—É [\`–°—Ç–æ–ø üôÖ‚Äç‚ôÇÔ∏è\`]!
            `, {
                replyMarkup: inlineReplyMarkup,
                parseMode: 'markdown'
            })
    })

});

const processUserData = (msg, options) => {
    sessions[msg.from.id].state = states.WAIT_FOR_DATA_TO_PROCESS;

    const {
        data,
        dataPips
    } = sessions[msg.from.id];

    const {
        reportData,
        updatesData
    } = processForwards(data, dataPips);

    if (reportData.criticalError) {
        return msg.reply.text(`
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞! –û—Ç–º–µ–Ω—è—é —Ñ–æ—Ä–≤–∞—Ä–¥—ã.

_${reportData.criticalError}_
        `, {
            parseMode: 'markdown',
            replyMarkup: defaultKeyboard
        });
    }

    if (options.usePip && reportData.pipRequired) {
        sessions[msg.from.id].state = states.WAIT_FOR_PIP_FORWARD;
        return msg.reply.text(`
–•–µ–π, —è —Ç–∞–∫ –∏ –Ω–µ —É–≤–∏–¥–µ–ª —Ç–≤–æ–µ–≥–æ –ø–∏–ø-–±–æ—è, –º–æ–∂–µ—à—å –º–Ω–µ –µ–≥–æ –¥–æ—Å–ª–∞—Ç—å?
–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–º–∏ /skippipforward
        `);
    }



    msg.reply.text(`–ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–¥–æ–∂–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ–º–Ω–æ–≥–æ :3`, {
        replyMarkup: 'hide'
    });

    const amountOfData = updatesData.beasts.length + updatesData.locations.length;

    console.log({
        reportData,
        updatesData
    });

    /* User.findOne({
        'telegram.id': msg.from.id
    }, function (err, user) {
        if (user === null) {
            const newUser = new User({
                telegram: {
                    id: msg.from.id,
                    firstName: msg.from.first_name,
                    userName: msg.from.username
                },
                pip: reportData.lastPip
            });

            newUser.save().then(function (user, err) {
                if (err) {
                    console.log('#mongo_error User save error:' + err);
                    return msg.reply.text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–≤–æ–µ–≥–æ –ø–∏–ø-–±–æ—è');
                }
            });
        }
    }); */

    if (updatesData.beasts.length > 0) {
        async.forEach(updatesData.beasts, function (iBeast, next) {
            Beast.findOne({
                name: iBeast.name
            }).then(function (fBeast) {
                if (fBeast === null) {
                    const newBeast = new Beast(iBeast);

                    newBeast.save().then(() => next());
                } else {
                    let isSameFleeExists=true, isSameConcussionExists=true;

                    const isSameBattleExists = fBeast.battles.map(battle => {
                        const existingBattle = _.clone(battle.toJSON());
                        delete existingBattle._id;

                        return _.isEqual(existingBattle, iBeast.battles[0]);
                    }).some(result => result === true);

                    if (iBeast.concussions) {
                        if (iBeast.concussions.length > 0) {
                            isSameConcussionExists = fBeast.concussions.map(concussion => {
                                const existingConcussion = _.clone(concussion.toJSON());
                                delete existingConcussion._id;

                                return _.isEqual(existingConcussion, iBeast.concussions[0]);
                            }).some(result => result === true);
                        }
                    }

                    if (iBeast.flees) {
                        if (iBeast.flees.length === 1) {
                            isSameFleeExists = fBeast.flees.map(flee => {
                                const existingFlee = _.clone(flee.toJSON());
                                delete existingFlee._id;

                                return _.isEqual(existingFlee, iBeast.flees[0]);
                            }).some(result => result === true);
                        }
                    }

                    if (!_.isEmpty(iBeast.receivedItems)) {
                        Object.keys(iBeast.receivedItems).map((item) => {
                            const amount = iBeast.receivedItems[item];

                            if (fBeast.receivedItems[item]) {
                                if (!_.contains(fBeast.receivedItems[item], amount)) {
                                    fBeast.receivedItems[item].push(amount);
                                }
                            } else {
                                fBeast.receivedItems[item] = [amount];
                            }
                        })
                    }

                    if (!_.contains(fBeast.distanceRange, iBeast.distanceRange[0])) {
                        fBeast.distanceRange.push(iBeast.distanceRange[0]);
                    }

                    if (!_.contains(fBeast.capsReceived, iBeast.capsReceived)) {
                        fBeast.capsReceived.push(iBeast.capsReceived);
                    }

                    if (!_.contains(fBeast.materialsReceived, iBeast.materialsReceived)) {
                        fBeast.materialsReceived.push(iBeast.materialsReceived);
                    }

                    if (!isSameBattleExists) {
                        fBeast.battles.push(iBeast.battles[0]);
                    }

                    if (!isSameConcussionExists) {
                        fBeast.concussions.push(iBeast.concussions[0]);
                    }

                    if (!isSameFleeExists) {
                        fBeast.flees.push(iBeast.flees[0]);
                    }


                    // TODO: Concussion
                    // TODO: Received items

                    fBeast.save().then(() => next()).catch(e => console.log(e));
                }
            });
        }, function (err) {
            console.log('iterating done');
        });
    }

    if (updatesData.locations.length > 0) {
        async.forEach(updatesData.locations, function (iLocation, next) {
            Location.findOne({
                distance: iLocation.distance
            }).then(function (fLocation) {
                if (fLocation === null) {
                    const newLocation = new Location({
                        distance: iLocation.distance,
                        name: iLocation.name,
                        type: iLocation.type,
                        isRaid: iLocation.isRaid,
                        effects: [iLocation.effect],
                        capsReceived: [iLocation.capsReceived],
                        materialsReceived: [iLocation.materialsReceived],
                        capsLost: [iLocation.capsLost],
                        materialsLost: [iLocation.materialsLost],
                        receivedItems: [iLocation.receivedItems],
                        receivedBonusItems: [iLocation.receivedBonusItems],
                        healthInjuries: [iLocation.healthInjuries]
                    });

                    newLocation.save().then(() => next())
                } else {
                    if (!_.contains(fLocation.effects, iLocation.effect)) {
                        fLocation.effects.push(iLocation.effect);
                    }

                    if (!_.contains(fLocation.capsReceived, iLocation.capsReceived)) {
                        fLocation.capsReceived.push(iLocation.capsReceived);
                    }

                    if (!_.contains(fLocation.materialsReceived, iLocation.materialsReceived)) {
                        fLocation.materialsReceived.push(iLocation.materialsReceived);
                    }

                    if (!_.contains(fLocation.capsLost, iLocation.capsLost)) {
                        fLocation.capsLost.push(iLocation.capsLost);
                    }

                    if (!_.contains(fLocation.materialsLost, iLocation.materialsLost)) {
                        fLocation.materialsLost.push(iLocation.materialsLost);
                    }

                    if (!_.contains(fLocation.healthInjuries, iLocation.healthInjuries)) {
                        fLocation.healthInjuries.push(iLocation.healthInjuries);
                    }

                    if (!_.isEmpty(iLocation.receivedItems)) {
                        Object.keys(iLocation.receivedItems).map((item) => {
                            const amount = iLocation.receivedItems[item];

                            if (fLocation.receivedItems[item]) {
                                if (!_.contains(fLocation.receivedItems[item], amount)) {
                                    fLocation.receivedItems[item].push(amount);
                                }
                            } else {
                                fLocation.receivedItems[item] = [amount];
                            }
                        })
                    }

                    if (!_.isEmpty(iLocation.receivedBonusItems)) {
                        Object.keys(iLocation.receivedBonusItems).map((item) => {
                            const amount = iLocation.receivedBonusItems[item];

                            if (fLocation.receivedBonusItems[item]) {
                                if (!_.contains(fLocation.receivedBonusItems[item], amount)) {
                                    fLocation.receivedBonusItems[item].push(amount);
                                }
                            } else {
                                fLocation.receivedBonusItems[item] = [amount];
                            }
                        })
                    }

                    fLocation.save().then(() => next());
                }
            });
        }, function (err) {
            console.log(err, 'iterating done');
        });
    }


    // if PIP exist - try to apply it to given data
    // if not - request recent PIP
    // try to apply PIP to given data
    // if PIP not applyible throw error and update data which is not relies on PIP

    let errors = '';

    if (reportData.errors.length > 0) {
        errors = `
*–¢–∞–∫–∂–µ —è –∑–∞–º–µ—Ç–∏–ª —Ç–∞–∫–∏–µ –æ—à–∏–±–∫–∏*:
${reportData.errors.join('\n')}
        `;
    }

    if (amountOfData > 0) {
        setTimeout(() => {
            msg.reply.text(`
–§—É—Ö, —è —Å–æ –≤—Å—ë–º —Å–ø—Ä–∞–≤–∏–ª—Å—è - —Å–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω–æ–µ –∑–∞ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!
–¢–µ–ø–µ—Ä—å —Ç—ã –æ–ø—è—Ç—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —Å–∫–∏–ª–æ–∫–∞—á–∞—Ç–æ—Ä, –ª–∏–±–æ –µ—Å–ª–∏ —Ç—ã —á–µ–≥–æ-—Ç–æ –∑–∞–±—ã–ª –¥–æ–∫–∏–Ω—É—Ç—å - —Å–º–µ–ª–æ –∂–º–∏ –Ω–∞ \`[–°–∫–∏–Ω—É—Ç—å –ª–æ–≥ üèÉ]\`
–Ø –Ω–∞—Å—á–∏—Ç–∞–ª ${amountOfData} –¥–∞–Ω–Ω—ã—Ö!

${errors}
    `, {
                replyMarkup: defaultKeyboard,
                parseMode: 'markdown'
            });
        }, 1500);
    } else {
        setTimeout(() => {
            msg.reply.text(`
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ–≥ —É–∑–Ω–∞—Ç—å –∏–∑ —Ç–≤–æ–∏—Ö —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤ :—Å
    `, {
                replyMarkup: defaultKeyboard,
                parseMode: 'markdown'
            });
        }, 1500);
    }

    delete sessions[msg.from.id];
}

bot.on('/journeyforwardend', msg => {
    sessions[msg.from.id].state = states.WAIT_FOR_DATA_TO_PROCESS;

    // console.log(JSON.stringify(sessions[msg.from.id].data));
    processUserData(msg, {
        usePip: true
    });
});

bot.on('/journeyforwardcancel', msg => {
    createSession(msg.from.id);

    return msg.reply.text('–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∫–∏–Ω—É—Ç—å –ø–∏–ø-–±–æ–π –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ø—Ä–æ–∫–∞—á–∫–µ —Å–∫–∏–ª–æ–≤ –ª–∏–±–æ –∂–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é  [`–°–∫–∏–Ω—É—Ç—å –ª–æ–≥ üèÉ`]', {
        replyMarkup: defaultKeyboard,
        parseMode: 'markdown'
    });
});

bot.on('/skippipforward', msg => {
    msg.reply.text('–û–∫–µ–π, —Å–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á—Ç–æ —Å–º–æ–≥—É');

    processUserData(msg, {
        usePip: false
    });
})

bot.on('/version', msg => msg.reply.text(config.version))

bot.on('/debug', msg => {
    return bot.sendMessage(msg.from.id, '123');
})

bot.on(/^\d+$/, msg => {
    switch (sessions[msg.from.id].state) {
        case states.WAIT_FOR_DISTANCE:
            const reachableKm = Number(msg.text);

            if (reachableKm > 100) {
                msg.reply.text('–ë–ª—è, –Ω—É –Ω–µ –≥–æ–Ω–∏ - –¥–∞–≤–∞–π —á—É—Ç—å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–µ–π, –æ–∫–µ–π ?)')
            } else if (reachableKm <= 100) {
                sessions[msg.from.id].reachableKm = reachableKm;
                sessions[msg.from.id].state = states.WAIT_FOR_LEVELS;

                askAmountOfLevels(msg);
            }

            break;
        case states.WAIT_FOR_LEVELS:
            const upgradeAmount = Number(msg.text);
            const pip = sessions[msg.from.id].pip;
            const skillToUpgrade = sessions[msg.from.id].upgradeSkill;

            if (upgradeAmountValidation(pip, skillToUpgrade, upgradeAmount, 1060)) {
                getEffort(msg, bot);
            } else {
                msg.reply.text('–ß—ë—Ç–æ –¥–æ—Ö—É—è –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π —á–∏—Å–ª–æ –ø–æ–º–µ–Ω—å—à–µ.')
            }

            break;
    }
});

bot.on('/show_help', msg => msg.reply.text(`
–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–µ—Ç–∞ —Ä–µ–∂–∏–º–µ.
–ì–∞–π–¥ - https://teletype.in/@eko24/SkUiLkzCz;
`, {
    parseMode: 'markdown'
}));

bot.on('/show_drones', msg => msg.reply.text(`
üõ∞–ë–∞—Ä–∞—Ö–ª–æ ‚öôÔ∏è–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
‚öîÔ∏è10 üõ°50/50 ‚ö°Ô∏è6%

üõ∞–ú–∞–ª—ã—à ‚öôÔ∏è–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
‚öîÔ∏è18 üõ°80/80 ‚ö°Ô∏è10%

üõ∞–î–µ—Ñ–æ–ª—Ç ‚öôÔ∏è–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
‚öîÔ∏è28 üõ°120/120 ‚ö°Ô∏è12%

üõ∞–®–µ—Ä–ª–æ–∫–¥—Ä–æ–Ω ‚öôÔ∏è–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
‚öîÔ∏è12 üõ°130/130 ‚ö°Ô∏è3%
–ò–º–µ–µ—Ç –º–æ–¥—É–ª—å –†–∞–¥–∞—Ä, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤.
---------------------------------------
üõ∞Robot Rock üî´–ë–æ–µ–≤–æ–π
‚öîÔ∏è46 üõ°150/150 ‚ö°Ô∏è14%

üõ∞–†–∞–¥-–¥—Ä–æ–Ω üî´–ë–æ–µ–≤–æ–π
‚öîÔ∏è68 üõ°180/180 ‚ö°Ô∏è14%
---------------------------------------
üõ∞–ü—Ä–æ—Ç–µ–∫–¥—Ä–æ–Ω üõ°–û–±–æ—Ä–æ–Ω—è—é—â–∏–π
‚öîÔ∏è14 üõ°270/270 ‚ö°Ô∏è14%

üõ∞AWESOM-O üõ°–û–±–æ—Ä–æ–Ω—è—é—â–∏–π
‚öîÔ∏è23 üõ°420/420 ‚ö°Ô∏è16%
---------------------------------------
–ü–æ —Å—Ç–∞—Ç–∞–º:
‚öîÔ∏è - —É—Ä–æ–Ω –¥—Ä–æ–Ω–∞
üõ°- –ø—Ä–æ—á–Ω–æ—Å—Ç—å, —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ –¥—Ä–æ–Ω—É.
‚ö°Ô∏è- —à–∞–Ω—Å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±–æ–π.
`, {
    parseMode: 'markdown',
    webPreview: false
}));

bot.on('/show_hall_of_fame', msg => msg.reply.text(`
<code>–ó–¥–µ—Å—å —É–≤–µ–∫–æ–≤–µ—á–µ–Ω—ã –∂–∏—Ç–µ–ª–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—É—Å—Ç–æ—à–∏ –æ–∫–∞–∑–∞–≤—à–∏–µ —Ç–∏—Ç–∞–Ω–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å –Ω–∞ —ç—Ç–∞–ø–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –±–µ—Ç—ã</code>

–Ø–¥–µ—Ä–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª—É @nushit –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –¥—Ä–æ–Ω–æ–≤
https://t.me/nushit/393

–°–æ—Ä–æ–∫ –¥–≤–∞ —Ä–∞–∑–∞ —Å–ø–∞—Å–∏–±–æ "–û—Å–Ω–æ–≤–µ" –∏ —Ç–æ–≤–∞—Ä–∏—â—É –ó–≤—ë–∑–¥–æ–ø—ã–ª—å–∫–∏–Ω—É –∑–∞ –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –ª–æ–∫–∞—Ü–∏–∏
https://t.me/trust_42/57

–û—Ç–¥–µ–ª—å–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞—Å—Ç—å —Ç–æ–≤–∞—Ä–∏—â—É @MohanMC –∑–∞ –ø–æ–º–æ—â—å –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

–°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è...
`, {
    parseMode: 'html',
    webPreview: false
}));

bot.start();