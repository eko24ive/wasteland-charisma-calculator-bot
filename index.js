// TODO: Supply it with pip from database (with appropriate validation just like from the processForwards)

require('dotenv').config();
const uristring = process.env.MONGODB_URI;

const async = require('async');
const mongoose = require('mongoose');
const _ = require('underscore');
const TeleBot = require('telebot');
const program = require('commander');
const moment = require('moment-timezone');
const objectDeepSearch = require('object-deep-search');

const config = require('./package.json');

const forwardPoints = require('./src/constants/forwardPoints');

const regexps = require('./src/regexp/regexp');
const PipRegexps = require('./src/regexp/pip');

const beastSchema = require('./src/schemes/beast');
const locationSchema = require('./src/schemes/location');
const giantScheme = require('./src/schemes/giant');
const userSchema = require('./src/schemes/user');

const chartGeneration = require('./src/utils/chartGeneration');

const parsePip = require('./src/parsers/parsePip');
const beastParser = require('./src/parsers/parseBeast');
const parseLocation = require('./src/parsers/parseLocation');
const parseFlee = require('./src/parsers/parseFlee');
const parseDeathMessage = require('./src/parsers/parseDeathMessage');
const parseBeastFaced = require('./src/parsers/parseBeastFaced');
const parseGiantFaced = require('./src/parsers/parseGiantFaced');
const parseGiant = require('./src/parsers/parseGiant');
const parseGiantOnField = require('./src/parsers/parseGiantOnField');

const {
    matcher,
    regExpSetMatcher
} = require('./src/utils/matcher');
const calculateUpgrade = require('./src/calculateUpgrade');
const upgradeAmountValidation = require('./src/utils/upgradeAmountValidation');
const processForwards = require('./src/utils/processForwards');
const getRanges = require('./src/utils/getRanges');
const tinyHash = require('./src/utils/tinyHash');
const processMenu = require('./src/utils/processMenu');
const menuItemHandler = require('./src/utils/menuItemHandler');
const comparePips = require('./src/database/utils/comparePips');

const routedBeastView = require('./src/views/routedBeastView');

const equipmentMenu = require('./src/staticMenus/equipmentMenu');
const locationsMenu = require('./src/staticMenus/locationsMenu');
const suppliesMenu = require('./src/staticMenus/suppliesMenu');
const achievementsMenu = require('./src/staticMenus/achievementsMenu');
const dungeonMenu = require('./src/staticMenus/dungeonMenu');

const buttons = require('./src/ui/buttons');
const {
    commandsForLag
} = require('./src/strings/strings');

const UserManager = require('./src/database/userManager');

mongoose.connect(uristring);

const Beast = mongoose.model('Beast', beastSchema);
const Giant = mongoose.model('Giant', giantScheme);
const Location = mongoose.model('Location', locationSchema);
const User = mongoose.model('User', userSchema);

const userManager = UserManager(User);

program
    .version('0.1.0')
    .option('-D, --dev', 'Running bot with test token')
    .option('-P, --prod', 'Running bot with produciton token')
    .parse(process.argv);

const sessions = {};

const WAIT_FOR_SKILL = 'WAIT_FOR_SKILL';
const WAIT_FOR_DISTANCE = 'WAIT_FOR_DISTANCE';
const WAIT_FOR_LEVELS = 'WAIT_FOR_LEVELS';
const WAIT_FOR_RESPONSE = 'WAIT_FOR_RESPONSE';
const WAIT_FOR_FORWARD_END = 'WAIT_FOR_FORWARD_END';
const WAIT_FOR_START = 'WAIT_FOR_START';
const WAIT_FOR_PIP_FORWARD = 'WAIT_FOR_PIP_FORWARD';
const WAIT_FOR_BEAST_FACE_FORWARD = 'WAIT_FOR_BEAST_FACE_FORWARD';
const WAIT_FOR_DATA_TO_PROCESS = 'WAIT_FOR_DATA_TO_PROCESS';

const states = {
    WAIT_FOR_SKILL,
    WAIT_FOR_DISTANCE,
    WAIT_FOR_LEVELS,
    WAIT_FOR_RESPONSE,
    WAIT_FOR_START,
    WAIT_FOR_FORWARD_END,
    WAIT_FOR_PIP_FORWARD,
    WAIT_FOR_BEAST_FACE_FORWARD,
    WAIT_FOR_DATA_TO_PROCESS
};

const updateOrCreate = (msg, pip, cb) => {
    const telegramData = {
        first_name: msg.from.first_name,
        id: msg.from.id,
        username: msg.from.username
    }

    const pipData = {...pip, timeStamp: msg.forward_date};

    userManager.findByTelegramId(msg.from.id).then(result => {
        if (result.ok === false && result.reason === 'USER_NOT_FOUND') {
            userManager.create({telegramData,pipData}).then(result => {
                cb(result);
            });
        } else if (result.ok === true && result.reason === 'USER_FOUND') {
            userManager.update({telegramData,pipData}).then(result => {
                cb(result);
            });
        }
    });
};

const findPip = (msg, cb) => {
    userManager.findByTelegramId(msg.from.id).then(result => {
        cb(result);
    });
}

const askAmountOfLevels = (msg) => {
    const replyMarkup = bot.keyboard([
        [
            buttons.amountOfLevelsTen.label,
            buttons.amountOfLevelsTwenty.label,
            buttons.amountOfLevelsThirty.label
        ],
        [
            buttons.amountOfLevelsFourty.label,
            buttons.amountOfLevelsFifty.label,
            buttons.amountOfLevelsSixty.label
        ],
        [
            buttons.amountOfLevelsMAX.label
        ]
    ], {
        resize: true
    });

    return msg.reply.text(`
–í—ã–±–µ—Ä–∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–∫–∞—á–∞—Ç—å *${sessions[msg.from.id].upgradeSkill}*
\`–õ–∏–±–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 17)\`
`, {
        replyMarkup,
        parseMode: 'markdown'
    });
};

const journeyForwardEndKeyboard = (msg) => {
    const replyMarkup = bot.keyboard([
        [
            buttons['journeyForwardEnd'].label
        ]
    ], {
        resize: true
    });

    if (sessions[msg.from.id] === undefined) {
        createSession(msg.from.id);
    }

    sessions[msg.from.id].state = states.WAIT_FOR_START;

    return bot.sendMessage(msg.from.id, `

    `, {
        replyMarkup,
        parseMode: 'markdown'
    });
}

const askReachableKm = (msg) => {
    const replyMarkup = bot.keyboard([
        [
            buttons['reachableKm20'].label,
            buttons['reachableKm30'].label,
            buttons['reachableKm40'].label
        ],
        [

            buttons['reachableKm56'].label,
            buttons['reachableKm65'].label,
            buttons['reachableKm70'].label
        ]
    ], {
        resize: true
    });

    return bot.sendMessage(msg.from.id, "–í—ã–±–µ—Ä–∏ –¥–æ –∫–∞–∫–æ–≥–æ –∫–∏–ª–æ–º–µ—Ç—Ä–∞ —Ç—ã —Ö–æ–¥–∏—à—å (–ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞–≤–∞—è—Å—å –≤ –∂–∏–≤–∏—Ö)?\n" +
        "`–õ–∏–±–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 28)`", {
            replyMarkup,
            parseMode: 'markdown'
        });
}

const getEffort = (msg, bot) => {
    if (sessions[msg.from.id].state === states.WAIT_FOR_START) {
        return false;
    }

    sessions[msg.from.id].state = states.WAIT_FOR_RESPONSE;

    sessions[msg.from.id].amountToUpgrade = msg.text;

    const effort = calculateUpgrade(sessions[msg.from.id]);
    const { pip } = sessions[msg.from.id];



    console.log(`[SKILL UPGRADE]: ${pip.faction} | ${pip.name} | ${msg.from.username}`)

    bot.sendMessage(msg.from.id, effort, {
        replyMarkup: defaultKeyboard,
        parseMode: 'markdown'
    });

    createSession(msg.from.id);
}

const createSession = id => {
    sessions[id] = {
        pip: null,
        state: states.WAIT_FOR_START,
        data: [],
        processDataConfig: {
            usePip: true,
            useBeastFace: true,
            silent: false
        }
    };
};

const getToken = () => {
    if (program.dev) {
        console.log('RUNNING IN TEST MODE');
        return process.env.BOT_TOKEN_TEST;
    } else if (program.prod) {
        console.log('RUNNING IN PRODUCTION MODE');
        return process.env.BOT_TOKEN;
    }

    throw new Error('Please, specify bot token mode "--dev" for development and "--prod" production');
};

const levelsToMax = (pip, skillToUpgrade, cap) => {
    const skillMap = {
        "‚ù§ –ñ–∏–≤—É—á–µ—Å—Ç—å": "health",
        "üí™ –°–∏–ª–∞": "strength",
        "üî´ –ú–µ—Ç–∫–æ—Å—Ç—å": "precision",
        "üó£ –•–∞—Ä–∏–∑–º–∞": "charisma",
        "ü§∏‚Äç‚ôÄÔ∏è –õ–æ–≤–∫–æ—Å—Ç—å": "agility"
    };

    const currentSkillLevel = pip[skillMap[skillToUpgrade]];
    const amountToUpgrade = cap - currentSkillLevel;

    return amountToUpgrade;
}

const bot = new TeleBot({
    token: getToken(),
    usePlugins: ['namedButtons'],
    polling: {
        interval: 100, // How often check updates (in ms).
        limit: 500, // Limits the number of updates to be retrieved.
        retryTimeout: 1000 // Reconne   cting timeout (in ms).
    },
    pluginConfig: {
        namedButtons: {
            buttons
        }
    }
});

const defaultKeyboard = bot.keyboard([
    [
        buttons['journeyForwardStart'].label,
        buttons['skillUpgrade'].label
    ],
    [
        buttons['showGiants'].label,
        buttons['showBeasts'].label,
        buttons['showEquipment'].label,
    ],
    [
        buttons['showLocations'].label,
        buttons['showSupplies'].label,
        buttons['showAchievments'].label
    ],
    [
        buttons['showDungeons'].label,
        buttons['showInGameCommands'].label
    ],
    [
        buttons['hallOfFame'].label,
        buttons['showHelp'].label
    ]
], {
    resize: true
});

const toGameKeyboard = bot.inlineKeyboard([
    [
        bot.inlineButton('üìü –ü–µ—Ä–µ–π—Ç–∏ –≤ –∏–≥—Ä—É.', {url: 'https://t.me/WastelandWarsBot'})
    ]
]);

const toSkillOMaticKeyboard = bot.inlineKeyboard([
    [
        bot.inlineButton('–ó–∞–ø—É—Å—Ç–∏—Ç—å "üéì–°–∫–∏–ª–æ–∫–∞—á–∞—Ç–æ—Ä"', {callback: 'initialize_skill_upgrade'})
    ]
]);


const getBeastKeyboard = beastId => {
    return bot.inlineKeyboard([
        [
            bot.inlineButton('–ò–Ω—Ñ–æ', {callback: `show_beast_page_info-${beastId}`}),
            bot.inlineButton('–õ—É—Ç', {callback: `show_beast_page_loot-${beastId}`}),
            bot.inlineButton('–ë–æ–π', {callback: `show_beast_page_battles-${beastId}`}),
            bot.inlineButton('–û–≥–ª—É—à–µ–Ω–∏—è', {callback: `show_beast_page_concussions-${beastId}`})
        ]
    ]);
}


bot.on('/start', (msg) => {
    createSession(msg.from.id);

    return bot.sendMessage(
        msg.from.id,
        `
–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç ¬´*Wasteland Wars Assistant*¬ª, —è - —á—Ç–æ-—Ç–æ –Ω–∞ –ø–æ–¥–æ–±–∏–∏ "—É–º–Ω–æ–π" —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏.

‚¨¶ –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ —è –∑–Ω–∞—é –æ –º–æ–±–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª - —Å–∫–∏–Ω—å —Ñ–æ—Ä–≤–∞—Ä–¥ –≤—Å—Ç—Ä–µ—á–∏ —Å –Ω–∏–º.

‚¨¶ –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —á—Ç–æ –±—ã —è –ø–æ–º–æ–≥ —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–∫–∞—á–∫–µ —Ç–≤–æ–∏—Ö —Å–∫–∏–ª–æ–≤ - –∂–º–∏ –∫–Ω–æ–ø–∫—É \`[üéì–°–∫–∏–ª–æ–∫–∞—á–∞—Ç–æ—Ä]\`

‚¨¶ –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ –º–æ–±–æ–≤ - –Ω–∞–∂–∏–º–∏ \`[–°–∫–∏–Ω—É—Ç—å –ª–æ–≥ üèÉ]\`

–ö–ê–ù–ê–õ –° –ù–û–í–û–°–¢–Ø–ú–ò @wwAssistantBotNews
–ß–ê–¢ –ë–´–°–¢–†–û–ì–û –†–ï–ê–ì–ò–†–û–í–ê–ù–ò–Ø @wwAssistantChat

_–£—á—Ç–∏, —á—Ç–æ —è –µ—â—ë –Ω–∞—Ö–æ–∂—É—Å—å –≤ –±–µ—Ç–∞-—Ä–µ–∂–∏–º–µ, –∏ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Ç–∫–Ω—É—Ç—å—Å—è –Ω–∞ –±–æ–ª—å—à–∏–µ –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –±–∞–≥–∏.
–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π - –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ—Ñ–∏–∫—à–µ–Ω—ã_
        `, {
            replyMarkup: defaultKeyboard,
            parseMode: 'markdown',
            webPreview: false
        }
    );
});

bot.on('forward', (msg) => {
    if(sessions[msg.from.id] === undefined) {
        createSession(msg.from.id);
    }

    if(msg.forward_from.id !== 430930191) {
        if (sessions[msg.from.id].state !== states.WAIT_FOR_FORWARD_END) {
            console.log(`[CULPRIT]: ${msg.from.id} | ${msg.from.first_name} | ${msg.from.username}`);

            // createSession(msg.from.id);

            return msg.reply.text(`
–§–æ—Ä–≤–∞—Ä–¥—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç @WastelandWarsBot.
            `, {
                asReply: true,
                replyMarkup: defaultKeyboard
            })
        }
    }

    if (sessions[msg.from.id].state === states.WAIT_FOR_PIP_FORWARD) {
        const isClassicPip = regExpSetMatcher(msg.text, {
            regexpSet: PipRegexps.classicPip
        });

        const isSimplePip = regExpSetMatcher(msg.text, {
            regexpSet: PipRegexps.simplePip
        });

        if (isClassicPip || isSimplePip) {
            data = parsePip(msg, isClassicPip);
            dataType = 'pipboy';

            updateOrCreate(msg,data, result => {
                if(!result.ok && result.reason === 'PIP_VALIDATION_FAILED') {
                    reply = `–Ø –Ω–µ –≤–∏–∂—É —á—Ç–æ –±—ã —Ç—ã –ø—Ä–æ–∫–∞—á–∞–ª –∫–∞–∫–∏–µ-—Ç–æ —Å–∫–∏–ª—ã :c
–°–∫–∏–¥—ã–≤–∞–π –ø–∏–ø-–±–æ–π –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∫–∞—á–∞–µ—à—å—Å—è!`;
                }

                if(!result.ok && result.reason === 'PIP_OUTDATED') {
                    reply = '–£ –º–µ–Ω—è –≤ –±–∞–∑–µ –µ—Å—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–æ —Ç–≤–æ–π –ø–∏–ø-–±–æ–π';
                }

                if(result.ok && result.reason === 'USER_CREATED') {
                    reply = `
–°—É–ø–µ—Ä, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ç–≤–æ–π –ø–∏–ø!
–ù–µ –∑–∞–±—ã–≤–∞–π —Å–∫–∏–¥—ã–≤–∞—Ç—å –º–Ω–µ —Å–≤–æ–π –ø–∏–ø-–±–æ–π –ø–æ –º–µ—Ä–µ —Ç–æ–≥–æ –∫–∞–∫ –±—É–¥–µ—à—å –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å —Å–∫–∏–ª—ã!`;
                }

                if(result.ok && result.reason === 'USER_UPDATED') {
reply = `–®–∏–∫–∞—Ä–¥–æ—Å, —è –æ–±–Ω–æ–≤–∏–ª —Ç–≤–æ–π –ø–∏–ø!
–ù–µ –∑–∞–±—É–¥—å —Å–∫–∏–Ω—É—Ç—å –Ω–æ–≤—ã–π –ø–∏–ø, –∫–æ–≥–¥–∞ –∫–∞—á–Ω–µ—à—å—Å—è!`;
                }

                if(result.ok) {
                    return msg.reply.text(`${reply}\n–¢–µ–ø–µ—Ä—å —è –∑–∞–π–º—É—Å—å —Ç–≤–æ–∏–º–∏ —Ñ–æ—Ä–≤–∞—Ä–¥–∞–º–∏`).then(res => {
                        sessions[msg.from.id].data.push({
                            data,
                            dataType,
                            date: msg.forward_date
                        });

                        processUserData(msg, {
                            usePip: sessions[msg.from.id].processDataConfig.usePip,
                            useBeastFace: sessions[msg.from.id].processDataConfig.useBeastFace
                        })
                    });

                } else {
                    return msg.reply.text(reply, {
                        asReply: true
                    })
                }
            });
        } else {
            return msg.reply.text(`
–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–∏–ø-–±–æ–π. –ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª –µ–≥–æ –∫–∏–¥–∞—Ç—å - –∂–º–∏ /skippipforward

*–ù–æ —Ç–æ–≥–¥–∞ —è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É—é –±–∏—Ç–≤—ã –∏ –ø–æ–±–µ–≥–∏ –æ—Ç –º–æ–±–æ–≤*
            `, {
                asReply: true
            });
        }
    } if (sessions[msg.from.id].state === states.WAIT_FOR_BEAST_FACE_FORWARD) {
        // TODO: Validate forward date - should be greater that date of the first forward and less than date of last forward

        let data;
        let dataType;
        let beastName;

        const isLocation = regExpSetMatcher(msg.text, {
            regexpSet: regexps.location
        });

        const isDungeonBeastFaced = regExpSetMatcher(msg.text, {
            regexpSet: regexps.dungeonBeastFaced
        });

        if (isDungeonBeastFaced) {
            data = parseBeastFaced.parseDungeonBeastFaced(msg.text);
            dataType = 'dungeonBeastFaced';
            beastName = data.name;
        } else if (isLocation) {
            data = parseLocation(msg.text);
            dataType = 'location';
            beastName = data.beastFaced.name
        }

        if (beastName !== sessions[msg.from.id].beastToValidateName && sessions[msg.from.id].beastToValidateName !== '???') {
            return msg.reply.text(`
–≠—Ç–æ—Ç –º–æ–± –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–æ–≥–æ —Å –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –¥—Ä–∞–ª—Å—è. –¢—ã —á—ë - –Ω–∞–µ–±–∞—Ç—å –º–µ–Ω—è –≤–∑–¥—É–º–∞–ª?!

–ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª –µ—ë –∫–∏–¥–∞—Ç—å - –∂–º–∏ /skipbeastforward
*–ù–æ —Ç–æ–≥–¥–∞ —è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É—é –±–∏—Ç–≤—É —Å —ç—Ç–∏–º –º–æ–±–æ–º*
            `, {
                asReply: true
            });
        } else if (isLocation || isDungeonBeastFaced) {
            sessions[msg.from.id].data.push({
                data,
                dataType,
                date: msg.forward_date
            });

            msg.reply.text('–°—É–ø–µ—Ä, —è –≤–∏–∂—É –≤—Å—Ç—Ä–µ—á—É —Å –º–æ–±–æ–º - —Å–µ–π—á–∞—Å –æ–±—Ä–∞–±–æ—Ç–∞—é –µ—ë –≤–º–µ—Å—Ç–µ —Å —Ç–≤–æ–∏–º–∏ —Ñ–æ—Ä–≤–∞—Ä–¥–∞–º–∏').then(res => processUserData(msg, {
                usePip: sessions[msg.from.id].processDataConfig.usePip,
                useBeastFace: sessions[msg.from.id].processDataConfig.useBeastFace
            }));
        } else {
            return msg.reply.text(`
–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –º–æ–±–∞. –ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª –µ—ë –∫–∏–¥–∞—Ç—å - –∂–º–∏ /skipbeastforward

*–ù–æ —Ç–æ–≥–¥–∞ —è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É—é –±–∏—Ç–≤—É —Å —ç—Ç–∏–º –º–æ–±–æ–º*
            `, {
                asReply: true
            });
        }
    } else if (sessions[msg.from.id].state === states.WAIT_FOR_FORWARD_END) {
        let data;
        let dataType;

        const isLocation = regExpSetMatcher(msg.text, {
            regexpSet: regexps.location
        });

        const isRegularBeast = regExpSetMatcher(msg.text, {
            regexpSet: regexps.regularBeast
        });

        const isDungeonBeast = regExpSetMatcher(msg.text, {
            regexpSet: regexps.dungeonBeast
        });

        const isFlee = regExpSetMatcher(msg.text, {
            regexpSet: regexps.flee
        });

        const isDeathMessage = regExpSetMatcher(msg.text, {
            regexpSet: regexps.deathMessage
        });

        const isDungeonBeastFaced = regExpSetMatcher(msg.text, {
            regexpSet: regexps.dungeonBeastFaced
        });

        const isClassicPip = regExpSetMatcher(msg.text, {
            regexpSet: PipRegexps.classicPip
        });

        const isSimplePip = regExpSetMatcher(msg.text, {
            regexpSet: PipRegexps.simplePip
        });

        if (isDungeonBeastFaced) {
            data = parseBeastFaced.parseDungeonBeastFaced(msg.text);
            dataType = 'dungeonBeastFaced';
        } else if (isFlee) {
            data = parseFlee(msg.text);
            dataType = 'flee';
        } else if (isDeathMessage) {
            data = parseDeathMessage(msg.text);
            dataType = 'deathMessage';
        } else if (isRegularBeast) {
            data = beastParser.parseRegularBeast(msg.text);
            dataType = 'regularBeast';
        } else if (isLocation) {
            data = parseLocation(msg.text);
            dataType = 'location';
        } else if (isClassicPip || isSimplePip) {
            data = parsePip(msg, isClassicPip);
            dataType = 'pipboy';
        } else if (isDungeonBeast) {
            data = beastParser.parseDungeonBeast(msg.text);
            dataType = 'dungeonBeast';
        }


        // isDungeonBeast ||
        if (isRegularBeast || isLocation || isFlee || isDeathMessage || isDungeonBeastFaced || (isClassicPip || isSimplePip)) {
            sessions[msg.from.id].data.push({
                data,
                dataType,
                date: msg.forward_date,
                userId: msg.from.id
            });
        }
    } else if (
        sessions[msg.from.id].state !== states.WAIT_FOR_PIP_FORWARD &&
        sessions[msg.from.id].state !== states.WAIT_FOR_BEAST_FACE_FORWARD &&
        sessions[msg.from.id].state !== states.WAIT_FOR_FORWARD_END
    ) {
        const isClassicPip = regExpSetMatcher(msg.text, {
            regexpSet: PipRegexps.classicPip
        });

        const isSimplePip = regExpSetMatcher(msg.text, {
            regexpSet: PipRegexps.simplePip
        });

        const isRegularBeastFaced = regExpSetMatcher(msg.text, {
            regexpSet: regexps.regularBeastFaced
        });

        const isGiantFaced = regExpSetMatcher(msg.text, {
            regexpSet: regexps.giantFaced
        });

        const isGiantFought = regExpSetMatcher(msg.text, {
            regexpSet: regexps.giantFought
        });

        const isGiantOnField = regExpSetMatcher(msg.text, {
            regexpSet: regexps.giantFacedOnField
        })

        const isDungeonBeastFaced = regExpSetMatcher(msg.text, {
            regexpSet: regexps.dungeonBeastFaced
        });

        const isRegularBeast = regExpSetMatcher(msg.text, {
            regexpSet: regexps.regularBeast
        });

        const isFlee = regExpSetMatcher(msg.text, {
            regexpSet: regexps.flee
        });

        /* const isLocation = regExpSetMatcher(msg.text, {
            regexpSet: regexps.location
        });

        const isDungeonBeast = regExpSetMatcher(msg.text, {
            regexpSet: regexps.dungeonBeast
        });

        const isFlee = regExpSetMatcher(msg.text, {
            regexpSet: regexps.flee
        }); */

        if (isClassicPip || isSimplePip) {
            const pip = parsePip(msg, isClassicPip);
            let reply;
            updateOrCreate(msg,pip, result => {
                if(!result.ok && result.reason === 'PIP_VALIDATION_FAILED') {
                    reply = `–Ø –Ω–µ –≤–∏–∂—É —á—Ç–æ –±—ã —Ç—ã –ø—Ä–æ–∫–∞—á–∞–ª –∫–∞–∫–∏–µ-—Ç–æ —Å–∫–∏–ª—ã :c
–°–∫–∏–¥—ã–≤–∞–π –ø–∏–ø-–±–æ–π –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∫–∞—á–∞–µ—à—å—Å—è!`;
                }

                if(!result.ok && result.reason === 'PIP_OUTDATED') {
                    reply = '–£ –º–µ–Ω—è –≤ –±–∞–∑–µ –µ—Å—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–æ —Ç–≤–æ–π –ø–∏–ø-–±–æ–π';
                }

                if(result.ok && result.reason === 'USER_CREATED') {
                    reply = `
–°—É–ø–µ—Ä, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ç–≤–æ–π –ø–∏–ø!
–ù–µ –∑–∞–±—ã–≤–∞–π —Å–∫–∏–¥—ã–≤–∞—Ç—å –º–Ω–µ —Å–≤–æ–π –ø–∏–ø-–±–æ–π –ø–æ –º–µ—Ä–µ —Ç–æ–≥–æ –∫–∞–∫ –±—É–¥–µ—à—å –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å —Å–∫–∏–ª—ã!`;
                }

                if(result.ok && result.reason === 'USER_UPDATED') {
reply = `–®–∏–∫–∞—Ä–¥–æ—Å, —è –æ–±–Ω–æ–≤–∏–ª —Ç–≤–æ–π –ø–∏–ø!
–ù–µ –∑–∞–±—É–¥—å —Å–∫–∏–Ω—É—Ç—å –Ω–æ–≤—ã–π –ø–∏–ø, –∫–æ–≥–¥–∞ –∫–∞—á–Ω–µ—à—å—Å—è!`;
                }

                return msg.reply.text(reply, {
                    asReply: true,
                    replyMarkup: toSkillOMaticKeyboard
                });
            });
        } else if (isGiantFaced) {
            const giant = parseGiantFaced(msg.text);

            Giant.findOne({
                name: giant.name,
                distance: giant.distance
            }).then(fGiant => {
                if (fGiant === null) {
                    const newGiant = new Giant({
                        distance: giant.distance,
                        name: giant.name,
                        health: {
                            current: giant.healthCurrent,
                            cap: giant.healthCap
                        },
                        forwardStamp: msg.forward_date
                    });

                    newGiant.save().then(res => {
                        return msg.reply.text('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ä–≤–∞—Ä–¥! –Ø –¥–æ–±–∞–≤–∏–ª –µ–≥–æ –≤ –±–∞–∑—É!', {
                            asReply: true
                        });
                    })
                } else {
                    const time = Number(moment.tz(moment().valueOf(), "Europe/Moscow").format('X'));

                    if (fGiant.forwardStamp >= time) {
                        return msg.reply.text(`–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è –µ—Å—Ç—å –±–æ–ª–µ–µ —Å–≤–µ–∂–∞—è –∏—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ *${giant.name}*`, {
                            asReply: true,
                            parseMode: 'markdown'
                        });
                    } else {
                        fGiant.health.current = giant.healthCurrent;
                        fGiant.health.cap = giant.healthCap;
                        fGiant.forwardStamp = time;

                        fGiant.save().then(res => {
                            return msg.reply.text(`–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ä–≤–∞—Ä–¥! –Ø –æ–±–Ω–æ–≤–∏–ª ${giant.name} –≤ –±–∞–∑–µ!`, {
                                asReply: true
                            });
                        })
                    }
                }
            })
        } else if (isGiantFought) {
            const giant = parseGiant(msg.text);

            Giant.findOne({
                name: giant.name
            }).then(fGiant => {
                if (fGiant === null) {
                    const newGiant = new Giant({
                        name: giant.name,
                        health: {
                            current: giant.healthCurrent,
                            cap: giant.healthCap
                        },
                        forwardStamp: msg.forward_date
                    });

                    newGiant.save().then(res => {
                        return msg.reply.text('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ä–≤–∞—Ä–¥! –Ø –¥–æ–±–∞–≤–∏–ª –µ–≥–æ –≤ –±–∞–∑—É!', {
                            asReply: true
                        }).then(o => {
                            userManager.addPoints(msg.from.id, userForwardPoints.newGiantData).then(result => {
                                if(!result.ok) {
                                    if(result.reason === 'USER_NOT_FOUND') {
                                        msg.reply.text('–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ç–µ–±–µ —à–º–µ–ø—Å–µ–ª–∏ –ø–æ–∫–∞ —Ç—ã –Ω–µ —Å–∫–∏–Ω–µ—à—å –º–Ω–µ —Å–≤–æ–π –ø–∏–ø-–±–æ–π :—Å')
                                    }
                                    // console.log('userManager.addPoints: '+JSON.stringify(result));
                                }
                            });
                        });
                    })
                } else {
                    if (fGiant.forwardStamp >= msg.forward_date) {
                        return msg.reply.text(`–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è –µ—Å—Ç—å –±–æ–ª–µ–µ —Å–≤–µ–∂–∞—è –∏—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ *${giant.name}*`, {
                            asReply: true,
                            parseMode: 'markdown'
                        });
                    } else {
                        fGiant.health.current = giant.healthCurrent;
                        fGiant.health.cap = giant.healthCap;
                        fGiant.forwardStamp = msg.forward_date;

                        fGiant.save().then(res => {
                            return msg.reply.text(`–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ä–≤–∞—Ä–¥! –Ø –æ–±–Ω–æ–≤–∏–ª ${giant.name} –≤ –±–∞–∑–µ!`, {
                                asReply: true
                            }).then(o => {
                                userManager.addPoints(msg.from.id, userForwardPoints.newGiantData).then(result => {
                                    if(!result.ok) {
                                        if(result.reason === 'USER_NOT_FOUND') {
                                            msg.reply.text('–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ç–µ–±–µ —à–º–µ–ø—Å–µ–ª–∏ –ø–æ–∫–∞ —Ç—ã –Ω–µ —Å–∫–∏–Ω–µ—à—å –º–Ω–µ —Å–≤–æ–π –ø–∏–ø-–±–æ–π :—Å')
                                        }
                                        // console.log('userManager.addPoints: '+JSON.stringify(result));
                                    }
                                });
                            });
                        })
                    }
                }
            });
        } else if (isGiantOnField) {
            const giant = parseGiantOnField(msg.text);

            Giant.findOne({
                name: giant.name
            }).then(fGiant => {
                if (fGiant === null) {
                    const newGiant = new Giant({
                        name: giant.name,
                        health: {
                            current: giant.healthCurrent,
                            cap: giant.healthCap
                        },
                        forwardStamp: msg.forward_date
                    });

                    newGiant.save().then(res => {
                        return msg.reply.text('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ä–≤–∞—Ä–¥! –Ø –¥–æ–±–∞–≤–∏–ª –µ–≥–æ –≤ –±–∞–∑—É!', {
                            asReply: true
                        });
                    })
                } else {
                    if (fGiant.forwardStamp >= msg.forward_date) {
                        return msg.reply.text(`–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è –µ—Å—Ç—å –±–æ–ª–µ–µ —Å–≤–µ–∂–∞—è –∏—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ *${giant.name}*`, {
                            asReply: true,
                            parseMode: 'markdown'
                        });
                    } else {
                        fGiant.health.current = giant.healthCurrent;
                        fGiant.health.cap = giant.healthCap;
                        fGiant.forwardStamp = msg.forward_date;

                        fGiant.save().then(res => {
                            return msg.reply.text(`–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ä–≤–∞—Ä–¥! –Ø –æ–±–Ω–æ–≤–∏–ª ${giant.name} –≤ –±–∞–∑–µ!`, {
                                asReply: true
                            });
                        })
                    }
                }
            });
        } else if (isRegularBeastFaced) {
            const beast = parseBeastFaced.parseRegularBeastFaced(msg.text);

            routedBeastView(Beast, {
                name: beast.name,
                isDungeon: false
            }).then(({reply, beast}) => {
                if(reply !== false) {
                    const beastReplyMarkup = getBeastKeyboard(beast._id.toJSON());

                    return msg.reply.text(reply,{
                        replyMarkup: beastReplyMarkup,
                        parseMode: 'html'
                    }).catch(e => console.log(e));
                } else {
                    return msg.reply.text(`–ü—Ä–æ—Å—Ç–∏, —è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—ã—à–∞–ª –ø—Ä–æ —ç—Ç–æ–≥–æ –º–æ–±–∞ :c`, {
                        asReply: true
                    });
                }
            }).catch(e => console.log(e));
        } else if (isDungeonBeastFaced) {
            const oBeast = parseBeastFaced.parseDungeonBeastFaced(msg.text);

            routedBeastView(Beast, {
                name: oBeast.name,
                isDungeon: true
            }).then(({reply, beast}) => {
                if(reply !== false) {
                    /* const beastReplyMarkup = getBeastKeyboard(beast._id.toJSON());

                    return msg.reply.text(reply,{
                        replyMarkup: beastReplyMarkup,
                        parseMode: 'html'
                    }).catch(e => console.log(e)); */
                    msg.reply.text(`–•–µ–π, —É –º–µ–Ω—è –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ *${oBeast.name}*, –Ω–æ —è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —É–º–µ—é –∏—Ö –≤—ã–≤–æ–¥–∏—Ç—å, –ø—Ä–æ—Å—Ç–∏ :—Å`,{
                        asReply: true,
                        parseMode: 'markdown'
                    })
                } else {
                    return msg.reply.text(`–ß—ë—Ä—Ç, —è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—ã—à–∞–ª –ø—Ä–æ *${oBeast.name}*, –ø—Ä–æ—Å—Ç–∏ :—Å`, {
                        asReply: true,
                        parseMode: 'markdown'
                    });
                }
            }).catch(e => console.log(e));
        } else if (isRegularBeast || isFlee) {
            // || isLocation || isDungeonBeast || isFlee
            let data;
            let dataType;

            createSession(msg.from.id);

            if (isFlee) {
                data = parseFlee(msg.text);
                dataType = 'flee';
            } else if (isRegularBeast) {
                data = beastParser.parseRegularBeast(msg.text);
                dataType = 'regularBeast';
            }

            /* if (isDungeonBeast) {
                data = beastParser.parseDungeonBeast(msg.text);
                dataType = 'dungeonBeast';
            } else if (isFlee) {
                data = parseFlee(msg.text);
                dataType = 'flee';
            } else if (isRegularBeast) {
                data = beastParser.parseRegularBeast(msg.text);
                dataType = 'regularBeast';
            } else if (isLocation) {
                data = parseLocation(msg.text);
                dataType = 'location';
            } */

            sessions[msg.from.id].data.push({
                data,
                dataType,
                date: msg.forward_date,
                userId: msg.from.id
            });

            processUserData(msg, {
                usePip: sessions[msg.from.id].processDataConfig.usePip,
                useBeastFace: sessions[msg.from.id].processDataConfig.useBeastFace,
                silent: true
            });
        }
    }

});

bot.on([
    '/levelUpHealth',
    '/levelUpStrength',
    '/levelUpAccuracy',
    '/levelUpCharisma',
    '/levelUpAgility'
], msg => {
    sessions[msg.from.id].upgradeSkill = msg.text;
    sessions[msg.from.id].state = states.WAIT_FOR_DISTANCE;

    askReachableKm(msg);
});

bot.on('/reachableKm', msg => {
    sessions[msg.from.id].reachableKm = msg.text;
    sessions[msg.from.id].state = states.WAIT_FOR_LEVELS;

    askAmountOfLevels(msg);
});

bot.on('/locs_text', msg => {
    return msg.reply.text(`
[8 –∫–º] üßô‚Äç‚ôÇ –ë–µ–∑—É–º–Ω—ã–π —Å—Ç–∞—Ä–∏–∫
[11–∫–º] ‚õ∞ –°—Ç–∞—Ä–∞—è —à–∞—Ö—Ç–∞
[13–∫–º] ‚ö°Ô∏è –ö—É–ø–æ–ª –ì—Ä–æ–º–∞
[15–∫–º] üõ§ –û—Ä–µ–æ–ª
[19–∫–º] ‚ö†Ô∏è –ü–µ—â–µ—Ä–∞ –û—Ä–µ–æ–ª–∞
[23–∫–º] üöΩ –°—Ç–æ—á–Ω–∞—è —Ç—Ä—É–±–∞
-26–∫–º- üóø –†–∞–¥–∏–æ–∞–∫—Ç–∏–≤. –ì–æ–ª–µ–º
[27–∫–º] üèÉüèø –ë–µ–ª–æ–µ –≥–µ—Ç—Ç–æ
[29–∫–º] ‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç–æ–µ –£–±–µ–∂–∏—â–µ
[30–∫–º] üïé –Ø–¥—Ä–æ
[34–∫–º] ü¶á –ë—ç—Ç-–ø–µ—â–µ—Ä–∞
-36–∫–º- ü§ñ –ö–∏–±–æ—Ä–≥ –ê–Ω–∫–ª–∞–≤–∞
[39–∫–º] ü¶Ü –ü–µ—Ä–µ–≤–∞–ª –£—Ç–∫–∏–Ω–∞
[43–∫–º] üö™ –£—é—Ç–Ω—ã–π –ø–æ–¥–≤–∞–ª—å—á–∏–∫
-44–∫–º- üëπ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ü—É—Å—Ç–æ—à–∏
[45–∫–º] üåÅ –í—ã—Å–æ–∫–∏–π –•—Ä–æ—Ç–≥–∞—Ä
[50–∫–º] üî¥ –†—É–∏–Ω—ã –ì–µ–∫—Å–∞–≥–æ–Ω–∞
[51–∫–º] üõè –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–∏–≤–∞–ª
-55–∫–º- ‚ò†Ô∏è –ö–∏–±–µ—Ä–∫–æ–≥–æ—Ç—å
[56–∫–º] üî¨ –ù–∞—É—á–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å
-64–∫–º- üê∫ –Ø–æ-–ì–∏–≥–∞–Ω—Ç
[69–∫–º] ‚õ© –•—Ä–∞–º –ú—É–¥—Ä–æ—Å—Ç–∏
[74–∫–º] üëÅ‚Äçüó® –ß—ë—Ä–Ω–∞—è –ú–µ–∑–∞
    `, {
        webPreview: false
    });
});

bot.on('/raids_text', msg => {
    return msg.reply.text(`
–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –¢–†–ò —Ä–µ–π–¥–∞ —Å –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–º –≤ –í–û–°–ï–ú–¨ —á–∞—Å–æ–≤ (–ø–æ –ú–°–ö):
<b>01:00</b> - <b>09:00</b> - <b>17:00</b>

<b>–°—Ç–∞—Ä–∞—è —Ñ–∞–±—Ä–∏–∫–∞</b>
[5–∫–º] üì¶–ú–∞—Ç–µ—Ä–∏–∞–ª—ã

<b>–ó–∞–≤–æ–¥ "–Ø–¥–µ—Ä-–ö–æ–ª–∞"</b>
[9–∫–º] üï≥–ö—Ä—ã—à–∫–∏

<b>–¢—é—Ä—å–º–∞</b>
[12–∫–º] üíä–í–µ—â–µ—Å—Ç–≤–∞

<b>–°–∫–ª–∞–¥—ã</b>
[16–∫–º] üçó–ï–¥–∞

<b>–î–∞—Ç–∞—Ü–µ–Ω—Ç—Ä</b>
[20–∫–º] üîπ–ö–≤–∞—Ä—Ü

<b>–ì–æ—Å–ø–∏—Ç–∞–ª—å</b>
[24–∫–º] ‚ù§Ô∏è–õ–µ—á–µ–Ω–∏–µ

<b>–ó–∞–≤–æ–¥ "–≠–ª–µ–∫—Ç—Ä–æ–Ω"</b>
[28–∫–º] üí°–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã

<b>–û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ</b>
[32–∫–º] üíæ–ú–∏–∫—Ä–æ—á–∏–ø—ã

<b>–ò—Ä–∏–¥–∏–µ–≤—ã–µ —à–∞—Ö—Ç—ã</b>
[38–∫–º] üî©–ò—Ä–∏–¥–∏–π

<b>–°–∫–ª–∞–¥ –º–µ—Ç–∞–ª–ª–∞</b>
[46–∫–º] üîó–ö—É–±–æ–Ω–∏—Ç
    `, {
        webPreview: false,
        parseMode: 'html'
    });
});

bot.on('/upgradeSkill', msg => {
    if (msg.text === '–ú–ê–ö–°–ò–ú–ê–õ–û–ß–ö–ê') {
        const pip = sessions[msg.from.id].pip;
        const skillToUpgrade = sessions[msg.from.id].upgradeSkill;

        const newText = levelsToMax(pip, skillToUpgrade, 1300);
        msg.text = newText;

        getEffort(msg, bot);
    } else {
        getEffort(msg, bot);
    }
});

bot.on('/journeyforwardstart', msg => {
    createSession(msg.from.id);

    const inlineReplyMarkup = bot.inlineKeyboard([
        [
            bot.inlineButton('üìü –ü–µ—Ä–µ–π—Ç–∏ –≤ –∏–≥—Ä—É.', {url: 'https://t.me/WastelandWarsBot'})
        ]
    ]);

    sessions[msg.from.id].state = states.WAIT_FOR_FORWARD_END;
    const replyMarkup = bot.keyboard([
        [
            buttons['journeyForwardEnd'].label,
            buttons['journeyForwardCancel'].label
        ]
    ], {
        resize: true
    });

    msg.reply.text(`
–•–µ–π, –≤–∏–∂—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π —Ü–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —Å –ø—É—Å—Ç–æ—à–∏ - –æ—Ç–ª–∏—á–Ω–æ!
*–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é*:
 - –ë–æ–π —Å –º–æ–±–æ–º
 - –ü–æ–±–µ–≥ –æ—Ç –º–æ–±–∞
 - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏(–∫–∏–ª–æ–º–µ—Ç—Ä–µ)
    `, {
        replyMarkup,
        parseMode: 'markdown'
    }).then(() => {
        return msg.reply.text(`
*–Ø —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ –∑–∞ –æ–¥–∏–Ω –∫—Ä—É–≥/–≤—ã–ª–∞–∑–∫—É - –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –≤—ã–ª–∞–∑–∫–∏ —è –ø–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ —Å–º–æ–≥—É :—Å*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –ø–µ—Ä–µ—à–ª—ë—à—å _–≤—Å–µ_ —Å–æ–æ–±—â–µ–Ω–∏—è - –¢–µ–ª–µ–≥—Ä–∞–º –º–æ–∂–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∏—Ç–æ—Ä–º–∞–∂–∏–≤–∞—Ç—å.
–ù—É –∞ –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å - —Å–º–µ–ª–æ –∂–º–∏ –∫–Ω–æ–ø–∫—É \`[–°—Ç–æ–ø üôÖ‚Äç‚ôÇÔ∏è]\`!
            `, {
                replyMarkup: inlineReplyMarkup,
                parseMode: 'markdown'
            })
    })

});

const actualProcessUserData = (msg, reportData, updatesData, options) => {
    if(reportData.lastPip !== null) {
        updateOrCreate(msg, reportData.lastPip, result => {
            console.log(result);
        });
    }

    if (options.useBeastFace && !_.isEmpty(reportData.beastToValidate)) {
        sessions[msg.from.id].state = states.WAIT_FOR_BEAST_FACE_FORWARD;
        sessions[msg.from.id].beastToValidateName = reportData.beastToValidate[0].name;
        return msg.reply.text(`
–°–ª—É—à–∞–π, —è –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –∫—Ç–æ —Ç–µ–±–µ –Ω–∞–¥—Ä–∞–ª –∑–∞–¥–Ω–∏—Ü—É, ${reportData.beastToValidate[0].name} - —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –º–æ–± –∏–ª–∏ –¥–∞–Ω–∂–µ–≤—ã–π?

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–∫–∏–Ω—å —Ñ–æ—Ä–≤–∞—Ä–¥ –≤—Å—Ç—Ä–µ—á–∏ —Å —ç—Ç–∏–º –º–æ–±–æ–º:
\`–í–æ –≤—Ä–µ–º—è –≤—ã–ª–∞–∑–∫–∏ –Ω–∞ —Ç–µ–±—è –Ω–∞–ø–∞–ª...\`
_–∏–ª–∏_
\`...–ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∏–ª —Ç–µ–±–µ –ø—É—Ç—å.\`

–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–º–∏ /skipbeastforward

*–í–ù–ò–ú–ê–ù–ò–ï: –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ù–ê /skipbeastforward - –ë–û–¢ –ü–†–û–ò–ì–ù–û–†–ò–†–£–ï–¢ –¢–û–õ–¨–ö–û –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–í–û–ï–ô –ë–ò–¢–í–´ –° ${reportData.beastToValidate[0].name} –ù–ï –ó–ê–ü–ò–®–ï–¢ –ò–• –í –ë–ê–ó–£*
`, {
            parseMode: 'markdown',
        });
    }


    if(!options.silent) {
        msg.reply.text(`–ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–¥–æ–∂–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ–º–Ω–æ–≥–æ :3`, {
            replyMarkup: 'hide'
        });
    }


    let amountOfData = updatesData.beasts.length + updatesData.locations.length;
    let userForwardPoints = 0;
    let dataProcessed = 0;
    const dupes = {
        battles: 0,
        flees: 0
    }

    const addUserPoints = amount => {
        userForwardPoints += amount;
    }

    /* console.log({
        reportData,
        updatesData,
        telegram: {
            id: msg.from.id,
            firstName: msg.from.first_name,
            userName: msg.from.username
        }
    }); */

    try {
        console.log(`[USAGE]: ${reportData.lastPip.faction} | ${reportData.lastPip.name} | ${msg.from.username}`)
    } catch(e) {

    }

    const isBeastUnderValidation = (name) => {
        return reportData.beastToValidate.filter(beast => {
            return beast.name === name;
        }).length > 0
    }

    if (options.usePip !== true) {
        amountOfData = updatesData.locations.length;
    }

    const processBeasts = () => {
        return new Promise((resolve, reject) => {
            if (updatesData.beasts.length > 0 && options.usePip === true) {
                async.forEach(updatesData.beasts, function (iBeast, next) {
                    if (!options.useBeastFace) {
                        if (isBeastUnderValidation(iBeast.name)) {
                            amountOfData -= 1;
                            next();
                        }
                    } else {
                        Beast.findOne({
                            name: iBeast.name,
                            isDungeon: iBeast.isDungeon
                        }).then(function (fBeast) {
                            if (fBeast === null) {
                                const newBeast = new Beast(iBeast);

                                dataProcessed += 1;
                                userForwardPoints += forwardPoints.newMob;

                                newBeast.save().then(() => next());
                            } else {
                                let isSameFleeExists = true,
                                    isSameConcussionExists = true,
                                    isSameBattleExists = true,
                                    isBattleDupe = false,
                                    isFleeDupe = false;

                                if (iBeast.battles) {
                                    if (iBeast.battles.length > 0) {
                                        isSameBattleExists = fBeast.battles.map(battle => {
                                            if (iBeast.battles === undefined) {
                                                return true;
                                            }

                                            const existingBattle = _.clone(battle.toJSON());
                                            const sameStatsBattle = existingBattle.totalDamageReceived === iBeast.battles[0].totalDamageReceived &&
                                            existingBattle.totalDamageGiven === iBeast.battles[0].totalDamageGiven;
                                            const sameStamp = iBeast.battles[0].stamp === existingBattle.stamp;

                                            if(sameStamp) {
                                                isBattleDupe = true;
                                                dupes.battles += 1;
                                            }

                                            return sameStatsBattle || sameStamp;
                                        }).some(result => result === true);
                                    }
                                }


                                // TODO: Error logging for no stats object
                                if (iBeast.concussions) {
                                    if (iBeast.concussions.length > 0) {
                                        isSameConcussionExists = fBeast.concussions.map(concussion => {
                                            const existingConcussion = _.clone(concussion.toJSON());

                                            return existingConcussion.stats.agility === iBeast.concussions[0].stats.agility &&
                                                existingConcussion.amount === iBeast.concussions[0].amount;
                                        }).some(result => result === true);
                                    }
                                }

                                if (iBeast.flees) {
                                    if (iBeast.flees.length === 1) {
                                        isSameFleeExists = fBeast.flees.map(flee => {
                                            const existingFlee = _.clone(flee.toJSON());

                                            if (iBeast.flees[0].outcome === 'win') {
                                                return existingFlee.stats.agility === iBeast.flees[0].stats.agility &&
                                                    existingFlee.outcome === iBeast.flees[0].outcome
                                            }

                                            const sameStatsFlee = existingFlee.stats.agility === iBeast.flees[0].stats.agility &&
                                            existingFlee.outcome === iBeast.flees[0].outcome &&
                                            existingFlee.damageReceived === iBeast.flees[0].damageReceived;
                                            const sameStamp = iBeast.flees[0].stamp === flee.stamp;

                                            if(sameStamp) {
                                                isFleeDupe = true;
                                                dupes.flees += 1;
                                            }

                                            return sameStatsFlee || sameStamp;
                                        }).some(result => result === true);
                                    }
                                }

                                if (!_.isEmpty(iBeast.receivedItems)) {
                                    if (_.isEmpty(fBeast.receivedItems)) {
                                        fBeast.receivedItems = {};
                                    }

                                    Object.keys(iBeast.receivedItems).map((item) => {
                                        const amount = iBeast.receivedItems[item];

                                        if (fBeast.receivedItems[item]) {
                                            if (!_.contains(fBeast.receivedItems[item], amount)) {
                                                fBeast.receivedItems[item].push(amount);
                                            }
                                            // TODO: Apply to similar
                                            fBeast.markModified('receivedItems');
                                        } else {
                                            fBeast.markModified('receivedItems');
                                            fBeast.receivedItems[item] = [amount];
                                        }
                                    })
                                }

                                if(!isBattleDupe) {
                                    if (!_.contains(fBeast.distanceRange, iBeast.distanceRange[0])) {
                                        userForwardPoints += forwardPoints.newDistance;

                                        fBeast.distanceRange.push(iBeast.distanceRange[0]);
                                    } else {
                                        userForwardPoints += forwardPoints.sameGiantData;
                                    }
                                }

                                if (iBeast.capsReceived !== undefined) {
                                    if (!_.contains(fBeast.capsReceived, iBeast.capsReceived)) {
                                        fBeast.capsReceived.push(iBeast.capsReceived);
                                    }
                                }

                                if (iBeast.materialsReceived !== undefined) {
                                    if (!_.contains(fBeast.materialsReceived, iBeast.materialsReceived)) {
                                        fBeast.materialsReceived.push(iBeast.materialsReceived);
                                    }
                                }

                                if(!isBattleDupe) {
                                    if (!isSameBattleExists) {
                                        const battle = iBeast.battles[0];

                                        if (battle.damagesGiven.length === 1) {
                                            userForwardPoints += forwardPoints.oneShotBattle;
                                        } else {
                                            if(battle.outcome === 'win') {
                                                userForwardPoints += forwardPoints.newBattleWin;
                                            } else {
                                                userForwardPoints += forwardPoints.newBattleLose;
                                            }
                                        }

                                        fBeast.battles.push(iBeast.battles[0]);
                                    } else {
                                        if(iBeast.battles !== undefined) {
                                            const battle = iBeast.battles[0];

                                            if (battle.damagesGiven.length === 1) {
                                                userForwardPoints += forwardPoints.oneShotBattle;
                                            } else {
                                                if(battle.outcome === 'win') {
                                                    userForwardPoints += forwardPoints.sameBattleWin;
                                                } else {
                                                    userForwardPoints += forwardPoints.sameBattleLose;
                                                }
                                            }
                                        }
                                    }
                                }

                                if (!isSameConcussionExists && !isBattleDupe) {
                                    fBeast.concussions.push(iBeast.concussions[0]);
                                }

                                if (!isFleeDupe) {
                                    if (!isSameFleeExists) {
                                        const flee = iBeast.flees[0];

                                        if(flee.outcome === 'win') {
                                            userForwardPoints += forwardPoints.newFleeWin;
                                        } else {
                                            userForwardPoints += forwardPoints.newFleeLose;
                                        }

                                        fBeast.flees.push(iBeast.flees[0]);
                                    } else {
                                        if(iBeast.flees !== undefined) {
                                            const flee = iBeast.flees[0];

                                            if(flee.outcome === 'win') {
                                                userForwardPoints += forwardPoints.sameFleeWin;
                                            } else {
                                                userForwardPoints += forwardPoints.sameFleeLose;
                                            }
                                        }

                                    }
                                }

                                dataProcessed += 1;

                                // TODO: Concussion
                                // TODO: Received items

                                fBeast.save().then(() => next()).catch(e => console.log(e));
                            }
                        });
                    }
                }, function (err) {
                    resolve();
                });
            } else {
                resolve();
            }
        }, function (err) {
            // console.log('iterating done');
        });
    }

    const processLocations = () => {
        return new Promise((resolve, reject) => {
            if (updatesData.locations.length > 0) {
                async.forEach(updatesData.locations, function (iLocation, next) {
                    Location.findOne({
                        distance: iLocation.distance
                    }).then(function (fLocation) {
                        if (fLocation === null) {
                            const newLocation = new Location({
                                distance: iLocation.distance,
                                name: iLocation.name,
                                type: iLocation.type,
                                isRaid: iLocation.isRaid,
                                effects: [iLocation.effect],
                                capsReceived: [iLocation.capsReceived],
                                materialsReceived: [iLocation.materialsReceived],
                                capsLost: [iLocation.capsLost],
                                materialsLost: [iLocation.materialsLost],
                                receivedItems: [iLocation.receivedItems],
                                receivedBonusItems: [iLocation.receivedBonusItems],
                                healthInjuries: [iLocation.healthInjuries]
                            });

                            dataProcessed += 1;

                            newLocation.save().then(() => next())
                        } else {
                            if (!_.contains(fLocation.effects, iLocation.effect)) {
                                fLocation.effects.push(iLocation.effect);
                            }

                            if (!_.contains(fLocation.capsReceived, iLocation.capsReceived)) {
                                fLocation.capsReceived.push(iLocation.capsReceived);
                            }

                            if (!_.contains(fLocation.materialsReceived, iLocation.materialsReceived)) {
                                fLocation.materialsReceived.push(iLocation.materialsReceived);
                            }

                            if (!_.contains(fLocation.capsLost, iLocation.capsLost)) {
                                fLocation.capsLost.push(iLocation.capsLost);
                            }

                            if (!_.contains(fLocation.materialsLost, iLocation.materialsLost)) {
                                fLocation.materialsLost.push(iLocation.materialsLost);
                            }

                            if (!_.contains(fLocation.healthInjuries, iLocation.healthInjuries)) {
                                fLocation.healthInjuries.push(iLocation.healthInjuries);
                            }

                            if (!_.isEmpty(iLocation.receivedBonusItems)) {
                                Object.keys(iLocation.receivedBonusItems).map((item) => {
                                    const amount = iLocation.receivedBonusItems[item];

                                    if (!_.isEmpty(fLocation.receivedBonusItems)) {
                                        if (fLocation.receivedBonusItems[item]) {
                                            // FIXME: TypeError: fLocation.receivedBonusItems[item].push is not a function

                                            if (!_.contains(fLocation.receivedBonusItems[item], amount)) {
                                                // fLocation.receivedBonusItems[item].push(amount);
                                            }
                                        } else {
                                            fLocation.receivedBonusItems[item] = [amount];
                                        }
                                    }
                                })
                            }

                            dataProcessed += 1;

                            fLocation.save().then(() => next());
                        }
                    });
                }, function (err) {
                    resolve();
                });
            } else {
                resolve();
            }
        })
    };


    Promise.all([
        processBeasts(),
        processLocations()
    ]).then(o => {
        let errors = '';
        let dupesText = '';

        if (reportData.errors.length > 0) {
            errors = `
    *–¢–∞–∫–∂–µ —è –∑–∞–º–µ—Ç–∏–ª —Ç–∞–∫–∏–µ –≤–µ—â–∏*:
    ${reportData.errors.join('\n')}
            `;
        }

        if(dupes.battles > 0 || dupes.flees > 0) {
            dupesText = '–ü–æ—Ö–æ–∂–µ —Ç—ã —Å–∫–∏–¥—ã–≤–∞–ª –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ä–≤–∞—Ä–¥—ã –ø–æ –≤—Ç–æ—Ä–æ–º—É —Ä–∞–∑—É. –Ø –Ω–µ –Ω–∞—á–∏—Å–ª—è–ª —Ç–µ–±–µ –∑–∞ –Ω–∏—Ö –æ—á–∫–∏'
        }

        if (dataProcessed > 0) {
            // TODO: Move out shit to strings
            // TODO: Implement meaningfull report data regarding found usefull data
            setTimeout(() => {

                if(options.silent) {
                    reply = `
–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ä–≤–∞—Ä–¥. –Ø –ø–µ—Ä–µ–≤—ë–ª ${userForwardPoints.toFixed(1)} üíé*–®–º–µ–ø—Å–µ–ª–µ–π* –Ω–∞ —Ç–≤–æ–π —Å—á—ë—Ç.\n_${dupesText}_`;
                } else {
                    reply = `–§—É—Ö, —è —Å–æ –≤—Å—ë–º —Å–ø—Ä–∞–≤–∏–ª—Å—è - —Å–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω–æ–µ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!
–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª ${userForwardPoints.toFixed(1)} üíé*–®–º–µ–ø—Å–µ–ª–µ–π* –∑–∞ —Å–≤–æ–∏ —Ñ–æ—Ä–≤–∞—Ä–¥—ã!
_${dupesText}_
–í—Å–µ–≥–æ —è –Ω–∞—Å—á–∏—Ç–∞–ª ${dataProcessed} –¥–∞–Ω–Ω—ã—Ö!

–ï—Å–ª–∏ —Ç—ã —á–µ–≥–æ-—Ç–æ –∑–∞–±—ã–ª –¥–æ–∫–∏–Ω—É—Ç—å - —Å–º–µ–ª–æ –∂–º–∏ –Ω–∞ \`[–°–∫–∏–Ω—É—Ç—å –ª–æ–≥ üèÉ]\` –∏ _–¥–æ–∫–∏–¥—ã–≤–∞–π_
${errors}`;
                }

                msg.reply.text(reply, {
                    replyMarkup: defaultKeyboard,
                    parseMode: 'markdown',
                    asReply: options.silent
                }).then(res => {
                    userManager.addPoints(msg.from.id, userForwardPoints).then(result => {
                        if(!result.ok) {
                            if(result.reason === 'USER_NOT_FOUND') {
                                msg.reply.text('–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ç–µ–±–µ —à–º–µ–ø—Å–µ–ª–∏ –ø–æ–∫–∞ —Ç—ã –Ω–µ —Å–∫–∏–Ω–µ—à—å –º–Ω–µ —Å–≤–æ–π –ø–∏–ø-–±–æ–π :—Å')
                            }
                            console.log('userManager.addPoints: '+JSON.stringify(result));
                        }
                    });
                });
            }, 1500);
        } else {
            setTimeout(() => {
                msg.reply.text(`
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ–≥ —É–∑–Ω–∞—Ç—å –∏–∑ —Ç–≤–æ–∏—Ö —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤ :—Å`, {
                    replyMarkup: defaultKeyboard,
                    parseMode: 'markdown'
                });
            }, 1500);
        }

        createSession(msg.from.id);
    });
}

const processUserData = (msg, options) => {
    sessions[msg.from.id].state = states.WAIT_FOR_DATA_TO_PROCESS;

    const {
        data
    } = sessions[msg.from.id];

    let {
        reportData,
        updatesData
    } = processForwards(data);

    if(updatesData.locations.length === 0 && updatesData.beasts.length === 0) {
        return msg.reply.text(`
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ–≥ —É–∑–Ω–∞—Ç—å –∏–∑ —Ç–≤–æ–∏—Ö —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤ :—Å`, {
                replyMarkup: defaultKeyboard,
            parseMode: 'markdown'
        });
    }

    if (options.usePip && reportData.pipRequired) {
        userManager.findByTelegramId(msg.from.id).then(result => {
            if (result.ok && result.reason === 'USER_FOUND') {
                if(result.data.pip !== undefined) {
                    sessions[msg.from.id].data.push({
                        data: result.data.pip,
                        dataType: 'pipboy',
                        date: result.data.pip.timeStamp
                    });
                }


                const {
                    reportData: reportDataWithUserPip,
                    updatesData: updatesDataWithUserPip
                } = processForwards(data);

                if (reportDataWithUserPip.criticalError && reportDataWithUserPip.couldBeUpdated) {
                    sessions[msg.from.id].state = states.WAIT_FOR_PIP_FORWARD;
                    return msg.reply.text(`
–¢–≤–æ–π –ø–∏–ø-–±–æ–π, –∫–æ—Ç–æ—Ä—ã–π —è –∫–æ–≥–¥–∞-—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª - —É—Å—Ç–∞—Ä–µ–ª.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–∫–∏–Ω—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –ø–∏–ø-–±–æ–π.
–õ–∏–±–æ –∂–µ —ç—Ç–æ —Ñ–æ—Ä–≤–∞—Ä–¥ —Å —Å—Ç–∞—Ç–∞–º–∏, –æ—Ç–ª–∏—á–Ω—ã–º–∏ –æ—Ç —Ç–≤–æ–∏—Ö.

–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–º–∏ /skippipforward

*–í–ù–ò–ú–ê–ù–ò–ï: –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ù–ê /skippipforward - –ë–û–¢ –ü–†–û–ò–ì–ù–û–†–ò–†–£–ï–¢ –¢–í–û–ò –ë–ò–¢–í–´ –ò –ü–û–ë–ï–ì–ò –û–¢ –ú–û–ë–û–í –ò –ù–ï –ó–ê–ü–ò–®–ï–¢ –ò–• –í –ë–ê–ó–£*
`, {
                        parseMode: 'markdown',
                        replyMarkup: toGameKeyboard
                    });4
                } else if (reportDataWithUserPip.criticalError && !reportDataWithUserPip.couldBeUpdated) {
                    createSession(msg.from.id);
                    return msg.reply.text('–¢–≤–æ–π –ø–∏–ø –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—Ç —Ç–≤–æ–∏–º —Å—Ç–∞—Ç–∞–º –∏–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–∞–º!\n–ü—Ä–æ—Å—Ç–∏, —è –≤—ã–Ω—É–∂–¥–µ–Ω –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–≤–æ–∏ —Ñ–æ—Ä–≤–∞—Ä–¥—ã.', {
                        replyMarkup: defaultKeyboard
                    });
                } else {
                    updatesData = updatesDataWithUserPip;
                    reportData = reportDataWithUserPip;

                    actualProcessUserData(msg, reportData, updatesData, options);
                }
            } else {
                sessions[msg.from.id].state = states.WAIT_FOR_PIP_FORWARD;
                return msg.reply.text(`
–ü–æ—Ö–æ–∂–µ —Ç—ã –º–Ω–µ –µ—â—ë –Ω–µ —Å–∫–∏–¥—ã–≤–∞–ª –ø–∏–ø –±–æ–π
–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–º–∏ /skippipforward

*–í–ù–ò–ú–ê–ù–ò–ï: –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ù–ê /skippipforward - –ë–û–¢ –ü–†–û–ò–ì–ù–û–†–ò–†–£–ï–¢ –¢–í–û–ò –ë–ò–¢–í–´ –ò –ü–û–ë–ï–ì–ò –û–¢ –ú–û–ë–û–í –ò –ù–ï –ó–ê–ü–ò–®–ï–¢ –ò–• –í –ë–ê–ó–£*
`, {
                    parseMode: 'markdown',
                    replyMarkup: toGameKeyboard
                });
            }
        });
    } else {
        userManager.findByTelegramId(msg.from.id).then(result => {
            // BOOK
            if(result.ok && result.reason === 'USER_FOUND') {
                    actualProcessUserData(msg, reportData, updatesData, options);
            } else {
                actualProcessUserData(msg, reportData, updatesData, options);
            }
        });
    }
}

bot.on('/journeyforwardend', msg => {
    if(sessions[msg.from.id] === undefined) {
        createSession(msg.from.id);

        return msg.reply.text(`–ß—ë—Ä—Ç, –ø–æ—Ö–æ–∂–µ –º–µ–Ω—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª –∫–∞–∫–æ–π-—Ç–æ –º—É–¥–∞–∫ –∏ —Ç–≤–æ–∏ —Ñ–æ—Ä–≤–∞—Ä–¥—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å, –ø—Ä–æ—Å—Ç–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ :—Å`, {
            replyMarkup: defaultKeyboard
        });
    } else {
        sessions[msg.from.id].state = states.WAIT_FOR_DATA_TO_PROCESS;

        // console.log(JSON.stringify(sessions[msg.from.id].data));
        processUserData(msg, {
            usePip: sessions[msg.from.id].processDataConfig.usePip,
            useBeastFace: sessions[msg.from.id].processDataConfig.useBeastFace
        });
    }
});

bot.on('/journeyforwardcancel', msg => {
    createSession(msg.from.id);

    return msg.reply.text('–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∫–∏–Ω—É—Ç—å –ø–∏–ø-–±–æ–π –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ø—Ä–æ–∫–∞—á–∫–µ —Å–∫–∏–ª–æ–≤ –ª–∏–±–æ –∂–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é  [`–°–∫–∏–Ω—É—Ç—å –ª–æ–≥ üèÉ`]', {
        replyMarkup: defaultKeyboard,
        parseMode: 'markdown'
    });
});

bot.on('/skippipforward', msg => {
    msg.reply.text('–û–∫–µ–π, —Å–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á—Ç–æ —Å–º–æ–≥—É');

    sessions[msg.from.id].processDataConfig.usePip = false;

    processUserData(msg, {
        usePip: sessions[msg.from.id].processDataConfig.usePip,
        useBeastFace: sessions[msg.from.id].processDataConfig.useBeastFace
    });
});

bot.on('/skipbeastforward', msg => {
    msg.reply.text('–û–∫–µ–π, —Å–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á—Ç–æ —Å–º–æ–≥—É');

    sessions[msg.from.id].processDataConfig.useBeastFace = false;

    processUserData(msg, {
        usePip: sessions[msg.from.id].processDataConfig.usePip,
        useBeastFace: sessions[msg.from.id].processDataConfig.useBeastFace
    });
})


bot.on('/version', msg => {
    msg.reply.text(`–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ - <b>${config.version}</b> [Œ≤]`, {
        asReply: true,
        parseMode: 'html'
    });
})

bot.on('/eqp', msg => {
    // TODO: Inline button resize
    const buttons = processMenu(equipmentMenu).map(menuItem => {
        return bot.inlineButton(menuItem.title, {callback: `equipment_menu-${menuItem.name}`});
    });

    let inlineReplyMarkup = bot.inlineKeyboard(_.chunk(buttons, 3));

    return msg.reply.text(equipmentMenu.text, {
        parseMode: 'markdown',
        replyMarkup: inlineReplyMarkup
    });
})

bot.on('/locations', msg => {
    const buttons = processMenu(locationsMenu).map(menuItem => {
        return bot.inlineButton(menuItem.title, {callback: `locations_menu-${menuItem.name}`});
    });

    let inlineReplyMarkup = bot.inlineKeyboard(_.chunk(buttons, 3));

    return msg.reply.text(locationsMenu.text, {
        parseMode: 'html',
        replyMarkup: inlineReplyMarkup
    });
})

bot.on('/sppl', msg => {
    const buttons = processMenu(suppliesMenu).map(menuItem => {
        return bot.inlineButton(menuItem.title, {callback: `supplies_menu-${menuItem.name}`});
    });

    let inlineReplyMarkup = bot.inlineKeyboard(_.chunk(buttons, 3));

    return msg.reply.text(suppliesMenu.text, {
        parseMode: 'html',
        replyMarkup: inlineReplyMarkup
    });
})

bot.on('/achv', msg => {
    const buttons = processMenu(achievementsMenu).map(menuItem => {
        return bot.inlineButton(menuItem.title, {callback: `achievements_menu-${menuItem.name}`});
    });

    let inlineReplyMarkup = bot.inlineKeyboard(_.chunk(buttons, 3));

    return msg.reply.text(achievementsMenu.text, {
        parseMode: 'markdown',
        replyMarkup: inlineReplyMarkup
    });
})

bot.on('/dng', msg => {
    const buttons = processMenu(dungeonMenu).map(menuItem => {
        return bot.inlineButton(menuItem.title, {callback: `dungeons_menu-${menuItem.name}`});
    });

    let inlineReplyMarkup = bot.inlineKeyboard(_.chunk(buttons, 2));

    return msg.reply.text(dungeonMenu.text, {
        parseMode: 'html',
        replyMarkup: inlineReplyMarkup,
        webPreview: false
    });
})

bot.on('/cfl', msg => {
    return msg.reply.text(commandsForLag, {
        paresMode: 'html'
    });
})

bot.on('/skill_upgrade', msg => {
    const skillOMaticText = `
–í ¬´<b>üéì –°–∫–∏–ª–æ–∫–∞—á–∞—Ç–æ—Ä–µ</b>¬ª —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–∫–∞—á–∫—É —Ç–≤–æ–∏—Ö —Å–∫–∏–ª–æ–≤.`;

    findPip(msg, result => {
        if(result.ok && result.reason === 'USER_FOUND') {
            if(sessions[msg.from.id] === undefined) {
                createSession(msg.from.id);
            }

            sessions[msg.from.id].pip = result.data.pip;
            sessions[msg.from.id].state = states.WAIT_FOR_SKILL;

            const replyMarkup = bot.keyboard([
                [buttons.skillSelectStrength.label, buttons.skillSelectAccuracy.label, buttons.skillSelectAgility.label],
                [buttons.skillSelectHealth.label, buttons.skillSelectCharisma.label],
                [buttons.cancelAction.label]
            ], {
                resize: true
            });

            const skillMap = {
                "health": "‚ù§ –ñ–∏–≤—É—á–µ—Å—Ç—å",
                "strength": "üí™ –°–∏–ª–∞",
                "precision": "üî´ –ú–µ—Ç–∫–æ—Å—Ç—å",
                "charisma": "üó£ –•–∞—Ä–∏–∑–º–∞",
                "agility": "ü§∏‚Äç‚ôÄÔ∏è –õ–æ–≤–∫–æ—Å—Ç—å"
            };

            const userSkills = Object.keys(skillMap).map(key => {
                const skillName = skillMap[key];

                return `<b>${skillName}</b>: ${result.data.pip[key]}`;
            })

            return msg.reply.text(`
${skillOMaticText}

–í–æ—Ç —á—Ç–æ —è –∑–Ω–∞—é –ø—Ä–æ —Ç–≤–æ–∏ —Å–∫–∏–ª—ã:
${userSkills.join('\n')}
<i>(–ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –ø–∏–ø-–±–æ–π)</i>


<b>–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–π —Å–∫–∏–ª —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–∫–∞—á–∞—Ç—å</b>

–ß—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <code>[‚Ü©Ô∏è–ù–∞–∑–∞–¥]</code>.
–õ–∏–±–æ, –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–ø–∏—à–∏ /cancel.
            `, {
                replyMarkup,
                parseMode: 'html'
            });
        }

        return msg.reply.text(`
${skillOMaticText}

–û—É, –ø–æ—Ö–æ–∂–µ —è –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é –ø—Ä–æ —Ç–≤–æ–π –ø–∏–ø :—Å
–ü–µ—Ä–µ–π–¥–∏ –≤ –∏–≥—Ä—É –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É –∏ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –µ–≥–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!
        `, {
            replyMarkup: toGameKeyboard,
            parseMode: 'html'
        });
    });
})

bot.on(['/leaderboard','/top'], msg => {
    userManager.leaderboard(msg.from.id).then(result => {
        if (result.ok && result.reason === 'LEADERBOARD_GENERATED') {
            return msg.reply.text(`<i>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –æ—Ç–ø—Ä–∞–ª—è—é—â–∏—Ö —Ñ–æ—Ä–≤–∞—Ä–¥—ã:</i> \n\n`+result.data, {
                parseMode: 'html'
            });
        } else {
            if(result.reason === 'NO_USERS_FOUND') {
                return msg.reply.text('–í –±–∞–∑–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç —é–∑–µ—Ä–æ–≤ :—Å');
            }

            return msg.reply.text(JSON.stringify(result))
        }
    });
});

bot.on("/mypipstats", msg => {
    User.findOne({ "telegram.id": msg.from.id }, function(err, person) {
      if (err) {
        console.log(err);
        return;
      }

      if (person === null) {
        return msg.reply.text('–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Ç–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - —Ç—ã –º–Ω–µ –µ—â—ë –Ω–µ —Å–∫–∏–¥—ã–≤–∞–ª —Å–≤–æ–µ–≥–æ –ø–∏–ø-–±–æ—è')
      }

      let pips = person.history.pip.toObject();
      var pipsSize = pips.length;
      var limit = 10;

      if (pips.length <= 1) {
        return msg.reply.text(
          "–Ø –Ω–µ –≤–∏–¥–µ–ª —á—Ç–æ –±—ã –ø—Ä–æ–∫–∞—á–∏–≤–∞–ª—Å—è –≤ —Å–∫–∏–ª–∞—Ö. –°–∫–∏–Ω—å —Å–≤–æ–π –ø–∏–ø-–±–æ–π –∫–æ–≥–¥–∞ –ø—Ä–æ–∫–∞—á–∞–µ—à—å –∫–∞–∫–æ–π-—Ç–æ —Å–∫–∏–ª",
          { asReply: true }
        );
      }

      if (pipsSize > limit) {
        pips = pips.slice(pipsSize-limit, pipsSize)
      }

      const whiteListKeys = [
        "health",
        "strength",
        "precision",
        "charisma",
        "agility"
      ];

      const systemToHumanKeysMap = {
        health: "–ñ–∏–≤—É—á–µ—Å—Ç—å",
        strength: "–°–∏–ª–∞",
        precision: "–ú–µ—Ç–∫–æ—Å—Ç—å",
        charisma: "–•–∞—Ä–∏–∑–º–∞",
        agility: "–õ–æ–≤–∫–æ—Å—Ç—å"
      };

      const history = {};

      whiteListKeys.forEach(key => {
        history[key] = [];
      });

      pips.forEach(pip => {
        Object.keys(pip).forEach(key => {
          if (_.contains(whiteListKeys, key)) {
            const value = pip[key];

            history[key].push(value);
          }
        });
      });

      const flattify = arr => {
        const maxIndex = arr.length - 1;

        return arr.map((v, i) => {
          if (i !== maxIndex && i !== 0) {
            const prevValue = arr[i - 1];
            const nextValue = arr[i + 1];

            if (prevValue < v && nextValue < v) {
              return prevValue;
            }

            return v;
          } else if (i === 0 || i === maxIndex) {
            return v;
          }
        });
      };

      Object.keys(history).forEach(key => {
        const arrayOfValues = history[key];
        history[key] = flattify(arrayOfValues);
      });

      const colors = {
        health: "rgba(231, 76, 60,1.0)",
        strength: "rgba(241, 196, 15,1.0)",
        precision: "rgba(39, 174, 96,1.0)",
        charisma: "rgba(52, 73, 94,1.0)",
        agility: "rgba(189, 195, 199,1.0)"
      };

      const createDataSets = history => {
        return whiteListKeys.map(key => {
          return {
            label: systemToHumanKeysMap[key],
            backgroundColor: colors[key],
            borderColor: colors[key],
            data: history[key],
            fill: false,
            lineTension: 0
          };
        });
      };

      const getDateLabels = pips => {
        return pips.map(pip => moment(pip.timeStamp * 1000).format("DD/MM"));
      };

      var config = {
        type: "line",
        data: {
          labels: getDateLabels(pips),
          datasets: createDataSets(history)
        },
        options: {
          scales: {
            xAxes: [
              {
                display: true,
                scaleLabel: {
                  display: true,
                  labelString: "–î–∞—Ç–∞"
                }
              }
            ],
            yAxes: [
              {
                display: true,
                scaleLabel: {
                  display: true,
                  labelString: "–£—Ä–æ–≤–µ–Ω—å"
                }
              }
            ]
          },
          legend: {
            position: 'bottom'
          },
          title: {
            display: true,
            text: '–ü—Ä–æ–≥—Ä–µ—Å –ø–æ –ü–∏–ø-–ë–æ—é'
          }
        }
      };

      chartGeneration(config, buffer => {
        msg.reply.photo(buffer, {
          asReply: true,
          caption: `–ü–æ–ª—É—á–∏ –∏ —Ä–∞—Å–ø–∏—à–∏—Å—å!`
        }).catch(e => console.log(e));
      })
    });
  });

bot.on('/debug', msg => {
    return msg.reply.text(`–§–æ—Ä–≤–∞—Ä–¥—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç @WastelandWarsBot.
–û—Ç–º–µ–Ω—è—é —Ç–≤–æ–∏ —Ñ–æ–≤–∞—Ä–¥—ã - –Ω–µ—Ö—É–π –≤—ã–µ–±—ã–≤–∞—Ç—å—Å—è.`, {
        asReply: false
    });
});

bot.on(/^\d+$/, msg => {
    switch (sessions[msg.from.id].state) {
        case states.WAIT_FOR_DISTANCE:
            const reachableKm = Number(msg.text);

            if (reachableKm > 100) {
                msg.reply.text('–ë–ª—è, –Ω—É –Ω–µ –≥–æ–Ω–∏ - –¥–∞–≤–∞–π —á—É—Ç—å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–µ–π, –æ–∫–µ–π ?)')
            } else if (reachableKm <= 100) {
                sessions[msg.from.id].reachableKm = reachableKm;
                sessions[msg.from.id].state = states.WAIT_FOR_LEVELS;

                askAmountOfLevels(msg);
            }

            break;
        case states.WAIT_FOR_LEVELS:
            const upgradeAmount = Number(msg.text);
            const pip = sessions[msg.from.id].pip;
            const skillToUpgrade = sessions[msg.from.id].upgradeSkill;

            if (upgradeAmountValidation(pip, skillToUpgrade, upgradeAmount, 1300)) {
                getEffort(msg, bot);
            } else {
                msg.reply.text('–ß—ë—Ç–æ –¥–æ—Ö—É—è –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π —á–∏—Å–ª–æ –ø–æ–º–µ–Ω—å—à–µ.')
            }

            break;
    }
});

bot.on('/show_help', msg => msg.reply.text(`
_–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–µ—Ç–∞ —Ä–µ–∂–∏–º–µ._

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–æ–∫–∞—á–∞—Ç–æ—Ä - —Å–∫–∏–Ω—å –ø–∏–ø;

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –∑–Ω–∞–µ—Ç –±–æ—Ç –ø—Ä–æ –º–æ–±–∞ - —Å–∫–∏–Ω—å —Ñ–æ—Ä–≤–∞—Ä–¥ –≤—Å—Ç—Ä–µ—á–∏ —Å –Ω–∏–º;

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å –±–æ—Ç–∞ –Ω–æ–≤–æ–º—É - –Ω–∞–∂–∏–º–∞–µ—à—å —Å–∫–∏–Ω—É—Ç—å –ª–æ–≥, –∑–∞—Ç–µ–º –∫–∏–¥–∞–µ—à—å –≤—Å–µ —Å–≤–æ–∏ —Ñ–æ—Ä–≤–∞—Ä–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å( –±–æ–∏ —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏ –∏ –ø—Ä–æ—Ö–æ–¥ –∫–º –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç) –∏ –≤ –∫–æ–Ω—Ü–µ —Å–≤–µ–∂–∏–π –ø–∏–ø. –ó–∞—Ç–µ–º –Ω–∞–∂–∏–º–∞–µ—à—å —Å—Ç–æ–ø –∏ –∂–¥–µ—à—å —Ä–µ–∞–∫—Ü–∏–∏ –±–æ—Ç–∞.

–ï—Å–ª–∏ —á—Ç–æ, –≤–æ—Ç –≥–∞–π–¥ - https://teletype.in/@eko24/SkUiLkzCz;
`, {
    parseMode: 'markdown'
}));

bot.on('/show_drones', msg => msg.reply.text(`
üõ∞–ë–∞—Ä–∞—Ö–ª–æ ‚öôÔ∏è–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
‚öîÔ∏è10 üõ°50/50 ‚ö°Ô∏è6%

üõ∞–ú–∞–ª—ã—à ‚öôÔ∏è–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
‚öîÔ∏è18 üõ°80/80 ‚ö°Ô∏è10%

üõ∞–î–µ—Ñ–æ–ª—Ç ‚öôÔ∏è–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
‚öîÔ∏è28 üõ°120/120 ‚ö°Ô∏è12%

üõ∞–®–µ—Ä–ª–æ–∫–¥—Ä–æ–Ω ‚öôÔ∏è–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
‚öîÔ∏è12 üõ°130/130 ‚ö°Ô∏è3%
–ò–º–µ–µ—Ç –º–æ–¥—É–ª—å –†–∞–¥–∞—Ä, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤.
---------------------------------------
üõ∞Robot Rock üî´–ë–æ–µ–≤–æ–π
‚öîÔ∏è46 üõ°150/150 ‚ö°Ô∏è14%

üõ∞–†–∞–¥-–¥—Ä–æ–Ω üî´–ë–æ–µ–≤–æ–π
‚öîÔ∏è68 üõ°180/180 ‚ö°Ô∏è14%
---------------------------------------
üõ∞–ü—Ä–æ—Ç–µ–∫–¥—Ä–æ–Ω üõ°–û–±–æ—Ä–æ–Ω—è—é—â–∏–π
‚öîÔ∏è14 üõ°270/270 ‚ö°Ô∏è14%

üõ∞AWESOM-O üõ°–û–±–æ—Ä–æ–Ω—è—é—â–∏–π
‚öîÔ∏è23 üõ°420/420 ‚ö°Ô∏è16%
---------------------------------------
–ü–æ —Å—Ç–∞—Ç–∞–º:
‚öîÔ∏è - —É—Ä–æ–Ω –¥—Ä–æ–Ω–∞
üõ°- –ø—Ä–æ—á–Ω–æ—Å—Ç—å, —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ –¥—Ä–æ–Ω—É.
‚ö°Ô∏è- —à–∞–Ω—Å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±–æ–π.
`, {
    parseMode: 'markdown',
    webPreview: false
}));

bot.on('/show_hall_of_fame', msg => msg.reply.text(`
<code>–ó–¥–µ—Å—å —É–≤–µ–∫–æ–≤–µ—á–µ–Ω—ã –∂–∏—Ç–µ–ª–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—É—Å—Ç–æ—à–∏, –æ–∫–∞–∑–∞–≤—à–∏–µ —Ç–∏—Ç–∞–Ω–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å –Ω–∞ —ç—Ç–∞–ø–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –±–µ—Ç—ã, –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –±–æ—Ç–∞ –µ—â—ë –∫–∞–∫ –°–∫–∏–ª–æ–∫–∞—á–∞—Ç–æ—Ä–∞</code>

–°–∞–º–æ–º—É —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –≤ –ü—É—Å—Ç–æ—à–∏ - –ò–ª—å–µ (@Rev1veD) –§—É–Ω—Ç—É

–ù–∏–∑–∫–∏–π –ø–æ–∫–ª–æ–Ω –í–ª–∞–¥–∏–º–∏—Ä—É (@radueff) –ö—É–∑—å–º–∏—á—ë–≤—É - —Å–æ–∑–¥–∞—Ç–µ–ª—é –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞-—Ö–µ–ª–ø–µ—Ä–∞

–ë—É–Ω–¥–∞—Ä–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–æ—á–∫–∞ –∫–∞–Ω–∞–ª—É @chetirka_bund –∑–∞ –ø–æ–º–æ—â—å –≤ —Ä–∞—Å–ø–æ—Å—Ç—Ä–æ–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ—ã –æ –±–æ—Ç–µ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ

–Ø–¥–µ—Ä–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª—É @nushit –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –¥—Ä–æ–Ω–æ–≤
https://t.me/nushit/393

–°–æ—Ä–æ–∫ –¥–≤–∞ —Ä–∞–∑–∞ —Å–ø–∞—Å–∏–±–æ "–û—Å–Ω–æ–≤–µ" –∏ —Ç–æ–≤–∞—Ä–∏—â—É –ó–≤—ë–∑–¥–æ–ø—ã–ª—å–∫–∏–Ω—É –∑–∞ –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –ª–æ–∫–∞—Ü–∏–∏
https://t.me/trust_42/57

–û—Ç–¥–µ–ª—å–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞—Å—Ç—å —Ç–æ–≤–∞—Ä–∏—â—É @MohanMC –∑–∞ –ø–æ–º–æ—â—å –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

<code>üèÖ –ú–µ–¥–∞–ª—å —Å –æ—Ç–ª–∏—á–∏–µ–º —Ö1</code> –∏ <code>–û–ì–†–û–ú–ù–û–ï —Å–ø–∞—Å–∏–±–æ —Ö4</code> @K3nny2k –∑–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É–∂–∞—Å–Ω–æ–≥–æ –±–∞–≥–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–±–µ–≥–æ–≤,
–ø–æ–º–æ—â—å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–±–æ–≤, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–∞–≥–æ–≤ —Å –≥–∏–≥–∞–Ω—Ç–∞–º–∏, –∏ —Ö—É–π –∑–Ω–∞–µ—Ç —á—Ç–æ –µ—â—ë.

<code>–ù–µ–æ–±—ã—á–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —Ö1</code> @x59x75x72x79 –∑–∞ –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω—ã–µ –±–∞–≥—Ä–µ–ø–æ—Ä—Ç—ã –æ –≤—ã–≤–æ–¥–µ –∏–Ω—Ñ—ã

–°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è...
`, {
    parseMode: 'html',
    webPreview: false
}));



const giantsKeyboard = bot.inlineKeyboard([
    [
        bot.inlineButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', {callback: 'update_giants'}),
        bot.inlineButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {callback: 'show_info'})
    ]
]);

const beastRangesKeyboard = bot.inlineKeyboard(_.chunk(getRanges.map(range => {
    const first = _.min(range);
    const last = _.max(range);

    if (first !== last) {
        return bot.inlineButton(`${first}-${last}`, {
            callback: `show_beast_${first}-${last}`
        });
    }
    return bot.inlineButton(`${first}`, {
        callback: `show_beast_${first}-${first}`
    });
}), 5));



bot.on('/show_giants', msg => {


Giant.find({}).then(giants => {
    const giantsReply = _.sortBy(giants, 'distance').map(giant => {
    const isDead = giant.health.current <= 0;
    const time = moment(giant.forwardStamp, 'X').add(3, 'hour').format('DD.MM HH:mm');

    return `${giant.distance || '??'}–∫–º - *${giant.name}*\n${time} - ${isDead ? 'üí´ –ø–æ–≤–µ—Ä–∂–µ–Ω' : `‚ù§Ô∏è${giant.health.current}`}`;
});

        const reply = `
–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≥–∏–≥–∞–Ω—Ç–∞–º (–ú–°–ö):

${_.isEmpty(giantsReply) ? '–ü–æ–∫–∞ —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç' : giantsReply.join('\n\n')}

_–°–∫–∏–¥—ã–≤–∞–π—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥—ã –æ –≤—Å—Ç—Ä–µ—á–µ –∏–ª–∏ –±–æ–µ —Å –≥–∏–≥–∞–Ω—Ç–æ–º - –æ–Ω–∏ –∑–∞–ø–∏—à—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–æ–º._
_–ï—Å–ª–∏ –≥–∏–≥–∞–Ω—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - –∑–Ω–∞—á–∏—Ç –µ–≥–æ –µ—â—ë –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª–∏ –±–æ—Ç—É_
`;

        return msg.reply.text(reply, {
            parseMode: 'markdown',
            replyMarkup: giantsKeyboard
        });
    });
});

bot.on('/show_beasts', msg => {
    const reply = `
–≠—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö –º–æ–±–æ–≤ –≤ –ü—É—Å—Ç–æ—à–∏ <i>(–Ω–µ –¥–∞–Ω–∂–µ–≤—ã—Ö)</i>
–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤ –æ—Ç –∏–≥—Ä–æ–∫–æ–≤ (–±–æ–∏, –ø–æ–±–µ–≥–∏ –∏ –æ–≥–ª—É—à–µ–Ω–∏—è)

–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤, –ø–æ—Å–ª–µ –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å–ø–∏—Å–æ–∫ –º–æ–±–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–º–µ—á–µ–Ω—ã –Ω–∞ —ç—Ç–æ–º –∫–∏–ª–æ–º–µ—Ç—Ä–µ.

–ñ–º—è–∫–∞–π –ø–æ <b>/mob_1234qwerty...</b> –ø–æ–¥ –Ω—É–∂–Ω—ã–º –≤–∞–º –º–æ–±–æ–º, –ø–æ—Å–ª–µ –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ "–∫–∞—Ä—Ç–æ—á–∫–∞" –ø—Ä–æ—Å—Ç–æ–º—Ç—Ä–∞ –º–æ–±–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏:
[<code>–ò–Ω—Ñ–æ</code>], [<code>–õ—É—Ç</code>], [<code>–ë–æ–π</code>] –∏ [<code>–û–≥–ª—É—à–µ–Ω–∏—è</code>]

–ì–∞–π–¥ —Ç—É—Ç: https://teletype.in/@eko24/Sy4pCyiRM
`;
    msg.reply.text(reply, {
        replyMarkup: beastRangesKeyboard,
        parseMode: 'html',
        webPreview: false
    }).catch(e => console.log(e))
});

bot.on(/mob_(.+)/, msg => {
    const [, id] = /mob_(.+)/.exec(msg.text);

    routedBeastView(Beast, {
        _id: id,
        isDungeon: false
    }).then(({reply,beast}) => {
        if(reply != false) {
            const beastReplyMarkup = getBeastKeyboard(beast._id.toJSON());

            return msg.reply.text(reply, {
                asReply: true,
                parseMode: 'html',
                replyMarkup: beastReplyMarkup
            });
        } else {
            return msg.reply.text(`–ü—Ä–æ—Å—Ç–∏, —è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—ã—à–∞–ª –ø—Ä–æ —ç—Ç–æ–≥–æ –º–æ–±–∞ :c`, {
                asReply: true
            })
        }
    });
});

bot.on('/cancel', msg => {
    if(sessions[msg.from.id] === undefined) {
        createSession(msg.from.id);

        return msg.reply.text('–¢—ã –≤–µ—Ä–Ω—É—Å–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
            replyMarkup: defaultKeyboard
        });
    }
    if(sessions[msg.from.id].state === states.WAIT_FOR_DATA_TO_PROCESS) {
        return msg.reply.text('–î–æ–∂–¥–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤', {
            asReply: true
        });
    } else {
        createSession(msg.from.id);

        return msg.reply.text('–¢—ã –≤–µ—Ä–Ω—É—Å–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
            replyMarkup: defaultKeyboard
        });
    }

})

bot.on('/delete_accaunt', msg => {
    if(process.env.ENV === 'STAGING') {
        userManager.delete(msg.from.id).then(result => {
            if(!result.ok && result.reason === 'USER_NOT_FOUND') {
                return msg.reply.text('–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–≤–æ—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ', {
                    asReply: true
                })
            }

            if(result.ok && result.reason === 'USER_DELETED') {
                return msg.reply.text('–Ø —É–¥–∞–ª–∏–ª —Ç–≤–æ—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ', {
                    asReply: true
                })
            }
        })
    }
});

bot.on('/delete_beasts', msg => {
    if(process.env.ENV === 'STAGING') {
        Beast.find({'battles.stamp': {$regex: `.+${msg.from.id}`}}).then(beasts => {
            if(beasts.length === 0) {
                return msg.reply.text('–Ø –Ω–µ –Ω–∞—à—ë–ª —Ç–≤–æ–∏—Ö –±–∏—Ç–≤', {
                    asReply: true
                });
            } else {
                async.forEach(beasts, function (databaseBeast, next) {
                    const stampRegexp = new RegExp(`.+${msg.from.id}`);
                    databaseBeast.battles = databaseBeast.battles.filter(battle => {
                        return !stampRegexp.test(battle.stamp);
                    });

                    databaseBeast.save().then(res => {
                        next();
                    });
                }, function (err) {
                    return msg.reply.text('–Ø —É–¥–∞–ª–∏–ª —Ç–≤–æ–∏ –±–∏—Ç–≤—ã', {
                        asReply: true
                    });
                });
            }
        });
    }
});

bot.on('callbackQuery', msg => {
    const chatId = msg.from.id;
    const messageId = msg.message.message_id;
    const showMobRegExp = /show_beast_(\d+)-(\d+)/;
    const showEquipmentKeyboardRegExp = /equipment_menu-(.+)/;
    const showLocationsKeyboardRegExp = /locations_menu-(.+)/;
    const showSuppliesKeyboardRegExp = /supplies_menu-(.+)/;
    const showAchievementsKeyboardRegExp = /achievements_menu-(.+)/;
    const showDungeonsKeyboardRegExp = /dungeons_menu-(.+)/;
    const showMobRouteRegExp = /show_beast_page_(.+)-(.+)/;

    if(msg.data === 'update_giants') {
        Giant.find({}).then(giants => {
            bot.answerCallbackQuery(msg.id);

            const giantsReply = _.sortBy(giants, 'distance').map(giant => {
            const isDead = giant.health.current <= 0;
            const time = moment(giant.forwardStamp, 'X').add(3, 'hour').format('DD.MM HH:mm');

            return `${giant.distance || '??'}–∫–º - *${giant.name}*\n${time} - ${isDead ? 'üí´ –ø–æ–≤–µ—Ä–∂–µ–Ω' : `‚ù§Ô∏è${giant.health.current}`}`;
        });

                const reply = `
–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≥–∏–≥–∞–Ω—Ç–∞–º (–ú–°–ö):

${_.isEmpty(giantsReply) ? '–ü–æ–∫–∞ —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç' : giantsReply.join('\n\n')}

_–°–∫–∏–¥—ã–≤–∞–π—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥—ã –æ –≤—Å—Ç—Ä–µ—á–µ –∏–ª–∏ –±–æ–µ —Å –≥–∏–≥–∞–Ω—Ç–æ–º - –æ–Ω–∏ –∑–∞–ø–∏—à—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–æ–º._
_–ï—Å–ª–∏ –≥–∏–≥–∞–Ω—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - –∑–Ω–∞—á–∏—Ç –µ–≥–æ –µ—â—ë –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª–∏ –±–æ—Ç—É_
        `;



            return bot.editMessageText({chatId, messageId}, reply,{replyMarkup: giantsKeyboard, parseMode: 'markdown'});
        }).catch(e => console.log(e));
    } else if (msg.data === 'show_info') {
        bot.answerCallbackQuery(msg.id);

        const reply = `
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —Å–ª–µ–¥—É—é—â–∏—Ö –≥–∏–≥–∞–Ω—Ç–∞—Ö:
‚ñ´Ô∏è26–∫–º - *üóø–†–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—ã–π –ì–æ–ª–µ–º*
‚ñ´Ô∏è36–∫–º - *ü§ñ–ö–∏–±–æ—Ä–≥ –ê–Ω–∫–ª–∞–≤–∞*
‚ñ´Ô∏è44–∫–º - *üëπ–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ü—É—Å—Ç–æ—à–∏*
‚ñ´Ô∏è55–∫–º - *‚ò†Ô∏è–ö–∏–±–µ—Ä–∫–æ–≥–æ—Ç—å*
‚ñ´Ô∏è64–∫–º - *üê∫–Ø–æ-–ì–∏–≥–∞–Ω—Ç*

–ì–∏–≥–∞–Ω—Ç—ã –∏–º–µ—é—Ç –æ–≥—Ä–æ–º–Ω—ã–π –∑–∞–ø–∞—Å –∑–¥–æ—Ä–æ–≤—å—è. –ò–≥—Ä–æ–∫ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –≥–∏–≥–∞–Ω—Ç–∞, –Ω–µ —É–±–∏–≤ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–ª—å–∑—è –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ. –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –ì–∏–≥–∞–Ω—Ç–∞.

–ï—Å–ª–∏ –ì–∏–≥–∞–Ω—Ç –≤–∞—Å —É–¥–∞—Ä–∏—Ç –≤ –æ—Ç–≤–µ—Ç –∏ —É –≤–∞—Å –Ω–µ –º–µ–Ω–µ–µ 11 –µ–¥–∏–Ω–∏—Ü –∑–¥–æ—Ä–æ–≤—å—è, —Ç–æ —É –≤–∞—Å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è 1 —Ö–ø. –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–µ—Ç—Å—è –º–µ–Ω–µ–µ 11 –µ–¥–∏–Ω–∏—Ü –∑–¥–æ—Ä–æ–≤—å—è –∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–¥–∞—Ä, —Ç–æ –≤—ã —É–º–∏—Ä–∞–µ—Ç–µ.

–ì–∏–≥–∞–Ω—Ç—ã –æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ñ—Ä–∞–∫—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, —á–µ–º –±–æ–ª—å—à–µ –∏–≥—Ä–æ–∫–æ–≤ –∏—Ö –∞—Ç–∞–∫—É—é—Ç, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ —Å–º–æ–≥—É—Ç —Ö–æ–¥–∏—Ç—å –¥–∞–ª—å—à–µ.

–ü–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –Ω–∞–¥ –ì–∏–≥–∞–Ω—Ç–æ–º, –æ–Ω –≤–Ω–æ–≤—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Ç–æ–º –∂–µ –∫–∏–ª–æ–º–µ—Ç—Ä–µ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±–µ—Å–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –¥–∞–ª—å—à–µ –≤ –ü—É—Å—Ç–æ—à—å –≤–ø–ª–æ—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ì–∏–≥–∞–Ω—Ç–∞.
        `;

        return bot.editMessageText({chatId, messageId}, reply,{
            replyMarkup: giantsKeyboard,
            parseMode: 'markdown'
        });
    } else if (showMobRegExp.test(msg.data)) {
        const [, from, to] = showMobRegExp.exec(msg.data);


        Beast.find({isDungeon: false, distanceRange: {$gte: Number(from), $lte: Number(to)}}, 'battles.totalDamageReceived name id').then(beasts => {
            bot.answerCallbackQuery(msg.id);

            const jsonBeasts = beasts.map(b => {
                const jsoned = b.toJSON();

                return {
                    id: b.id,
                    ...jsoned
                }
            });

            const beastsByDamage = _.sortBy(jsonBeasts, v => v.battles.totalDamageReceived);

            const beastsList = beastsByDamage.map(beast => {
                return `
${beast.name}
/mob_${beast.id}`;
            }).join('\n');

            const reply = `
<b>–ú–æ–±—ã –Ω–∞ ${from}-${to}–∫–º</b>
<i>–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç —Å–ª–∞–±—ã–º –∫ —Å–∏–ª—å–Ω—ã–º</i>
${beastsList}
`;

            return bot.editMessageText({chatId, messageId}, reply,{
                replyMarkup: beastRangesKeyboard,
                parseMode: 'html'
            }).catch(e => console.log(e));
        }).catch(e => console.log(e));;
    } else if (showMobRouteRegExp.test(msg.data)) {
        bot.answerCallbackQuery(msg.id);

        const [, route, beastId] = showMobRouteRegExp.exec(msg.data);

        routedBeastView(Beast, {
            _id: beastId,
            isDungeon: false
        }, route).then(({reply, beast}) => {
            // TODO: Fix keyboard for dungeon beasts
            const beastReplyMarkup = getBeastKeyboard(beast._id.toJSON());

            return bot.editMessageText({chatId, messageId}, reply, {
                replyMarkup: beastReplyMarkup,
                parseMode: 'html'
            }).catch(e => console.log(e));
        })
    } else if (showEquipmentKeyboardRegExp.test(msg.data)) {
        bot.answerCallbackQuery(msg.id);
        const submenuRegExp = /equipment_menu-(.+)_.+/;

        const [, menu_route] = showEquipmentKeyboardRegExp.exec(msg.data);

        const chosenMenu = objectDeepSearch.findFirst(equipmentMenu, {name: menu_route});

        let buttonsMenu = chosenMenu;

        if(submenuRegExp.test(msg.data)) {
            const [, parentMenuName] = submenuRegExp.exec(msg.data);
            buttonsMenu = objectDeepSearch.findFirst(equipmentMenu, {name: parentMenuName});
        }

        let chosenMenuButtons = processMenu(buttonsMenu).map(menuItem => {
            return bot.inlineButton(menuItem.title, {callback: `equipment_menu-${menuItem.name}`});
        });

        let inlineReplyMarkup = bot.inlineKeyboard(_.chunk(chosenMenuButtons, 3));

        return bot.editMessageText({chatId, messageId}, chosenMenu.text, {
            parseMode: 'markdown',
            replyMarkup: inlineReplyMarkup
        });
    } else if (showLocationsKeyboardRegExp.test(msg.data)) {
        bot.answerCallbackQuery(msg.id);
        const submenuRegExp = /locations_menu-(.+)+/;
        const [, menu_route] = showLocationsKeyboardRegExp.exec(msg.data);
        const chosenMenu = objectDeepSearch.findFirst(locationsMenu, {name: menu_route});
        let buttonsMenu = chosenMenu;

        if(submenuRegExp.test(msg.data)) {
            const [, parentMenuName] = submenuRegExp.exec(msg.data);
            buttonsMenu = objectDeepSearch.findFirst(locationsMenu, {name: parentMenuName});
        }

        let chosenMenuButtons = processMenu(buttonsMenu).map(menuItem => {
            return bot.inlineButton(menuItem.title, {callback: `locations_menu-${menuItem.name}`});
        });

        if (_.isEmpty(chosenMenuButtons)) {
            chosenMenuButtons = processMenu(locationsMenu).map(menuItem => {
                return bot.inlineButton(menuItem.title, {callback: `locations_menu-${menuItem.name}`});
            });
        }

        let inlineReplyMarkup = bot.inlineKeyboard(_.chunk(chosenMenuButtons, 3));

        return bot.editMessageText({chatId, messageId}, chosenMenu.text, {
            parseMode: locationsMenu.config.parseMode,
            replyMarkup: inlineReplyMarkup
        });
    } else if (showSuppliesKeyboardRegExp.test(msg.data)) {
        bot.answerCallbackQuery(msg.id);


        const submenuRegExp = /supplies_menu-(.+)+/;
        const [, menu_route] = showSuppliesKeyboardRegExp.exec(msg.data);
        const chosenMenu = objectDeepSearch.findFirst(suppliesMenu, {name: menu_route});
        let buttonsMenu = chosenMenu;

        if(submenuRegExp.test(msg.data)) {
            const [, parentMenuName] = submenuRegExp.exec(msg.data);
            buttonsMenu = objectDeepSearch.findFirst(suppliesMenu, {name: parentMenuName});
        }

        let chosenMenuButtons = processMenu(buttonsMenu).map(menuItem => {
            return bot.inlineButton(menuItem.title, {callback: `supplies_menu-${menuItem.name}`});
        });

        if (_.isEmpty(chosenMenuButtons)) {
            chosenMenuButtons = processMenu(suppliesMenu).map(menuItem => {
                return bot.inlineButton(menuItem.title, {callback: `supplies_menu-${menuItem.name}`});
            });
        }

        let inlineReplyMarkup = bot.inlineKeyboard(_.chunk(chosenMenuButtons, 3));

        return bot.editMessageText({chatId, messageId}, chosenMenu.text, {
            parseMode: suppliesMenu.config.parseMode,
            replyMarkup: inlineReplyMarkup
        });
    } else if (showAchievementsKeyboardRegExp.test(msg.data)) {
        bot.answerCallbackQuery(msg.id);
        showAchievementsKeyboardRegExp


        const submenuRegExp = /achievements_menu-(.+)+/;
        const [, menu_route] = showAchievementsKeyboardRegExp.exec(msg.data);
        const chosenMenu = objectDeepSearch.findFirst(achievementsMenu, {name: menu_route});
        let buttonsMenu = chosenMenu;

        if(submenuRegExp.test(msg.data)) {
            const [, parentMenuName] = submenuRegExp.exec(msg.data);
            buttonsMenu = objectDeepSearch.findFirst(achievementsMenu, {name: parentMenuName});
        }

        let chosenMenuButtons = processMenu(buttonsMenu).map(menuItem => {
            return bot.inlineButton(menuItem.title, {callback: `achievements_menu-${menuItem.name}`});
        });

        if (_.isEmpty(chosenMenuButtons)) {
            chosenMenuButtons = processMenu(achievementsMenu).map(menuItem => {
                return bot.inlineButton(menuItem.title, {callback: `achievements_menu-${menuItem.name}`});
            });
        }

        let inlineReplyMarkup = bot.inlineKeyboard(_.chunk(chosenMenuButtons, 3));

        return bot.editMessageText({chatId, messageId}, chosenMenu.text, {
            parseMode: achievementsMenu.config.parseMode,
            replyMarkup: inlineReplyMarkup
        });
    } else if (showDungeonsKeyboardRegExp.test(msg.data)) {

        const handler =  _.throttle(() => {
            bot.answerCallbackQuery(msg.id);

            const submenuRegExp = /dungeons_menu-(.+)+/;
            const [, menu_route] = showDungeonsKeyboardRegExp.exec(msg.data);
            const chosenMenu = objectDeepSearch.findFirst(dungeonMenu, {name: menu_route});
            let buttonsMenu = chosenMenu;

            if(submenuRegExp.test(msg.data)) {
                const [, parentMenuName] = submenuRegExp.exec(msg.data);
                buttonsMenu = objectDeepSearch.findFirst(dungeonMenu, {name: parentMenuName});
            }

            let chosenMenuButtons = processMenu(buttonsMenu).map(menuItem => {
                return bot.inlineButton(menuItem.title, {callback: `dungeons_menu-${menuItem.name}`});
            });

            if (_.isEmpty(chosenMenuButtons)) {
                chosenMenuButtons = processMenu(dungeonMenu).map(menuItem => {
                    return bot.inlineButton(menuItem.title, {callback: `dungeons_menu-${menuItem.name}`});
                });
            }

            let inlineReplyMarkup = bot.inlineKeyboard(_.chunk(chosenMenuButtons, 2));

            return bot.editMessageText({chatId, messageId}, chosenMenu.text, {
                parseMode: dungeonMenu.config.parseMode,
                replyMarkup: inlineReplyMarkup
            });
        }, 2500);

        handler();
    } else if (msg.data === 'initialize_skill_upgrade') {
        const skillOMaticText = `
–í ¬´<b>üéì –°–∫–∏–ª–æ–∫–∞—á–∞—Ç–æ—Ä–µ</b>¬ª —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–∫–∞—á–∫—É —Ç–≤–æ–∏—Ö —Å–∫–∏–ª–æ–≤.`;

    findPip(msg, result => {
        bot.answerCallbackQuery(msg.id);
        if(result.ok && result.reason === 'USER_FOUND') {
            if(sessions[msg.from.id] === undefined) {
                createSession(msg.from.id);
            }

            sessions[msg.from.id].pip = result.data.pip;
            sessions[msg.from.id].state = states.WAIT_FOR_SKILL;

            const replyMarkup = bot.keyboard([
                [buttons.skillSelectStrength.label, buttons.skillSelectAccuracy.label, buttons.skillSelectAgility.label],
                [buttons.skillSelectHealth.label, buttons.skillSelectCharisma.label],
                [buttons.cancelAction.label]
            ], {
                resize: true
            });

            const skillMap = {
                "health": "‚ù§ –ñ–∏–≤—É—á–µ—Å—Ç—å",
                "strength": "üí™ –°–∏–ª–∞",
                "precision": "üî´ –ú–µ—Ç–∫–æ—Å—Ç—å",
                "charisma": "üó£ –•–∞—Ä–∏–∑–º–∞",
                "agility": "ü§∏‚Äç‚ôÄÔ∏è –õ–æ–≤–∫–æ—Å—Ç—å"
            };

            const userSkills = Object.keys(skillMap).map(key => {
                const skillName = skillMap[key];

                return `<b>${skillName}</b>: ${result.data.pip[key]}`;
            })

            return bot.sendMessage(msg.from.id, `
${skillOMaticText}

–í–æ—Ç —á—Ç–æ —è –∑–Ω–∞—é –ø—Ä–æ —Ç–≤–æ–∏ —Å–∫–∏–ª—ã:
${userSkills.join('\n')}
<i>(–ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∞–∫—É—Ç–∞–ª—å–Ω—ã–µ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –ø–∏–ø-–±–æ–π)</i>


<b>–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–π —Å–∫–∏–ª —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–∫–∞—á–∞—Ç—å</b>

–ß—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <code>[‚Ü©Ô∏è–ù–∞–∑–∞–¥]</code>.
–õ–∏–±–æ, –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–ø–∏—à–∏ /cancel.
            `, {
                replyMarkup,
                parseMode: 'html'
            });
        }

        return bot.sendMessage(msg.from.id, `
${skillOMaticText}

–û—É, –ø–æ—Ö–æ–∂–µ —è –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é –ø—Ä–æ —Ç–≤–æ–π –ø–∏–ø :—Å
–ü–µ—Ä–µ–π–¥–∏ –≤ –∏–≥—Ä—É –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É –∏ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –µ–≥–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!
        `, {
            replyMarkup: toGameKeyboard,
            parseMode: 'html'
        });
    });
    }
});



bot.start();