require('dotenv').config();
const mongoose = require ('mongoose');
const _ = require('underscore');
const TeleBot = require('telebot');
const program = require('commander');
const moment = require('moment');



const beastSchema = require('./src/schemes/beast');
const locationSchema = require('./src/schemes/location');

var uristring = process.env.MONGODB_URI;

const Beast = mongoose.model('Beast', beastSchema);
const Location = mongoose.model('Location', locationSchema);

mongoose.connect(uristring);


const parsePip = require('./src/parsers/parsePip');
const beastParser = require('./src/parsers/parseBeast');
const parseLocation = require('./src/parsers/parseLocation');
const parseFleeDefeat = require('./src/parsers/parseFleeDefeat');
const parseDeathMessage = require('./src/parsers/parseDeathMessage');
const parseBeastFaced = require('./src/parsers/parseBeastFaced');


const calculateUpgrade = require('./src/calculateUpgrade');

const upgradeAmountValidation = require('./src/utils/upgradeAmountValidation');

const {
    matcher,
    regExpSetMatcher
} = require('./src/utils/matcher');
const regexps = require('./src/regexp/regexp');

const config = require('./package.json');

program
    .version('0.1.0')
    .option('-D, --dev', 'Running bot with test token')
    .option('-P, --prod', 'Running bot with produciton token')
    .parse(process.argv);

const sessions = {};

const WAIT_FOR_SKILL = 'WAIT_FOR_SKILL';
const WAIT_FOR_DISTANCE = 'WAIT_FOR_DISTANCE';
const WAIT_FOR_LEVELS = 'WAIT_FOR_LEVELS';
const WAIT_FOR_RESPONSE = 'WAIT_FOR_RESPONSE';
const WAIT_FOR_FORWARD_END = 'WAIT_FOR_FORWARD_END';
const WAIT_FOR_START = 'WAIT_FOR_START';

const states = {
    WAIT_FOR_SKILL,
    WAIT_FOR_DISTANCE,
    WAIT_FOR_LEVELS,
    WAIT_FOR_RESPONSE,
    WAIT_FOR_START,
    WAIT_FOR_FORWARD_END
};

const sessionAbort = (msg) => {
    const replyMarkup = bot.keyboard([
        [buttons.sessionAbortYes.label, buttons.sessionAbortNo.label]
    ], {
        resize: true
    });

    return bot.sendMessage(msg.from.id, '–¢—ã —Ö–æ—á–µ—à—å –æ–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ –ø–∏–ø-–±–æ—è ?', {
        replyMarkup
    });
}

const askAmountOfLevels = (msg) => {
    const replyMarkup = bot.keyboard([
        [
            buttons.amountOfLevelsTen.label,
            buttons.amountOfLevelsTwenty.label,
            buttons.amountOfLevelsThirty.label
        ],
        [
            buttons.amountOfLevelsFourty.label,
            buttons.amountOfLevelsFifty.label,
            buttons.amountOfLevelsSixty.label
        ],
        [
            buttons.amountOfLevelsMAX.label
        ]
    ], {
        resize: true
    });

    return bot.sendMessage(msg.from.id, `
–í—ã–±–µ—Ä–∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–∫–∞—á–∞—Ç—å *${sessions[msg.from.id].upgradeSkill}*
\`–õ–∏–±–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 17)\`
`, {
        replyMarkup,
        parseMode: 'markdown'
    });
};

const journeyForwardEndKeyboard = (msg) => {
    const replyMarkup = bot.keyboard([
        [
            buttons['journeyForwardEnd'].label
        ]
    ], {
        resize: true
    });

    if (sessions[msg.from.id] === undefined) {
        seedSession(msg.from.id);
    }

    sessions[msg.from.id].state = states.WAIT_FOR_START;

    return bot.sendMessage(msg.from.id, `

    `, {
        replyMarkup,
        parseMode: 'markdown'
    });
}

const askReachableKm = (msg) => {
    const replyMarkup = bot.keyboard([
        [
            buttons['reachableKm20'].label,
            buttons['reachableKm30'].label,
            buttons['reachableKm40'].label
        ],
        [

            buttons['reachableKm50'].label,
            buttons['reachableKm60'].label,
            buttons['reachableKm70'].label
        ]
    ], {
        resize: true
    });

    return bot.sendMessage(msg.from.id, "–í—ã–±–µ—Ä–∏ –¥–æ –∫–∞–∫–æ–≥–æ –∫–∏–ª–æ–º–µ—Ç—Ä–∞ —Ç—ã —Ö–æ–¥–∏—à—å (–ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞–≤–∞—è—Å—å –≤ –∂–∏–≤–∏—Ö)?\n"+
"`–õ–∏–±–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 28)`", {
        replyMarkup,
        parseMode: 'markdown'
    });
}

const getEffort = (msg, bot) => {
    if (sessions[msg.from.id].state == states.WAIT_FOR_START) {
        return false;
    }

    sessions[msg.from.id].state = states.WAIT_FOR_RESPONSE;

    sessions[msg.from.id].amountToUpgrade = msg.text;

    const effort = calculateUpgrade(sessions[msg.from.id]);

    bot.sendMessage(msg.from.id, effort, {
        replyMarkup: defaultKeyboard,
        parseMode: 'markdown'
    });

    console.log(`
------------------------------------------
[REPLY]
User: ${sessions[msg.from.id].pip.name} | ${sessions[msg.from.id].pip.faction} | ${msg.from.username}
Reachable distance: ${sessions[msg.from.id].reachableKm}
Amout to upgrade: ${sessions[msg.from.id].amountToUpgrade}
`);

    sessions[msg.from.id].state = states.WAIT_FOR_START;
}

const seedSession = id => {
    sessions[id] = {
        pip: null,
        state: states.WAIT_FOR_START,
        data: []
    };
};

const buttons = {
    sessionAbortYes: {
        label: "–î–∞",
        command: "/resetSession"
    },
    sessionAbortNo: {
        label: "–ù–µ—Ç",
        command: "/resetSessionAbort"
    },
    skillSelectHealth: {
        label: "‚ù§ –ñ–∏–≤—É—á–µ—Å—Ç—å",
        command: "/levelUpHealth"
    },
    skillSelectStrength: {
        label: "üí™ –°–∏–ª–∞",
        command: "/levelUpStrength"
    },
    skillSelectAccuracy: {
        label: "üî´ –ú–µ—Ç–∫–æ—Å—Ç—å",
        command: "/levelUpAccuracy"
    },
    skillSelectCharisma: {
        label: "üó£ –•–∞—Ä–∏–∑–º–∞",
        command: "/levelUpCharisma"
    },
    skillSelectAgility: {
        label: "ü§∏‚Äç‚ôÄÔ∏è –õ–æ–≤–∫–æ—Å—Ç—å",
        command: "/levelUpAgility"
    },
    amountOfLevelsTen: {
        label: "+10",
        command: "/upgradeSkill"
    },
    amountOfLevelsTwenty: {
        label: "+20",
        command: "/upgradeSkill"
    },
    amountOfLevelsThirty: {
        label: "+20",
        command: "/upgradeSkill"
    },
    amountOfLevelsFourty: {
        label: "+40",
        command: "/upgradeSkill"
    },
    amountOfLevelsFifty: {
        label: "+50",
        command: "/upgradeSkill"
    },
    amountOfLevelsSixty: {
        label: "+60",
        command: "/upgradeSkill"
    },
    amountOfLevelsMAX: {
        label: "–ú–ê–ö–°–ò–ú–ê–õ–û–ß–ö–ê",
        command: "/upgradeSkill"
    },
    reachableKm20: {
        label: "20–∫–º",
        command: "/reachableKm"
    },
    reachableKm30: {
        label: "30–∫–º",
        command: "/reachableKm"
    },
    reachableKm40: {
        label: "40–∫–º",
        command: "/reachableKm"
    },
    reachableKm50: {
        label: "50–∫–º",
        command: "/reachableKm"
    },
    reachableKm60: {
        label: "60–∫–º",
        command: "/reachableKm"
    },
    reachableKm70: {
        label: "70+ –∫–º",
        command: "/reachableKm"
    },
    journeyForwardStart: {
        label: "–°–∫–∏–Ω—É—Ç—å –ª–æ–≥ üèÉ",
        command: "/journeyforwardstart"
    },
    journeyForwardEnd: {
        label: "–°—Ç–æ–ø üôÖ‚Äç‚ôÇÔ∏è",
        command: "/journeyforwardend"
    }
};

const getToken = () => {
    if (program.dev) {
        console.log('RUNNING IN TEST MODE');
        return process.env.BOT_TOKEN_TEST;
    } else if (program.prod) {
        console.log('RUNNING IN PRODUCTION MODE');
        return process.env.BOT_TOKEN;
    }

    throw new Error('Please, specify bot token mode "--dev" for development and "--prod" production');
};

const levelsToMax = (pip, skillToUpgrade, cap) => {
    const skillMap = {
        "‚ù§ –ñ–∏–≤—É—á–µ—Å—Ç—å": "health",
        "üí™ –°–∏–ª–∞": "strength",
        "üî´ –ú–µ—Ç–∫–æ—Å—Ç—å": "precision",
        "üó£ –•–∞—Ä–∏–∑–º–∞": "charisma",
        "ü§∏‚Äç‚ôÄÔ∏è –õ–æ–≤–∫–æ—Å—Ç—å": "agility"
    };

    const currentSkillLevel = pip[skillMap[skillToUpgrade]];
    const amountToUpgrade = cap - currentSkillLevel;

    return amountToUpgrade;
}

const bot = new TeleBot({
    token: getToken(),
    usePlugins: ['namedButtons'],
    polling: {
        interval: 100, // How often check updates (in ms).
        limit: 500, // Limits the number of updates to be retrieved.
        retryTimeout: 1000 // Reconne   cting timeout (in ms).
    },
    pluginConfig: {
        namedButtons: {
            buttons
        }
    }
});

const defaultKeyboard = bot.keyboard([
    [
        buttons['journeyForwardStart'].label
    ]
], {
    resize: true
});

bot.on('/start', (msg) => {
    if (sessions[msg.from.id] === undefined) {
        seedSession(msg.from.id);
    };

    return bot.sendMessage(
        msg.from.id,
        `
–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç ¬´–°–∫–∏–ª–æ–∫–∞—á–∞—Ç–æ—Ä¬ª - —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∑–∞—Ö–æ–¥–æ–≤ –∏ –∫—Ä—ã—à–µ–∫ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ —Ç–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–æ–≤.

–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç—ã –ø–µ—Ä–µ—à–ª—ë—à –º–Ω–µ —Å–≤–æ–π *üìü–ü–∏–ø-–±–æ–π* —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫–æ–π –Ω–∞–≤—ã–∫ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–∫–∞—á–∞—Ç—å –∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π - –∏ —è —Å–¥–µ–ª–∞—é –≤—Å—é –≥—Ä—è–∑–Ω—É—é —Ä–∞–±–æ—Ç—É/–º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∑–∞ —Ç–µ–±—è.

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∫–∞–∫ ¬´—Ç–æ–ª—å–∫–æ —Ç–∞–∫ —Å—Ä–∞–∑—É¬ª‚Ñ¢ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö - –º–∏–ª–æ—Å—Ç–∏ –ø—Ä–æ—à—É –Ω–∞ –∫–∞–Ω–∞–ª https://t.me/wwCharismaCalculator

–ï—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∫—Ä—É—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ - –∑–∞–ª–µ—Ç–∞–π –≤ —É—é—Ç–Ω—ã–π(–Ω–µ –æ—á–µ–Ω—å) —á–∞—Ç https://t.me/wwCharismaCalculatorChat

_–£—á—Ç–∏, —á—Ç–æ —è –µ—â—ë –Ω–∞—Ö–æ–∂—É—Å—å –≤ –±–µ—Ç–∞-—Ä–µ–∂–∏–º–µ, –∏ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Ç–∫–Ω—É—Ç—å—Å—è –Ω–∞ –±–æ–ª—å—à–∏–µ –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –±–∞–≥–∏.
–ù–æ, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π - –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ—Ñ–∏–∫—à–µ–Ω—ã_
        `
        , {
            replyMarkup: defaultKeyboard,
            parseMode: 'markdown',
            webPreview: false
        }
    );
});

/* bot.on('/resetSession', (msg) => {
    sessions[msg.from.id] = {
        pip: null,
        state: null
    };

    bot.sendMessage(
        msg.from.id, '–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã - –º–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å —Å–≤–æ–π –ø–∏–ø-–±–æ–π —Å–Ω–æ–≤–∞.', {
            replyMarkup: 'hide'
        }
    );
});

bot.on('/resetSessionAbort', (msg) => {
    bot.sendMessage(
        msg.from.id, 'C–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω—ë–Ω.', {
            replyMarkup: 'hide'
        }
    );
}); */

bot.on('forward', (msg) => {
    if (sessions[msg.from.id] === undefined) {
        seedSession(msg.from.id);
    }



    // if(sessions[msg.from.id].state === states.WAIT_FOR_FORWARD_END) {
        let data;
        let dataType;
        const isLocation = regExpSetMatcher(msg.text, {
            regexpSet: regexps.location
        });

        const isRegularBeast = regExpSetMatcher(msg.text, {
            regexpSet: regexps.regularBeast
        });

        const isDungeonBeast = regExpSetMatcher(msg.text, {
            regexpSet: regexps.dungeonBeast
        });

        const isFleeDefeat = regExpSetMatcher(msg.text, {
            regexpSet: regexps.fleeDefeat
        });

        const isDeathMessage = regExpSetMatcher(msg.text, {
            regexpSet: regexps.deathMessage
        });

        const isDungeonBeastFaced = regExpSetMatcher(msg.text, {
            regexpSet: regexps.dungeonBeastFaced
        });

        const pip = parsePip(msg);

        if (isDungeonBeastFaced) {
            data = parseBeastFaced.parseDungeonBeastFaced(msg.text);
            dataType = 'dungeonBeastFaced';
        } else if (isFleeDefeat) {
            data = parseFleeDefeat(msg.text);
            dataType = 'fleeDefeat';
        } else if (isDeathMessage) {
            data = parseDeathMessage(msg.text);
            dataType = 'deathMessage';
        } else if (isDungeonBeast) {
            data = beastParser.parseDungeonBeast(msg.text);
            dataType = 'dungeonBeast';
        } else if (isRegularBeast) {
            data = beastParser.parseRegularBeast(msg.text);
            dataType = 'regularBeast';
        } else if(isLocation) {
            data = parseLocation(msg.text);
            dataType = 'location';
        } else if(_.isObject(pip)) {
            data = pip;
            dataType = 'pipboy';
        }



        if (isDungeonBeast || isRegularBeast || isLocation || isFleeDefeat || isDeathMessage || parseBeastFaced) {
            sessions[msg.from.id].data.push({
                data,
                dataType,
                date: msg.forward_date
            });
        }

        // return msg.reply.text('false', {asReply: true});
    // } else {


        /* const pip = parsePip(msg);

        if (typeof pip === 'object') {
            sessions[msg.from.id].pip = pip;
            sessions[msg.from.id].state = states.WAIT_FOR_SKILL;

            const replyMarkup = bot.keyboard([
                [buttons.skillSelectStrength.label, buttons.skillSelectAccuracy.label, buttons.skillSelectAgility.label],
                [buttons.skillSelectHealth.label, buttons.skillSelectCharisma.label]
            ], {
                resize: true
            });

            return bot.sendMessage(msg.from.id, '–ß—Ç–æ –∫–∞—á–∞—Ç—å –±—É–¥–µ—à—å?', {
                replyMarkup
            });
        }
        return msg.reply.text('–§–æ—Ä–≤–∞—Ä–¥–Ω–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–∏–ø');
    }*/

});

bot.on([
    '/levelUpHealth',
    '/levelUpStrength',
    '/levelUpAccuracy',
    '/levelUpCharisma',
    '/levelUpAgility'
], msg => {
    sessions[msg.from.id].upgradeSkill = msg.text;
    sessions[msg.from.id].state = states.WAIT_FOR_DISTANCE;

    askReachableKm(msg);
});

bot.on('/reachableKm', msg => {
    sessions[msg.from.id].reachableKm = msg.text;
    sessions[msg.from.id].state = states.WAIT_FOR_LEVELS;

    askAmountOfLevels(msg);
});

bot.on('/locs_text', msg => {
    return msg.reply.text(`
8–∫–º - –ë–µ–∑—É–º–Ω—ã–π —Å—Ç–∞—Ä–∏–∫
11–∫–º - ‚õì–°—Ç–∞—Ä–∞—è —à–∞—Ö—Ç–∞
13–∫–º -‚ö°Ô∏è–ö—É–ø–æ–ª –ì—Ä–æ–º–∞
15–∫–º - üõ§–û—Ä–µ–æ–ª
19–∫–º - ‚ö†Ô∏è–ü–µ—â–µ—Ä–∞ –û—Ä–µ–æ–ª–∞
23–∫–º - üöΩ–°—Ç–æ—á–Ω–∞—è —Ç—Ä—É–±–∞
27–∫–º - üèÉüèø–ë–µ–ª–æ–µ –≥–µ—Ç—Ç–æ
29–∫–º -‚öôÔ∏è–û—Ç–∫—Ä—ã—Ç–æ–µ –£–±–µ–∂–∏—â–µ
30–∫–º - üïé –Ø–¥—Ä–æ
34–∫–º - ü¶á–ë—ç—Ç-–ø–µ—â–µ—Ä–∞
39–∫–º - ü¶Ü–ü–µ—Ä–µ–≤–∞–ª –£—Ç–∫–∏–Ω–∞
43–∫–º - üö™–£—é—Ç–Ω—ã–π –ø–æ–¥–≤–∞–ª—å—á–∏–∫
45–∫–º - üåÅ–í—ã—Å–æ–∫–∏–π –•—Ä–æ—Ç–≥–∞—Ä
50–∫–º - üî¥–†—É–∏–Ω—ã –ì–µ–∫—Å–∞–≥–æ–Ω–∞
51–∫–º - üõè–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–∏–≤–∞–ª
56–∫–º - üî¨–ù–∞—É—á–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
69–∫–º - ‚õ©–•—Ä–∞–º –ú—É–¥—Ä–æ—Å—Ç–∏
74–∫–º - –ß—ë—Ä–Ω–∞—è –ú–µ–∑–∞

–ò–Ω—Ñ–æ –≤–∑—è—Ç–∞ –∏–∑ @trust_42 - https://t.me/trust_42/61
    `, {
        webPreview: false
    });
});

bot.on('/raids_text', msg => {
    return msg.reply.text(`
üì¶5 - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã (–°—Ç–∞—Ä–∞—è —Ñ–∞–±—Ä–∏–∫–∞)
üï≥9 - –ö—Ä—ã—à–∫–∏ (–ó–∞–≤–æ–¥ "–Ø–¥–µ—Ä-–ö–æ–ª–∞")
üíä12 - –í–µ—â–µ—Å—Ç–≤–∞ (–¢—é—Ä—å–º–∞)
üçó16 - –ï–¥–∞ (–°–∫–ª–∞–¥—ã)
üîπ20 - –ö–≤–∞—Ä—Ü (–î–∞—Ç–∞—Ü–µ–Ω—Ç—Ä)
‚ù§Ô∏è24 - –õ–µ—á–µ–Ω–∏–µ (–ì–æ—Å–ø–∏—Ç–∞–ª—å)
üí°28 - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã (–ó–∞–≤–æ–¥ "–≠–ª–µ–∫—Ç—Ä–æ–Ω")
üíæ32 - –ú–∏–∫—Ä–æ—á–∏–ø—ã (–û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ)
üî©38 - –ò—Ä–∏–¥–∏–π (–ò—Ä–∏–¥–∏–µ–≤—ã–µ —à–∞—Ö—Ç—ã)
üîó46 - –ö—É–±–æ–Ω–∏—Ç (–°–∫–ª–∞–¥ –º–µ—Ç–∞–ª–ª–∞)

–ò–Ω—Ñ–æ –≤–∑—è—Ç–∞ –∏–∑ @trust_42 - https://t.me/trust_42/57
    `, {
        webPreview: false
    });
});

bot.on('/upgradeSkill', msg => {
    if(msg.text === '–ú–ê–ö–°–ò–ú–ê–õ–û–ß–ö–ê') {
        const pip = sessions[msg.from.id].pip;
        const skillToUpgrade = sessions[msg.from.id].upgradeSkill;

        const newText = levelsToMax(pip, skillToUpgrade, 1200);
        msg.text = newText;

        getEffort(msg, bot);
    }

    getEffort(msg, bot);
});

bot.on('/journeyforwardstart', msg => {
    if (sessions[msg.from.id] === undefined) {
        seedSession(msg.from.id);
    }

    sessions[msg.from.id].state = states.WAIT_FOR_FORWARD_END;
    const replyMarkup = bot.keyboard([
        [
            buttons['journeyForwardEnd'].label
        ]
    ], {
        resize: true
    });

    msg.reply.text(`
–•–µ–π, –≤–∏–∂—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π —Ü–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –ø—É—Å—Ç–æ—à–∏ - –æ—Ç–ª–∏—á–Ω–æ!
–ù—É —á—Ç–æ –∂–µ –∫–∏–¥–∞–π –µ—ë —Å—é–¥–∞. 

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–±–µ–¥–∏—Å—å —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω—ã - –¢–µ–ª–µ–≥—Ä–∞–º –º–æ–∂–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∏—Ç–æ—Ä–º–æ–∑–∏—Ç—å.
–ù—É –∞ –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å - —Å–º–µ–ª–æ –∂–º–∏ –∫–Ω–æ–ø–∫—É [\`–°—Ç–æ–ø üôÖ‚Äç‚ôÇÔ∏è\`]!
    `, {
        replyMarkup
    })
});

bot.on('/journeyforwardend', msg => {
    sessions[msg.from.id].state = states.WAIT_FOR_START;

    msg.reply.text(`–ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Ä–µ–∂–∏–º –æ–±—Ä–æ–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–¥–æ–∂–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ–º–Ω–æ–≥–æ :3`, {
        replyMarkup: 'hide'
    });

    console.log(JSON.stringify(sessions[msg.from.id].data));

    setTimeout(() => {
        msg.reply.text(`
–§—É—Ö, —è —Å–æ –≤—Å—ë–º —Å–ø—Ä–∞–≤–∏–ª—Å—è - —Å–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω–æ–µ –∑–∞ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!
–¢–µ–ø–µ—Ä—å —Ç—ã –æ–ø—è—Ç—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —Å–∫–∏–ª–æ–∫–∞—á–∞—Ç–æ—Ä, –ª–∏–±–æ –µ—Å–ª–∏ —Ç—ã —á–µ–≥–æ-—Ç–æ –∑–∞–±—ã–ª –¥–æ–∫–∏–Ω—É—Ç—å - —Å–º–µ–ª–æ –∂–º–∏ –Ω–∞ \`[–°–∫–∏–Ω—É—Ç—å –ª–æ–≥ üèÉ]\`
–Ø –Ω–∞—Å—á–∏—Ç–∞–ª ${sessions[msg.from.id].data.length} –¥–∞–Ω–Ω—ã—Ö!
`, {
            replyMarkup: defaultKeyboard,
            parseMode: 'markdown'
        });
    }, 1500)
});

bot.on('/version', msg => msg.reply.text(config.version))

bot.on('/debug', msg => {
    return bot.sendMessage(msg.from.id, '123');
})

bot.on(/^\d+$/, msg => {
    switch (sessions[msg.from.id].state) {
        case states.WAIT_FOR_DISTANCE:
            const reachableKm = Number(msg.text);

            if(reachableKm > 100) {
                msg.reply.text('–ë–ª—è, –Ω—É –Ω–µ –≥–æ–Ω–∏ - –¥–∞–≤–∞–π —á—É—Ç—å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–µ–π, –æ–∫–µ–π ?)')
            } else if (reachableKm <= 100) {
                sessions[msg.from.id].reachableKm = reachableKm;
                sessions[msg.from.id].state = states.WAIT_FOR_LEVELS;

                askAmountOfLevels(msg);
            }

            break;
        case states.WAIT_FOR_LEVELS:
            const upgradeAmount = Number(msg.text);
            const pip = sessions[msg.from.id].pip;
            const skillToUpgrade = sessions[msg.from.id].upgradeSkill;

            if (upgradeAmountValidation(pip, skillToUpgrade, upgradeAmount, 1060)) {
                getEffort(msg, bot);
            } else {
                msg.reply.text('–ß—ë—Ç–æ –¥–æ—Ö—É—è –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π —á–∏—Å–ª–æ –ø–æ–º–µ–Ω—å—à–µ.')
            }

            break;
    }
});

bot.start();