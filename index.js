// TODO: Supply it with pip from database (with appropriate validation just like from the processForwards)

process.on('unhandledRejection', (reason) => {
  console.log('Unhandled Rejection at:', reason.stack || reason);
});

require('dotenv').config();

const uristring = process.env.MONGODB_URI;
const DATA_THRESHOLD = Number(process.env.DATA_THRESHOLD);
const { VERSION } = process.env;

const async = require('async');
const mongoose = require('mongoose');
const _ = require('underscore');
const TeleBot = require('telebot');
const program = require('commander');
const moment = require('moment-timezone');
const objectDeepSearch = require('object-deep-search');

const config = require('./package.json');

const forwardPoints = require('./src/constants/forwardPoints');

const regexps = require('./src/regexp/regexp');
const PipRegexps = require('./src/regexp/pip');

const beastSchema = require('./src/schemes/beast');
const locationSchema = require('./src/schemes/location');
const giantScheme = require('./src/schemes/giant');
const userSchema = require('./src/schemes/user');
const journeySchema = require('./src/schemes/journey');

const chartGeneration = require('./src/utils/chartGeneration');

const parsePip = require('./src/parsers/parsePip');
const beastParser = require('./src/parsers/parseBeast');
const parseLocation = require('./src/parsers/parseLocation');
const parseFlee = require('./src/parsers/parseFlee');
const parseDeathMessage = require('./src/parsers/parseDeathMessage');
const parseBeastFaced = require('./src/parsers/parseBeastFaced');
const parseGiantFaced = require('./src/parsers/parseGiantFaced');
const parseGiant = require('./src/parsers/parseGiant');
const parseGiantOnField = require('./src/parsers/parseGiantOnField');

const {
  regExpSetMatcher,
} = require('./src/utils/matcher');
const calculateUpgrade = require('./src/calculateUpgrade');
const upgradeAmountValidation = require('./src/utils/upgradeAmountValidation');
const processForwards = require('./src/utils/processForwards');
const { ranges, dzRanges } = require('./src/utils/getRanges');
const processMenu = require('./src/utils/processMenu');
const validateForwardDate = require('./src/utils/validateForwardDate');
const comparePips = require('./src/utils/comparePips');

const routedBeastView = require('./src/views/routedBeastView');
const routedBattleView = require('./src/views/routedBattleView');

const equipmentMenu = require('./src/staticMenus/equipmentMenu');
const locationsMenu = require('./src/staticMenus/locationsMenu');
const suppliesMenu = require('./src/staticMenus/suppliesMenu');
const achievementsMenu = require('./src/staticMenus/achievementsMenu');
const dungeonMenu = require('./src/staticMenus/dungeonMenu');

const buttons = require('./src/ui/buttons');
const {
  commandsForLag,
} = require('./src/strings/strings');
const withBackButton = require('./src/utils/withBackButton');

const UserManager = require('./src/database/userManager');

const signedBeasts = require('./src/database/beasts_signed.json');

mongoose.connect(uristring);

const Beast = mongoose.model('Beast', beastSchema);
const Giant = mongoose.model('Giant', giantScheme);
const Location = mongoose.model('Location', locationSchema);
const User = mongoose.model('User', userSchema);
const Journey = mongoose.model('Journey', journeySchema);

const userManager = UserManager(User);

program
  .version('0.1.0')
  .option('-D, --dev', 'Running bot with test token')
  .option('-P, --prod', 'Running bot with produciton token')
  .parse(process.argv);

const sessions = {};

const WAIT_FOR_SKILL = 'WAIT_FOR_SKILL';
const WAIT_FOR_DISTANCE = 'WAIT_FOR_DISTANCE';
const WAIT_FOR_LEVELS = 'WAIT_FOR_LEVELS';
const WAIT_FOR_RESPONSE = 'WAIT_FOR_RESPONSE';
const WAIT_FOR_FORWARD_END = 'WAIT_FOR_FORWARD_END';
const WAIT_FOR_START = 'WAIT_FOR_START';
const WAIT_FOR_PIP_FORWARD = 'WAIT_FOR_PIP_FORWARD';
const WAIT_FOR_DATA_VALIDATION = 'WAIT_FOR_DATA_VALIDATION';
const WAIT_FOR_DATA_TO_PROCESS = 'WAIT_FOR_DATA_TO_PROCESS';

const states = {
  WAIT_FOR_SKILL,
  WAIT_FOR_DISTANCE,
  WAIT_FOR_LEVELS,
  WAIT_FOR_RESPONSE,
  WAIT_FOR_START,
  WAIT_FOR_FORWARD_END,
  WAIT_FOR_PIP_FORWARD,
  WAIT_FOR_DATA_VALIDATION,
  WAIT_FOR_DATA_TO_PROCESS,
};

const createSession = (id) => {
  sessions[id] = {
    pip: null,
    state: states.WAIT_FOR_START,
    data: [],
    processDataConfig: {
      usePip: true,
      useBeastFace: true,
      silent: false,
    },
    beastsToValidate: [],
    initialForwardDate: null,
    lastForwardDate: null,
    firstForwardDate: null,
  };
};

const getToken = () => {
  if (program.dev) {
    console.log('RUNNING IN TEST MODE');
    return process.env.BOT_TOKEN_TEST;
  } if (program.prod) {
    console.log('RUNNING IN PRODUCTION MODE');
    return process.env.BOT_TOKEN;
  }

  throw new Error('Please, specify bot token mode "--dev" for development and "--prod" production');
};

const getUrl = () => {
  process.env.ENV === 'PRODUCTION' ? process.env.URL_PRODUCTION : process.env.URL_STAGING;

  if (process.env.ENV === 'PRODUCTION') {
    return process.env.URL_PRODUCTION;
  } if (process.env.ENV === 'STAGING') {
    return process.env.URL_STAGING;
  }

  throw new Error('Please, specify bot token mode "--dev" for development and "--prod" production');
};

let bot;

if (process.env.ENV === 'LOCAL') {
  bot = new TeleBot({
    token: getToken(),
    usePlugins: ['namedButtons'],
    polling: {
      interval: 1, // How often check updates (in ms).
    },
    pluginConfig: {
      namedButtons: {
        buttons,
      },
    },
  });
} else {
  const token = getToken();
  const host = '0.0.0.0';
  const port = process.env.PORT;
  const url = getUrl();

  bot = new TeleBot({
    token,
    usePlugins: ['namedButtons'],
    webhook: { url, host, port },
    pluginConfig: {
      namedButtons: {
        buttons,
      },
    },
  });
}

const updateOrCreate = (msg, pip, cb = (() => {})) => {
  const telegramData = {
    first_name: msg.from.first_name,
    id: msg.from.id,
    username: msg.from.username,
  };

  const pipData = { ...pip, timeStamp: pip.date };

  userManager.findByTelegramId(msg.from.id).then((result) => {
    if (result.ok === false && result.reason === 'USER_NOT_FOUND') {
      userManager.create({ telegramData, pipData }).then((createResult) => {
        cb(createResult);
      });
    } else if (result.ok === true && result.reason === 'USER_FOUND') {
      userManager.update({ telegramData, pipData }).then((updateResult) => {
        cb(updateResult);
      });
    }
  });
};

const findPip = (msg, cb) => {
  userManager.findByTelegramId(msg.from.id).then((result) => {
    cb(result);
  });
};

const askAmountOfLevels = (msg) => {
  const replyMarkup = bot.keyboard([
    [
      buttons.amountOfLevelsTen.label,
      buttons.amountOfLevelsTwenty.label,
      buttons.amountOfLevelsThirty.label,
    ],
    [
      buttons.amountOfLevelsFourty.label,
      buttons.amountOfLevelsFifty.label,
      buttons.amountOfLevelsSixty.label,
    ],
    [
      buttons.amountOfLevelsMAX.label,
    ],
  ], {
    resize: true,
  });

  return msg.reply.text(`
–í—ã–±–µ—Ä–∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–∫–∞—á–∞—Ç—å *${sessions[msg.from.id].upgradeSkill}*
\`–õ–∏–±–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 17)\`
`, {
    replyMarkup,
    parseMode: 'markdown',
  });
};

const askReachableKm = (msg) => {
  const replyMarkup = bot.keyboard([
    [
      buttons.reachableKm20.label,
      buttons.reachableKm30.label,
      buttons.reachableKm40.label,
    ],
    [

      buttons.reachableKm56.label,
      buttons.reachableKm60.label,
      buttons.reachableKm78.label,
    ],
    [
      buttons.reachableKm85.label,
      buttons.reachableKm95.label,
      buttons.reachableKm100.label,
    ],
  ], {
    resize: true,
  });

  return bot.sendMessage(msg.from.id, '–í—ã–±–µ—Ä–∏ –¥–æ –∫–∞–∫–æ–≥–æ –∫–∏–ª–æ–º–µ—Ç—Ä–∞ —Ç—ã —Ö–æ–¥–∏—à—å (–ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞–≤–∞—è—Å—å –≤ –∂–∏–≤—ã—Ö)?\n'
        + '`–õ–∏–±–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 28)`', {
    replyMarkup,
    parseMode: 'markdown',
  });
};


const defaultKeyboard = bot.keyboard([
  [
    buttons.journeyForwardStart.label,
    buttons.skillUpgrade.label,
    buttons.showEncyclopedia.label,
  ],
  [
    buttons.showRegularBeasts.label,
    buttons.showDarkZoneBeasts.label,
    buttons.showGiants.label,
  ],
  [
    buttons.hallOfFame.label,
    buttons.showHelp.label,
  ],
], {
  resize: true,
});

const getEffort = (msg, toMax = false) => {
  if (sessions[msg.from.id].state === states.WAIT_FOR_START) {
    return false;
  }

  sessions[msg.from.id].state = states.WAIT_FOR_RESPONSE;

  sessions[msg.from.id].amountToUpgrade = toMax || msg.text;

  const effort = calculateUpgrade(sessions[msg.from.id], { toMax });
  const { pip } = sessions[msg.from.id];


  console.log(`[SKILL UPGRADE]: ${pip.faction} | ${pip.name} | ${msg.from.username}`);

  createSession(msg.from.id);

  return msg.reply.text(effort, {
    replyMarkup: defaultKeyboard,
    parseMode: 'markdown',
  });
};

const encyclopediaKeyboard = [
  [

    buttons.showEquipment.label,
    buttons.showSupplies.label,
    buttons.showDrones.label,
  ],
  [
    buttons.showDungeons.label,
    buttons.showLocations.label,
    buttons.showAchievments.label,
  ],
];

const toGameKeyboard = bot.inlineKeyboard([
  [
    bot.inlineButton('üìü –ü–µ—Ä–µ–π—Ç–∏ –≤ –∏–≥—Ä—É.', { url: 'https://t.me/WastelandWarsBot' }),
  ],
]);

const toSkillOMaticKeyboard = bot.inlineKeyboard([
  [
    bot.inlineButton('–ó–∞–ø—É—Å—Ç–∏—Ç—å "üéì–°–∫–∏–ª–æ–∫–∞—á–∞—Ç–æ—Ä"', { callback: 'initialize_skill_upgrade' }),
  ],
]);


const getBeastKeyboard = beastId => bot.inlineKeyboard([
  [
    bot.inlineButton('–ò–Ω—Ñ–æ', { callback: `show_beast_page_info-${beastId}` }),
    bot.inlineButton('–õ—É—Ç', { callback: `show_beast_page_loot-${beastId}` }),
    bot.inlineButton('–ë–æ–π', { callback: `show_beast_page_battles-${beastId}` }),
    bot.inlineButton('–û–≥–ª—É—à–µ–Ω–∏—è', { callback: `show_beast_page_concussions-${beastId}` }),
  ],
]);

bot.on(['/start', '/help'], async (msg) => {
  createSession(msg.from.id);

  return msg.reply.text(
    `
–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç ¬´<b>Wasteland Wars Assistant</b>¬ª, —è - —á—Ç–æ-—Ç–æ –Ω–∞–ø–æ–¥–æ–±–∏–µ "—É–º–Ω–æ–π" —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏.

‚¨¶ –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ —è –∑–Ω–∞—é –æ –º–æ–±–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª - —Å–∫–∏–Ω—å —Ñ–æ—Ä–≤–∞—Ä–¥ –≤—Å—Ç—Ä–µ—á–∏ —Å –Ω–∏–º.

<code>[üèÉ–°–∫–∏–Ω—É—Ç—å–õ–æ–≥]</code> - –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ "–õ–û–ì". –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–≥—Ä–æ–≤–æ–≥–æ –±–æ—Ç–∞. –¢–∞–∫–∂–µ —ç—Ç–æ—Ç —Ä–µ–∂–∏–º —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—à—å –±–æ—Ç—É –∫–æ–º–º–∞–Ω–¥—É <b>/go</b>

<code>[üéì–°–∫–∏–ª–æ–∫—á—Ç—Ä]</code> - –ó–∞–ø—É—Å–∫ ¬´<b>–°–∫–∏–ª–æ–∫–∞—á–∞—Ç–æ—Ä–∞</b>¬ª - –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤ –ø—Ä–æ–∫–∞—á–∫–µ —Ç–≤–æ–∏—Ö —Å–∫–∏–ª–æ–≤

<code>[üìî–≠–Ω—Ü–∏–∫–ª–ø–¥–∏—è]</code> - –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏—Ä–µ –ø—É—Å—Ç–æ—à–∏, –∏ —á—Ç–æ –≤ –Ω—ë–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å

<code>[üíÄ–ú–æ–±—ã]</code> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± <b>–æ–±—ã—á–Ω—ã—Ö</b> –º–æ–±–∞—Ö

<code>[üö∑–ú–æ–±—ã –¢–ó]</code> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–±–∞—Ö –∏–∑ <b>–¢—ë–º–Ω–æ–π –ó–æ–Ω—ã</b>

<code>[ü¶Ç–ì–∏–≥–∞–Ω—Ç—ã]</code> - –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–∏–≥–∞–Ω—Ç–æ–≤

<code>[üèÜ–ó–∞–ª –°–ª–∞–≤—ã]</code> - –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –≤—Å–µ–º —Ç–µ–º –∫—Ç–æ –∫–æ–≥–¥–∞-–ª–∏–±–æ –æ–∫–∞–∑–∞–ª–∞—Å—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ –±–æ—Ç–æ–º


–ö–ê–ù–ê–õ –° –ù–û–í–û–°–¢–Ø–ú–ò @wwAssistantBotNews
–ß–ê–¢ –ë–´–°–¢–†–û–ì–û –†–ï–ê–ì–ò–†–û–í–ê–ù–ò–Ø @wwAssistantChat

<i>–£—á—Ç–∏, —á—Ç–æ —è –µ—â—ë –Ω–∞—Ö–æ–∂—É—Å—å –≤ –±–µ—Ç–∞-—Ä–µ–∂–∏–º–µ, –∏ –∏–Ω–æ–≥–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Ç–∫–Ω—É—Ç—å—Å—è –Ω–∞ –±–æ–ª—å—à–∏–µ –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –±–∞–≥–∏.</i>
        `, {
      replyMarkup: defaultKeyboard,
      parseMode: 'html',
      webPreview: false,
    },
  );
});

const getBeastToValidateMessage = (beastsToValidate, beastRequest = false, firstTime = true, failing = false) => {
  const indexedBeasts = beastsToValidate.length > 10 ? _.first(_.sortBy(beastsToValidate, 'date'), 10) : _.sortBy(beastsToValidate, 'date');

  const isThereMoreBeasts = beastsToValidate.length > 10;

  const getHeader = () => {
    const failingMessage = '–¢—ã —Å–∫–∏–Ω—É–ª –º–Ω–µ –∫–∞–∫—É—é-—Ç–æ —Ö—É–π–Ω—é, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ:';
    const beastRequestFirstTime = '–°–ª—É—à–∞–π, —è –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —Å–ª—ã—à—É –ø—Ä–æ —ç—Ç–∏—Ö –º–æ–±–æ–≤, —Å–∫–∏–Ω—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Ö —Ñ–æ—Ä–≤–∞—Ä–¥—ã.';
    const beastRequestValidate = '–°–ª—É—à–∞–π, —É –º–µ–Ω—è —Ç—É—Ç –µ—Å—Ç—å –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–∏–∫–æ–≤ –ø–æ –ø–æ–≤–æ–¥—É –ø—Ä–∞–≤–¥–∏–≤–æ—Å—Ç–∏ —Ç–≤–æ–µ–π –∏–Ω—Ñ—ã - –¥–∞–≤–∞–π-–∫–∞ –∏—Ö –æ–±–∫–∞—à–ª—è–µ–º.';
    const success = '–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ';

    if (firstTime) {
      if (beastRequest) {
        return beastRequestFirstTime;
      }
      return beastRequestValidate;
    } if (failing) {
      return failingMessage;
    }

    return success;
  };

  const battlesToValidate = indexedBeasts.filter(({ reason }) => reason === 'battle')
    .map(({
      type,
      name,
      distance,
      date,
      isDungeon,
    }) => `‚Ä¢ ${distance}–∫–º - <b>${name}</b> –≤ ${type === 'DarkZone' ? 'üö∑–¢–ó' : 'üíÄ–ë–µ–∑–æ–ø–∞—Å–Ω–æ–π –ó–æ–Ω–µ'}${isDungeon ? ' –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ' : ''}\n<i>–ë–∏—Ç–≤–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ ${moment(date * 1000).add(3, 'hour').format('DD.MM.YYYY HH:mm')} (–ú–°–ö)</i>\n–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å: /ignore_${date}`);

  const fleesToValidate = indexedBeasts.filter(({ reason }) => reason === 'flee')
    .map(({
      type,
      distance,
      date,
    }) => `‚Ä¢ ${distance}–∫–º -–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–æ–± –≤ ${type === 'DarkZone' ? 'üö∑–¢–ó' : 'üíÄ–ë–µ–∑–æ–ø–∞—Å–Ω–æ–π –ó–æ–Ω–µ'}\n<i>–ü–æ–±–µ–≥ –ø—Ä–æ–∏–∑–æ—à–µ–ª –≤ ${moment(date * 1000).add(3, 'hour').format('DD.MM.YYYY HH:mm')} (–ú–°–ö)</i>\n–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å: /ignore_${date}`);

  return `${getHeader(beastRequest, firstTime, failing)}

${battlesToValidate.length > 0 ? '<b>[–ë–ò–¢–í–´]</b>' : ''}
${`${battlesToValidate.join('\n')}\n`}
${fleesToValidate.length > 0 ? '<b>[–ü–û–ë–ï–ì–ò]</b>' : ''}
${`${fleesToValidate.join('\n')}\n`}
${isThereMoreBeasts ? '<b>–¢–∞–º –µ—â—ë –µ—Å—Ç—å –º–æ–±—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–æ —Ç—ã —Å–Ω–∞—á–∞–ª–∞ —Å —ç—Ç–∏–º–∏ —Ä–∞–∑–±–µ—Ä–∏—Å—å</b>\n' : ''}
${firstTime ? `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∏–Ω—å <b>–û–¢–î–ï–õ–¨–ù–û</b> (–ø–æ –æ–¥–Ω–æ–º—É –∑–∞ —Ä–∞–∑) —Ñ–æ—Ä–≤–∞—Ä–¥ –≤—Å—Ç—Ä–µ—á–∏ —Å —ç—Ç–∏–º–∏ –∫—Ä–∞—Å–∞–≤—Ü–∞–º–∏, –æ–Ω–∏ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫:
<code>–í–æ –≤—Ä–µ–º—è –≤—ã–ª–∞–∑–∫–∏ –Ω–∞ —Ç–µ–±—è –Ω–∞–ø–∞–ª...</code>
<i>–∏–ª–∏</i>
<code>...–ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∏–ª —Ç–µ–±–µ –ø—É—Ç—å.</code>
<i>–∏–ª–∏</i>
<code>—É—Å—Ç—Ä–∞—à–∞—é—â–µ –Ω–∞—á–∞–ª –ø—Ä–∏–±–ª–∏–∂–∞—Ç—å—Å—è...</code>\n` : ''}
–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–º–∏ /skipbeastforwards
<i>–í–ù–ò–ú–ê–ù–ò–ï: –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ù–ê /skipbeastforwards - –ë–û–¢ –ü–†–û–ò–ì–ù–û–†–ò–†–£–ï–¢ –î–ê–ù–ù–´–ï, –ö–û–¢–û–†–´–ï –ó–ê–í–ò–°–Ø–¢ –û–¢ –£–ö–ê–ó–ê–ù–´–• –í–´–®–ï –§–û–†–í–ê–†–î–û–í, –ò –ù–ï –ó–ê–ü–ò–®–ï–¢ –ò–• –í –ë–ê–ó–£</i>`;
};

const actualActualProcessUserData = (msg, reportData, updatesData, options) => {
  if (process.env.ENV === 'STAGING' || process.env.ENV === 'LOCAL') {
    console.log('======= DATA PROCESSING =======');
    console.log(
      JSON.stringify({
        reportData,
        updatesData,
        options,
      }),
    );
  }

  if (reportData.lastPip !== null && reportData.lastPip !== undefined) {
    updateOrCreate(msg, reportData.lastPip);
  }

  if (options.useBeastFace && !_.isEmpty(reportData.beastsToValidate)) {
    sessions[msg.from.id].state = states.WAIT_FOR_DATA_VALIDATION;
    sessions[msg.from.id].initialForwardDate = reportData.initialForwardDate;
    sessions[msg.from.id].lastForwardDate = reportData.lastForwardDate;
    sessions[msg.from.id].firstForwardDate = reportData.firstForwardDate;
    sessions[msg.from.id].beastsToValidate = reportData.beastsToValidate;
    sessions[msg.from.id].beastRequest = false;

    return msg.reply.text(getBeastToValidateMessage(sessions[msg.from.id].beastsToValidate, sessions[msg.from.id].beastRequest), {
      parseMode: 'html',
      replyMarkup: 'hide',
    }).catch(e => console.log(e));
  }

  let userForwardPoints = 0;
  const beastsToValidate = [];
  let dataProcessed = 0;
  const dupes = {
    battles: 0,
    flees: 0,
  };

  /* console.log({
          reportData,
          updatesData,
          telegram: {
              id: msg.from.id,
              firstName: msg.from.first_name,
              userName: msg.from.username
          }
      }); */

  try {
    console.log(`[USAGE]: ${reportData.lastPip.faction} | ${reportData.lastPip.name} | ${msg.from.username}`);
  } catch (e) {
    // return false;
  }

  const isBeastUnderValidation = name => reportData.beastsToValidate.filter(beast => beast.name === name).length > 0;

  const signEntryWithVersion = entry => ({
    ...entry,
    version: VERSION,
    epoch: reportData.epoch,
  });

  const signSetWithVersion = (data) => {
    if (data) {
      return data.map(entry => ({
        ...entry,
        version: VERSION,
        epoch: reportData.epoch,
      }));
    }

    return [];
  };

  const createNewBeast = (beast) => {
    const {
      materialsReceived: unflattenedMaterialsReceived,
      capsReceived: unflattenedCapsReceived,
      ...rest
    } = beast;

    const {
      distanceRange,
      capsReceived,
      materialsReceived,
      battles,
      flees,
      concussions,
      ...flattenedBeast
    } = {
      materialsReceived: _.flatten(unflattenedMaterialsReceived),
      capsReceived: _.flatten(unflattenedCapsReceived),
      version: VERSION,
      ...rest,
    };

    return {
      distanceRange: signSetWithVersion(distanceRange),
      capsReceived: signSetWithVersion(capsReceived),
      materialsReceived: signSetWithVersion(materialsReceived),
      battles: signSetWithVersion(battles),
      flees: signSetWithVersion(flees),
      concussions: signSetWithVersion(concussions),
      ...flattenedBeast,
    };
  };

  const detectBeastForValidation = () => new Promise((resolve, reject) => {
    if (updatesData.beasts.length > 0) {
      async.forEach(updatesData.beasts, (iBeast, next) => {
        if (!options.useBeastFace) {
          next();
        } else if (iBeast.proofedByForward) {
          next();
        } else {
          const searchQuery = iBeast.subType ? {
            name: iBeast.name,
            isDungeon: iBeast.isDungeon,
            type: iBeast.type,
            subType: iBeast.subType,
          } : {
            name: iBeast.name,
            isDungeon: iBeast.isDungeon,
            type: iBeast.type,
          };

          Beast.findOne(searchQuery).then((fBeast) => {
            const databaseBeast = fBeast;
            if (databaseBeast === null) {
              iBeast.distanceRange.forEach(({ value }) => {
                beastsToValidate.push({
                  name: iBeast.name, distance: value, type: iBeast.type, isDungeon: iBeast.isDungeon, reason: 'battle', date: iBeast.date,
                });
              });
              next();
            } else {
              const actualRanges = databaseBeast.distanceRange
                .filter(({ version }) => version === VERSION)
                .map(({ value }) => value);

              iBeast.distanceRange.forEach(({ value }) => {
                if (!actualRanges.includes(value)) {
                  beastsToValidate.push({
                    name: iBeast.name, distance: value, type: iBeast.type, isDungeon: iBeast.isDungeon, reason: 'battle', date: iBeast.date,
                  });
                }
              });
              next();
            }
          });
        }
      }, () => {
        if (beastsToValidate.length > 0) {
          reject();
        } else {
          resolve();
        }
      });
    } else {
      resolve();
    }
  });

  const saveJourney = () => new Promise((resolve) => {
    const newJourney = new Journey({
      epoch: reportData.epoch,
      user: {
        id: msg.from.id,
        username: msg.from.username,
      },
      reportData,
      updatesData,
      session: sessions[msg.from.id],
    });

    newJourney.save().then(() => {
      resolve();
    });
  });

  const processBeasts = () => new Promise((resolve) => {
    if (updatesData.beasts.length > 0 && options.usePip === true) {
      async.forEach(updatesData.beasts, (iBeast, next) => {
        const searchQuery = iBeast.subType ? {
          name: iBeast.name,
          isDungeon: iBeast.isDungeon,
          type: iBeast.type,
          subType: iBeast.subType,
        } : {
          name: iBeast.name,
          isDungeon: iBeast.isDungeon,
          type: iBeast.type,
        };

        Beast.findOne(searchQuery).then((fBeast) => {
          const databaseBeast = fBeast;
          if (databaseBeast === null) {
            if (iBeast.proofedByForward) {
              const newBeast = new Beast(createNewBeast(iBeast));

              dataProcessed += 1;

              if (iBeast.type === 'DarkZone') {
                userForwardPoints += forwardPoints.newMob * forwardPoints.darkZoneBattle;
              } else {
                userForwardPoints += forwardPoints.newMob * forwardPoints.regularZoneBattle;
              }

              newBeast.save().then(() => next());
            } else {
              beastsToValidate.push({
                name: iBeast.name, distance: iBeast.distanceRange[0], type: iBeast.type, isDungeon: iBeast.isDungeon, reason: 'battle', date: iBeast.date,
              });
              next();
            }
          } else {
            let beastPoints = 0;
            const uniqueBattles = [];
            const uniqueConcussions = [];
            const uniqueFlees = [];

            if (iBeast.battles) {
              if (iBeast.battles.length > 0) {
                iBeast.battles.forEach((battle) => {
                  if (databaseBeast.battles === undefined) {
                    uniqueBattles.push(battle);
                  } else {
                    const battlesForValidation = databaseBeast.battles.filter(({ version }) => version === VERSION);

                    const sameStamp = battlesForValidation.some(newBattle => newBattle.stamp === battle.stamp);

                    if (sameStamp) {
                      dupes.battles += 1;
                    }

                    if (!sameStamp) {
                      uniqueBattles.push(battle);
                    }
                  }
                });
              }
            }


            if (iBeast.concussions) {
              if (iBeast.concussions.length > 0) {
                iBeast.concussions.forEach((concussion) => {
                  if (databaseBeast.battles === undefined) {
                    uniqueConcussions.push(concussion);
                  } else {
                    const concussionsForValidation = databaseBeast.concussions.filter(({ version }) => version === VERSION);

                    const sameConcussion = concussionsForValidation.some(newConcussion => concussion.stats.agility === newConcussion.stats.agility
                        && concussion.amount === newConcussion.amount);

                    if (!sameConcussion) {
                      uniqueConcussions.push(concussion);
                    }
                  }
                });
              }
            }

            if (iBeast.flees) {
              if (iBeast.flees.length === 1) {
                iBeast.flees.forEach((flee) => {
                  if (databaseBeast.flees === undefined) {
                    uniqueFlees.push(flee);
                  } else {
                    const fleesForValidation = databaseBeast.flees.filter(({ version }) => version === VERSION);

                    const sameStamp = fleesForValidation.some(newFlee => newFlee.stamp === flee.stamp);

                    if (sameStamp) {
                      dupes.flees += 1;
                    }

                    if (!sameStamp) {
                      uniqueFlees.push(flee);
                    }
                  }
                });
              }
            }

            if (!_.isEmpty(iBeast.receivedItems)) {
              // FIXME: Implement cross-validation and cross-updation of receivedItems

              /* if (_.isEmpty(databaseBeast.receivedItems)) {
                  databaseBeast.receivedItems = {};
                }

                Object.keys(iBeast.receivedItems).forEach((item) => {
                  const amount = iBeast.receivedItems[item];

                  if (databaseBeast.receivedItems[item]) {
                    if (!_.contains(databaseBeast.receivedItems[item], amount)) {
                      databaseBeast.receivedItems[item].push(amount);
                    }
                    // TODO: Apply to similar
                    databaseBeast.markModified('receivedItems');
                  } else {
                    databaseBeast.markModified('receivedItems');
                    databaseBeast.receivedItems[item] = [amount];
                  }
                }); */
            }

            if (iBeast.distanceRange.length > 0) {
              const distanceRangesForValidation = databaseBeast.distanceRange
                .filter(({ version }) => (version === VERSION))
                .map(({ value }) => value);

              const newRanges = iBeast.distanceRange.filter(range => distanceRangesForValidation.indexOf(range.value) === -1);
              const sameRanges = iBeast.distanceRange.filter(range => distanceRangesForValidation.indexOf(range.value) !== -1);

              if (!_.isEmpty(newRanges)) {
                beastPoints += forwardPoints.newDistance * newRanges.length;

                databaseBeast.distanceRange = [...databaseBeast.distanceRange, ...signSetWithVersion(newRanges)];
              } else if (!_.isEmpty(sameRanges)) {
                // beastPoints += forwardPoints.sameDistance * sameRanges.length;
              }
            }


            if (uniqueBattles.length > 0) {
              uniqueBattles.forEach((newBattle) => {
                if (newBattle.outcome === 'win') {
                  beastPoints += forwardPoints.newBattleWin;

                  if (iBeast.capsReceived.length > 0) {
                    const capsReceivedForValidation = databaseBeast.capsReceived
                      .filter(({ version }) => (version === VERSION))
                      .map(({ value }) => value);

                    const newCaps = iBeast.capsReceived.filter(caps => capsReceivedForValidation.indexOf(caps.value) === -1);

                    if (!_.isEmpty(newCaps)) {
                      databaseBeast.capsReceived = [...databaseBeast.capsReceived, ...signSetWithVersion(newCaps)];
                    }
                  }

                  if (iBeast.materialsReceived.length > 0) {
                    const materialsReceivedForValidation = databaseBeast.materialsReceived
                      .filter(({ version }) => (version === VERSION))
                      .map(({ value }) => value);

                    const newMaterials = iBeast.materialsReceived.filter(materials => materialsReceivedForValidation.indexOf(materials.value) === -1);

                    if (!_.isEmpty(newMaterials)) {
                      databaseBeast.materialsReceived = [...databaseBeast.materialsReceived, ...signSetWithVersion(newMaterials)];
                    }
                  }
                } else {
                  beastPoints += forwardPoints.newBattleLose;
                }

                databaseBeast.battles.push(signEntryWithVersion(newBattle));
              });
            }

            if (uniqueConcussions.length > 0) {
              databaseBeast.concussions.push(signEntryWithVersion(uniqueConcussions));
            }

            if (uniqueFlees.length > 0) {
              uniqueFlees.forEach((newFlee) => {
                if (newFlee.outcome === 'win') {
                  beastPoints += forwardPoints.newFleeWin;
                } else {
                  beastPoints += forwardPoints.newFleeLose;
                }

                databaseBeast.flees.push(signEntryWithVersion(newFlee));
              });
            }


            if (
              !_.isEmpty(uniqueBattles)
                || !_.isEmpty(uniqueConcussions)
                || !_.isEmpty(uniqueFlees)
            ) {
              dataProcessed += 1;

              if (iBeast.type === 'DarkZone') {
                userForwardPoints += beastPoints * forwardPoints.darkZoneBattle;
              } else {
                userForwardPoints += beastPoints * forwardPoints.regularZoneBattle;
              }
            }

            delete databaseBeast.__v;

            databaseBeast.save().then(() => next()).catch((e) => {
              console.log(`Tried to save:\n${JSON.stringify(iBeast)}\n===================\nUserId: ${msg.from.id}\n`);
              console.log(`Error:\n${e}\n===================\n===================\n===================`);
              next();
            });
          }
        });
      }, () => {
        resolve();
      });
    } else {
      resolve();
    }
  });

  const processLocations = () => new Promise((resolve) => {
    if (updatesData.locations.length > 0) {
      async.forEach(updatesData.locations, (iLocation, next) => {
        Location.findOne({
          distance: iLocation.distance,
        }).then((databaseLocation) => {
          if (databaseLocation === null) {
            const newLocation = new Location({
              distance: iLocation.distance,
              name: iLocation.name,
              type: iLocation.type,
              isRaid: iLocation.isRaid,
              effects: [iLocation.effect],
              capsReceived: [iLocation.capsReceived],
              materialsReceived: [iLocation.materialsReceived],
              capsLost: [iLocation.capsLost],
              materialsLost: [iLocation.materialsLost],
              receivedItems: [iLocation.receivedItems],
              receivedBonusItems: [iLocation.receivedBonusItems],
              healthInjuries: [iLocation.healthInjuries],
            });

            dataProcessed += 1;

            newLocation.save().then(() => next());
          } else {
            if (!_.contains(databaseLocation.effects, iLocation.effect)) {
              databaseLocation.effects.push(iLocation.effect);
            }

            if (!_.contains(databaseLocation.capsReceived, iLocation.capsReceived)) {
              databaseLocation.capsReceived.push(iLocation.capsReceived);
            }

            if (!_.contains(databaseLocation.materialsReceived, iLocation.materialsReceived)) {
              databaseLocation.materialsReceived.push(iLocation.materialsReceived);
            }

            if (!_.contains(databaseLocation.capsLost, iLocation.capsLost)) {
              databaseLocation.capsLost.push(iLocation.capsLost);
            }

            if (!_.contains(databaseLocation.materialsLost, iLocation.materialsLost)) {
              databaseLocation.materialsLost.push(iLocation.materialsLost);
            }

            if (!_.contains(databaseLocation.healthInjuries, iLocation.healthInjuries)) {
              databaseLocation.healthInjuries.push(iLocation.healthInjuries);
            }

            if (!_.isEmpty(iLocation.receivedBonusItems)) {
              // TODO: Implement correct loot processing

              /* Object.keys(iLocation.receivedBonusItems).forEach((item) => {
                const amount = iLocation.receivedBonusItems[item];

                if (!_.isEmpty(databaseLocation.receivedBonusItems)) {
                  if (databaseLocation.receivedBonusItems[item]) {
                    // FIXME: TypeError: databaseLocation.receivedBonusItems[item].push is not a function

                    if (!_.contains(databaseLocation.receivedBonusItems[item], amount)) {
                      // databaseLocation.receivedBonusItems[item].push(amount);
                    }
                  } else {
                    databaseLocation.receivedBonusItems[item] = [amount];
                  }
                }
              }); */
            }

            dataProcessed += 1;

            databaseLocation.save().then(() => next());
          }
        });
      }, () => {
        resolve();
      });
    } else {
      resolve();
    }
  });

  detectBeastForValidation().then(
    () => {
      Promise.all([
        processBeasts(),
        processLocations(),
        saveJourney(),
      ]).then(() => {
        let errors = '';
        let dupesText = '';
        let reply;

        if (reportData.errors.length > 0) {
          errors = `*–¢–∞–∫–∂–µ —è –∑–∞–º–µ—Ç–∏–ª —Ç–∞–∫–∏–µ –≤–µ—â–∏*:
    ${reportData.errors.join('\n')}`;
        }

        if (dupes.battles > 0 || dupes.flees > 0) {
          dupesText = '–ü–æ—Ö–æ–∂–µ —Ç—ã —Å–∫–∏–¥—ã–≤–∞–ª –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ä–≤–∞—Ä–¥—ã –ø–æ –≤—Ç–æ—Ä–æ–º—É —Ä–∞–∑—É. –Ø –Ω–µ –Ω–∞—á–∏—Å–ª—è–ª —Ç–µ–±–µ –∑–∞ –Ω–∏—Ö –æ—á–∫–∏';
        }

        if (dataProcessed > 0 && userForwardPoints > 0) {
          // TODO: Move out shit to strings
          // TODO: Implement meaningfull report data regarding found usefull data
          createSession(msg.from.id);

          // setTimeout(() => {
          if (options.silent) {
            reply = `
        –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ä–≤–∞—Ä–¥. –Ø –ø–µ—Ä–µ–≤—ë–ª ${userForwardPoints.toFixed(1)} üíé*–®–º–µ–ø—Å–µ–ª–µ–π* –Ω–∞ —Ç–≤–æ–π —Å—á—ë—Ç.\n_${dupesText}_`;
          } else {
            // –í—Å–µ–≥–æ —è –Ω–∞—Å—á–∏—Ç–∞–ª ${dataProcessed} –¥–∞–Ω–Ω—ã—Ö!

            reply = `–§—É—Ö, —è —Å–æ –≤—Å—ë–º —Å–ø—Ä–∞–≤–∏–ª—Å—è - —Å–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω–æ–µ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!

–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª ${userForwardPoints.toFixed(1)} üíé*–®–º–µ–ø—Å–µ–ª–µ–π* –∑–∞ —Å–≤–æ–∏ —Ñ–æ—Ä–≤–∞—Ä–¥—ã!
_${dupesText}_

${errors}
–ï—Å–ª–∏ —Ç—ã —á–µ–≥–æ-—Ç–æ –∑–∞–±—ã–ª –¥–æ–∫–∏–Ω—É—Ç—å - —Å–º–µ–ª–æ –∂–º–∏ –Ω–∞ \`[–°–∫–∏–Ω—É—Ç—å –ª–æ–≥ üèÉ]\` –∏ _–¥–æ–∫–∏–¥—ã–≤–∞–π_`;
          }

          msg.reply.text(reply, {
            replyMarkup: defaultKeyboard,
            parseMode: 'markdown',
            asReply: options.silent,
          }).then(() => {
            userManager.addPoints(msg.from.id, userForwardPoints).then((result) => {
              if (!result.ok) {
                if (result.reason === 'USER_NOT_FOUND') {
                  msg.reply.text('–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ç–µ–±–µ —à–º–µ–ø—Å–µ–ª–∏ –ø–æ–∫–∞ —Ç—ã –Ω–µ —Å–∫–∏–Ω–µ—à—å –º–Ω–µ —Å–≤–æ–π –ø–∏–ø-–±–æ–π :—Å');
                }
                console.log(`userManager.addPoints: ${JSON.stringify(result)}`);
              }
            });
          }).catch(e => console.log(e));
          // }, 1500);
        } else {
          // setTimeout(() => {
          createSession(msg.from.id);
          return msg.reply.text(`
        –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ —Å–º–æ–≥ —É–∑–Ω–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∏–∑ —Ç–≤–æ–∏—Ö —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤ :—Å${dupesText ? `\n\n_${dupesText}_` : ''}`, {
            replyMarkup: defaultKeyboard,
            parseMode: 'markdown',
          });
          // }, 1500);
        }

        // FIXME: COULD BE AN ISSUE
        // sessions[msg.from.id].state = states.WAIT_FOR_DATA_VALIDATION;
      }).catch(e => console.log(e));
    },
    () => {
      sessions[msg.from.id].state = states.WAIT_FOR_DATA_VALIDATION;
      sessions[msg.from.id].initialForwardDate = reportData.initialForwardDate;
      sessions[msg.from.id].lastForwardDate = reportData.lastForwardDate;
      sessions[msg.from.id].firstForwardDate = reportData.firstForwardDate;
      sessions[msg.from.id].beastsToValidate = beastsToValidate;
      sessions[msg.from.id].beastRequest = true;

      return msg.reply.text(getBeastToValidateMessage(sessions[msg.from.id].beastsToValidate, sessions[msg.from.id].beastRequest), {
        parseMode: 'html',
        replyMarkup: 'hide',
      }).catch(e => console.log(e));
    },
  );


  return false;
};

const actualProcessUserData = (msg, reportData, updatesData, options) => {
  if (!options.silent) {
    msg.reply.text('–ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–¥–æ–∂–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ–º–Ω–æ–≥–æ :3', {
      replyMarkup: 'hide',
    }).then(() => {
      actualActualProcessUserData(msg, reportData, updatesData, options);
    }).catch(e => console.log(e));
  } else {
    actualActualProcessUserData(msg, reportData, updatesData, options);
  }
};

const databasePipCheck = async (msg, pips) => Promise((resolve) => {
  findPip(msg, (result) => {
    if (result.ok) {
      const { pip } = result.data;

      resolve(comparePips([...pips, pip]));
    } else {
      resolve(true);
    }
  });
});

const processUserData = async (msg, options, processConfig = {
  omitPipError: false,
}) => {
  sessions[msg.from.id].state = states.WAIT_FOR_DATA_TO_PROCESS;

  const {
    data,
  } = sessions[msg.from.id];

  const isPipsFraudless = await databasePipCheck(msg, data.filter(entry => entry.dataType === 'pipboy'));

  if (!isPipsFraudless) {
    return msg.reply.text('<b>‚ùå–ó–ê–ú–ï–ß–ï–ù–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê‚ùå</b>\n\n–ü–æ—Ö–æ–∂–µ —á—Ç–æ —Ç—ã —Å–∫–∏–¥—ã–≤–∞–ª –ø–∏–ø-–±–æ–π, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω–µ –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∏—Ç\n\n<i>–§–æ—Ä–≤–∞—Ä–¥—ã –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.</i>', {
      replyMarkup: defaultKeyboard,
      parseMode: 'html',
    });
  }

  let {
    reportData,
    updatesData,
  } = processForwards(data, msg.from.id || moment.now(), processConfig);

  if (reportData.criticalError) {
    return msg.reply.text(`<b>‚ùå–ó–ê–ú–ï–ß–ï–ù–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê‚ùå</b>\n\n${reportData.criticalError}\n\n<i>–§–æ—Ä–≤–∞—Ä–¥—ã –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.</i>`, {
      replyMarkup: defaultKeyboard,
      parseMode: 'html',
    });
  }

  if (options.useBeastFace && !_.isEmpty(reportData.beastsToValidate)) {
    sessions[msg.from.id].state = states.WAIT_FOR_DATA_VALIDATION;
    sessions[msg.from.id].initialForwardDate = reportData.initialForwardDate;
    sessions[msg.from.id].lastForwardDate = reportData.lastForwardDate;
    sessions[msg.from.id].firstForwardDate = reportData.firstForwardDate;
    sessions[msg.from.id].beastsToValidate = reportData.beastsToValidate;
    sessions[msg.from.id].beastRequest = false;

    return msg.reply.text(getBeastToValidateMessage(sessions[msg.from.id].beastsToValidate, sessions[msg.from.id].beastRequest), {
      parseMode: 'html',
      replyMarkup: 'hide',
    }).catch(e => console.log(e));
  }


  if (updatesData.locations.length === 0 && updatesData.beasts.length === 0) {
    createSession(msg.from.id);
    return msg.reply.text(`
  –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ —Å–º–æ–≥ —É–∑–Ω–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∏–∑ —Ç–≤–æ–∏—Ö —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤ :—Å`, {
      replyMarkup: defaultKeyboard,
      parseMode: 'markdown',
    });
  }

  if (options.usePip && reportData.pipRequired) {
    userManager.findByTelegramId(msg.from.id).then((result) => {
      if (result.ok && result.reason === 'USER_FOUND') {
        if (result.data.pip !== undefined) {
          sessions[msg.from.id].data.push({
            data: result.data.pip,
            dataType: 'pipboy',
            date: result.data.pip.timeStamp,
          });
        }


        const {
          reportData: reportDataWithUserPip,
          updatesData: updatesDataWithUserPip,
        } = processForwards(data, msg.from.id || moment.now());

        if (reportDataWithUserPip.criticalError && reportDataWithUserPip.couldBeUpdated) {
          sessions[msg.from.id].state = states.WAIT_FOR_PIP_FORWARD;
          return msg.reply.text(`
  –¢–≤–æ–π –ø–∏–ø-–±–æ–π, –∫–æ—Ç–æ—Ä—ã–π —è –∫–æ–≥–¥–∞-—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª - —É—Å—Ç–∞—Ä–µ–ª.
  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–∫–∏–Ω—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –ø–∏–ø-–±–æ–π.
  –õ–∏–±–æ –∂–µ —ç—Ç–æ —Ñ–æ—Ä–≤–∞—Ä–¥ —Å —Å—Ç–∞—Ç–∞–º–∏, –æ—Ç–ª–∏—á–Ω—ã–º–∏ –æ—Ç —Ç–≤–æ–∏—Ö.

  –ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–º–∏ /skippipforward

  *–í–ù–ò–ú–ê–ù–ò–ï: –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ù–ê /skippipforward - –ë–û–¢ –ü–†–û–ò–ì–ù–û–†–ò–†–£–ï–¢ –¢–í–û–ò –ë–ò–¢–í–´ –ò –ü–û–ë–ï–ì–ò –û–¢ –ú–û–ë–û–í –ò –ù–ï –ó–ê–ü–ò–®–ï–¢ –ò–• –í –ë–ê–ó–£*
  `, {
            parseMode: 'markdown',
            replyMarkup: toGameKeyboard,
          });
        } if (reportDataWithUserPip.criticalError && !reportDataWithUserPip.couldBeUpdated) {
          createSession(msg.from.id);
          return msg.reply.text('–¢–≤–æ–π –ø–∏–ø –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—Ç —Ç–≤–æ–∏–º —Å—Ç–∞—Ç–∞–º –∏–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤!\n–ü—Ä–æ—Å—Ç–∏, —è –≤—ã–Ω—É–∂–¥–µ–Ω –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–≤–æ–∏ —Ñ–æ—Ä–≤–∞—Ä–¥—ã.', {
            replyMarkup: defaultKeyboard,
          });
        }
        updatesData = updatesDataWithUserPip;
        reportData = reportDataWithUserPip;

        actualProcessUserData(msg, reportData, updatesData, options);
      } else {
        sessions[msg.from.id].state = states.WAIT_FOR_PIP_FORWARD;
        return msg.reply.text(`
  –ü–æ—Ö–æ–∂–µ —Ç—ã –º–Ω–µ –µ—â—ë –Ω–µ —Å–∫–∏–¥—ã–≤–∞–ª –ø–∏–ø –±–æ–π
  –ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–º–∏ /skippipforward

  *–í–ù–ò–ú–ê–ù–ò–ï: –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ù–ê /skippipforward - –ë–û–¢ –ü–†–û–ò–ì–ù–û–†–ò–†–£–ï–¢ –¢–í–û–ò –ë–ò–¢–í–´ –ò –ü–û–ë–ï–ì–ò –û–¢ –ú–û–ë–û–í –ò –ù–ï –ó–ê–ü–ò–®–ï–¢ –ò–• –í –ë–ê–ó–£*
  `, {
          parseMode: 'markdown',
          replyMarkup: toGameKeyboard,
        });
      }

      return false;
    }).catch(e => console.log(e));
  } else {
    userManager.findByTelegramId(msg.from.id).then((result) => {
      // BOOK
      if (result.ok && result.reason === 'USER_FOUND') {
        actualProcessUserData(msg, reportData, updatesData, options);
      } else {
        actualProcessUserData(msg, reportData, updatesData, options);
      }
    });
  }

  return false;
};

bot.on('forward', (msg) => {
  if (sessions[msg.from.id] === undefined) {
    createSession(msg.from.id);
  }

  if (msg.forward_from.id !== 430930191) {
    if (sessions[msg.from.id].state !== states.WAIT_FOR_FORWARD_END) {
      console.log(`[CULPRIT]: ${msg.from.id} | ${msg.from.first_name} | ${msg.from.username}`);

      // createSession(msg.from.id);

      return msg.reply.text(`
–§–æ—Ä–≤–∞—Ä–¥—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç @WastelandWarsBot.
            `, {
        asReply: true,
        replyMarkup: defaultKeyboard,
      });
    }
  }

  if (!validateForwardDate(msg.forward_date)) {
    return msg.reply.text('‚ùå<b>–ó–ê–ú–ï–ß–ï–ù–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê</b>‚ùå\n\n–ë—ã–ª –∑–∞–º–µ—á–µ–Ω —Ñ–æ—Ä–≤–∞—Ä–¥, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–≥–æ –º–µ–Ω—å—à–µ, —á–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Wasteland Wars (19.09.2018)', {
      asReply: true,
      parseMode: 'html',
    });
  }

  if (sessions[msg.from.id].state === states.WAIT_FOR_PIP_FORWARD) {
    const isClassicPip = regExpSetMatcher(msg.text, {
      regexpSet: PipRegexps.classicPip,
    });

    const isSimplePip = regExpSetMatcher(msg.text, {
      regexpSet: PipRegexps.simplePip,
    });

    if (isClassicPip || isSimplePip) {
      const data = parsePip(msg, isClassicPip);
      const dataType = 'pipboy';
      let reply;

      updateOrCreate(msg, data, (result) => {
        if (!result.ok && result.reason === 'PIP_VALIDATION_FAILED') {
          reply = `–Ø –Ω–µ –≤–∏–∂—É —á—Ç–æ –±—ã —Ç—ã –ø—Ä–æ–∫–∞—á–∞–ª –∫–∞–∫–∏–µ-—Ç–æ —Å–∫–∏–ª—ã :c
–°–∫–∏–¥—ã–≤–∞–π –ø–∏–ø-–±–æ–π –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∫–∞—á–∞–µ—à—å—Å—è!`;
        }

        if (!result.ok && result.reason === 'PIP_OUTDATED') {
          reply = '–£ –º–µ–Ω—è –≤ –±–∞–∑–µ –µ—Å—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–æ —Ç–≤–æ–π –ø–∏–ø-–±–æ–π';
        }

        if (result.ok && result.reason === 'USER_CREATED') {
          reply = `
–°—É–ø–µ—Ä, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ç–≤–æ–π –ø–∏–ø!
–ù–µ –∑–∞–±—ã–≤–∞–π —Å–∫–∏–¥—ã–≤–∞—Ç—å –º–Ω–µ —Å–≤–æ–π –ø–∏–ø-–±–æ–π –ø–æ –º–µ—Ä–µ —Ç–æ–≥–æ –∫–∞–∫ –±—É–¥–µ—à—å –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å —Å–∫–∏–ª—ã!`;
        }

        if (result.ok && result.reason === 'USER_UPDATED') {
          reply = `–®–∏–∫–∞—Ä–¥–æ—Å, —è –æ–±–Ω–æ–≤–∏–ª —Ç–≤–æ–π –ø–∏–ø!
–ù–µ –∑–∞–±—É–¥—å —Å–∫–∏–Ω—É—Ç—å –Ω–æ–≤—ã–π –ø–∏–ø, –∫–æ–≥–¥–∞ –∫–∞—á–Ω–µ—à—å—Å—è!`;
        }

        if (result.ok) {
          return msg.reply.text(`${reply}\n–¢–µ–ø–µ—Ä—å —è –∑–∞–π–º—É—Å—å —Ç–≤–æ–∏–º–∏ —Ñ–æ—Ä–≤–∞—Ä–¥–∞–º–∏`).then(() => {
            sessions[msg.from.id].data.push({
              data,
              dataType,
              date: msg.forward_date,
            });

            processUserData(msg, {
              usePip: sessions[msg.from.id].processDataConfig.usePip,
              useBeastFace: sessions[msg.from.id].processDataConfig.useBeastFace,
            }, {
              omitPipError: true,
            });
          });
        }
        return msg.reply.text(reply, {
          asReply: true,
        });
      });
    } else {
      return msg.reply.text(`
–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–∏–ø-–±–æ–π. –ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª –µ–≥–æ –∫–∏–¥–∞—Ç—å - –∂–º–∏ /skippipforward

*–ù–æ —Ç–æ–≥–¥–∞ —è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É—é –±–∏—Ç–≤—ã –∏ –ø–æ–±–µ–≥–∏ –æ—Ç –º–æ–±–æ–≤*
            `, {
        asReply: true,
      });
    }
  } if (sessions[msg.from.id].state === states.WAIT_FOR_DATA_VALIDATION) {
    const { beastsToValidate, lastForwardDate, firstForwardDate } = sessions[msg.from.id];

    if (msg.forward_date > lastForwardDate || msg.forward_date < (firstForwardDate - (3 * 60 * 60))) {
      return msg.reply.text('–î–∞—Ç–∞ —ç—Ç–æ–≥–æ —Ñ–æ—Ä–≤—Ä–∞–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤ –∏–∑ —Ç–≤–æ–µ–≥–æ –∫—Ä—É–≥–∞ - –Ω–∞–µ–±–∞—Ç—å –º–µ–Ω—è –≤–∑–¥—É–º–∞–ª?', {
        asReply: true,
      });
    }

    let data;
    let dataType;
    let beastName;
    let beastType;

    const isLocation = regExpSetMatcher(msg.text, {
      regexpSet: regexps.location,
    });

    const isDungeonBeastFaced = regExpSetMatcher(msg.text, {
      regexpSet: regexps.dungeonBeastFaced,
    });

    const isWalkingBeastFaced = regExpSetMatcher(msg.text, {
      regexpSet: regexps.walkingBeastFaced,
    });

    const isAltInBattle = regExpSetMatcher(msg.text, {
      regexpSet: regexps.altInBattle,
    });

    const isHaloDungeonBeastFaced = regExpSetMatcher(msg.text, {
      regexpSet: regexps.haloDungeonBeastFaced,
    });


    if (isDungeonBeastFaced) {
      data = parseBeastFaced.parseDungeonBeastFaced(msg.text);
      dataType = 'dungeonBeastFaced';
      beastName = data.name;
    } else if (isLocation) {
      data = parseLocation(msg.text);
      dataType = 'location';
      beastName = data.beastFaced.name;
      beastType = data.beastFaced.type;
    } else if (isWalkingBeastFaced) {
      data = parseBeastFaced.parseWalkingBeastFaced(msg.text);
      dataType = 'walkingBeastFaced';
      beastName = data.name;
    } else if (isHaloDungeonBeastFaced) {
      data = parseBeastFaced.parseHaloDungeonBeastFaced(msg.text);
      dataType = 'dungeonBeastFaced';
      beastName = data.name;
    }

    const isForwardValid = ({ dataType, beastName, beastType }) => {
      let beastValidationTimeScope = beastsToValidate.map((beast, index) => ({ ...beast, index }));
      const beastIndexToRemove = date => beastValidationTimeScope.sort((a, b) => Math.abs(date - a.date) - Math.abs(date - b.date))[0].index;

      beastValidationTimeScope = beastValidationTimeScope.filter(({ date }) => {
        let timeOffset;

        if (isDungeonBeastFaced || isHaloDungeonBeastFaced) {
          timeOffset = date - (20 * 60);
        } else if (isLocation) {
          timeOffset = date - (3 * 60 * 60);
        } else if (isWalkingBeastFaced) {
          timeOffset = date - (60 * 60);
        }

        return msg.forward_date > timeOffset;
      });

      if (beastValidationTimeScope.length === 0) {
        return false;
      }

      if (dataType === 'walkingBeastFaced') {
        if (beastValidationTimeScope.some(beast => (beast.name.indexOf(beastName) !== -1))) {
          const beastIndex = beastIndexToRemove(msg.forward_date);
          sessions[msg.from.id].beastsToValidate = sessions[msg.from.id].beastsToValidate.filter((beast, index) => index !== beastIndex);

          return true;
        }

        return null;
      }

      if (dataType === 'dungeonBeastFaced') {
        if (beastValidationTimeScope.every(beast => beast.name !== beastName && beast.name !== '???')) {
          return false;
        }

        const beastIndex = beastIndexToRemove(msg.forward_date);
        sessions[msg.from.id].beastsToValidate = sessions[msg.from.id].beastsToValidate.filter((beast, index) => index !== beastIndex);

        return true;
      }

      if (beastValidationTimeScope.every(beast => (beast.name !== beastName && beast.name !== '???') || beast.type !== beastType)) {
        return false;
      }

      const beastIndex = beastIndexToRemove(msg.forward_date);
      sessions[msg.from.id].beastsToValidate = sessions[msg.from.id].beastsToValidate.filter((beast, index) => index !== beastIndex);

      return true;
    };

    if (isAltInBattle) {
      return msg.reply.text(`–≠—Ç–æ –∫–æ–Ω–µ—á–Ω–æ —Ñ–æ—Ä–≤–∞—Ä–¥ —Å –º–æ–±–æ–º, –Ω–æ —ç—Ç–æ –Ω–µ —Ñ–æ—Ä–≤–∞—Ä–¥ –≤—Å—Ç—Ä–µ—á–∏.
–§–æ—Ä–≤–∞—Ä –≤—Å—Ç—Ä–µ—á–∏ –æ–Ω–∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫:
<code>–í–æ –≤—Ä–µ–º—è –≤—ã–ª–∞–∑–∫–∏ –Ω–∞ —Ç–µ–±—è –Ω–∞–ø–∞–ª...</code>
–∏–ª–∏
<code>...–ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∏–ª —Ç–µ–±–µ –ø—É—Ç—å.</code>
–∏–ª–∏
<code>—É—Å—Ç—Ä–∞—à–∞—é—â–µ –Ω–∞—á–∞–ª –ø—Ä–∏–±–ª–∏–∂–∞—Ç—å—Å—è...</code>

–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–º–∏ /skipbeastforwards
<i>–í–ù–ò–ú–ê–ù–ò–ï: –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ù–ê /skipbeastforwards - –ë–û–¢ –ü–†–û–ò–ì–ù–û–†–ò–†–£–ï–¢ –î–ê–ù–ù–´–ï, –ö–û–¢–û–†–´–ï –ó–ê–í–ò–°–Ø–¢ –û–¢ –£–ö–ê–ó–ê–ù–´–• –í–´–®–ï –§–û–†–í–ê–†–î–û–í, –ò –ù–ï –ó–ê–ü–ò–®–ï–¢ –ò–• –í –ë–ê–ó–£</i>`, {
        asReply: true,
        parseMode: 'html',
      });
    } if (isForwardValid({ dataType, beastName, beastType }) === false) {
      return msg.reply.text(`–≠—Ç–æ—Ç –º–æ–± –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–æ–≥–æ —Å –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –¥—Ä–∞–ª—Å—è –≤ —ç—Ç–æ –≤—Ä–µ–º—è. –¢—ã —á—ë - –Ω–∞–µ–±–∞—Ç—å –º–µ–Ω—è –≤–∑–¥—É–º–∞–ª?!
–ó–∞–±—ã–ª –∫—Ç–æ –º–Ω–µ –Ω—É–∂–µ–Ω? –ñ–º–∏ /showBeastsToValidate


–ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª –µ—ë –∫–∏–¥–∞—Ç—å - –∂–º–∏ /skipbeastforward
<b>–ù–æ —Ç–æ–≥–¥–∞ —è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É—é –≤—Å—é —Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤</b>`, {
        asReply: true,
        parseMode: 'html',
      });
    } if (isForwardValid({ dataType, beastName, beastType }) === null) {
      return msg.reply.text(`–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –∏ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —É–±–µ–≥–∞–ª –æ—Ç —ç—Ç–æ–≥–æ –º–æ–±–∞, –Ω–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ñ–æ—Ä–≤–∞—Ä–¥ –º–Ω–µ —ç—Ç–æ –Ω–∏–∫–∞–∫ –Ω–µ –¥–æ–∫–∞–∂–µ—Ç :—Å
–†–µ–∫–æ–º–µ–Ω–¥—É—é "–ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å" —ç—Ç–æ–≥–æ –º–æ–±–∞ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–º–∞–Ω–¥—É <b>/ignore_</b>, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–¥ –º–æ–±–æ–º.

–°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤ –≤—Å—Ç—Ä–µ—á, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–µ –Ω—É–∂–Ω—ã - /showBeastsToValidate`, {
        asReply: true,
        parseMode: 'html',
      });
    }

    if (isLocation || isDungeonBeastFaced || isWalkingBeastFaced || isHaloDungeonBeastFaced) {
      sessions[msg.from.id].data.push({
        data,
        dataType,
        date: msg.forward_date,
      });

      if (sessions[msg.from.id].beastsToValidate.length === 0) {
        return msg.reply.text('–°—É–ø–µ—Ä, —è –≤–∏–∂—É –≤—Å—Ç—Ä–µ—á—É —Å –º–æ–±–æ–º - —Å–µ–π—á–∞—Å –æ–±—Ä–∞–±–æ—Ç–∞—é –µ—ë –≤–º–µ—Å—Ç–µ —Å —Ç–≤–æ–∏–º–∏ —Ñ–æ—Ä–≤–∞—Ä–¥–∞–º–∏').then(() => processUserData(msg, {
          usePip: sessions[msg.from.id].processDataConfig.usePip,
          useBeastFace: sessions[msg.from.id].processDataConfig.useBeastFace,
        }));
      }

      return msg.reply.text(getBeastToValidateMessage(sessions[msg.from.id].beastsToValidate, sessions[msg.from.id].beastRequest, false, false), {
        asReply: true,
        parseMode: 'html',
      });
    }
    return msg.reply.text(`
–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –º–æ–±–∞. –ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª –µ—ë –∫–∏–¥–∞—Ç—å - –∂–º–∏ /skipbeastforward

*–ù–æ —Ç–æ–≥–¥–∞ —è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É—é —ç—Ç—É "–Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—É—é"*
            `, {
      asReply: true,
    });
  } if (sessions[msg.from.id].state === states.WAIT_FOR_FORWARD_END) {
    let data;
    let dataType;

    const isLocation = regExpSetMatcher(msg.text, {
      regexpSet: regexps.location,
    });

    const isRegularBeast = regExpSetMatcher(msg.text, {
      regexpSet: regexps.regularBeast,
    });

    const isDungeonBeast = regExpSetMatcher(msg.text, {
      regexpSet: regexps.dungeonBeast,
    });

    const isFlee = regExpSetMatcher(msg.text, {
      regexpSet: regexps.flee,
    });

    const isDeathMessage = regExpSetMatcher(msg.text, {
      regexpSet: regexps.deathMessage,
    });

    const isDungeonBeastFaced = regExpSetMatcher(msg.text, {
      regexpSet: regexps.dungeonBeastFaced,
    });

    const isWalkingBeastFaced = regExpSetMatcher(msg.text, {
      regexpSet: regexps.walkingBeastFaced,
    });

    const isHaloDungeonBeastFaced = regExpSetMatcher(msg.text, {
      regexpSet: regexps.haloDungeonBeastFaced,
    });

    const isClassicPip = regExpSetMatcher(msg.text, {
      regexpSet: PipRegexps.classicPip,
    });

    const isSimplePip = regExpSetMatcher(msg.text, {
      regexpSet: PipRegexps.simplePip,
    });

    if (isDungeonBeastFaced) {
      data = parseBeastFaced.parseDungeonBeastFaced(msg.text);
      dataType = 'dungeonBeastFaced';
    } else if (isHaloDungeonBeastFaced) {
      data = parseBeastFaced.parseHaloDungeonBeastFaced(msg.text);
      dataType = 'dungeonBeastFaced';
    } else if (isWalkingBeastFaced) {
      data = parseBeastFaced.parseWalkingBeastFaced(msg.text);
      dataType = 'walkingBeastFaced';
    } else if (isFlee) {
      data = parseFlee(msg.text);
      dataType = 'flee';
    } else if (isDeathMessage) {
      data = parseDeathMessage(msg.text);
      dataType = 'deathMessage';
    } else if (isRegularBeast) {
      data = beastParser.parseRegularBeast(msg.text);
      dataType = 'regularBeast';
    } else if (isLocation) {
      data = parseLocation(msg.text);
      dataType = 'location';
    } else if (isClassicPip || isSimplePip) {
      data = { ...parsePip(msg, isClassicPip) };
      dataType = 'pipboy';
    } else if (isDungeonBeast) {
      data = beastParser.parseDungeonBeast(msg.text);
      dataType = 'dungeonBeast';
    }

    if (isRegularBeast || isLocation || isFlee || isDeathMessage || isDungeonBeastFaced || (isClassicPip || isSimplePip) || isDungeonBeast || isWalkingBeastFaced || isHaloDungeonBeastFaced) {
      sessions[msg.from.id].data.push({
        data,
        dataType,
        date: msg.forward_date,
        userId: msg.from.id,
      });
    }
  } else if (
    sessions[msg.from.id].state !== states.WAIT_FOR_PIP_FORWARD
        && sessions[msg.from.id].state !== states.WAIT_FOR_DATA_VALIDATION
        && sessions[msg.from.id].state !== states.WAIT_FOR_FORWARD_END
  ) {
    const isClassicPip = regExpSetMatcher(msg.text, {
      regexpSet: PipRegexps.classicPip,
    });

    const isSimplePip = regExpSetMatcher(msg.text, {
      regexpSet: PipRegexps.simplePip,
    });

    const isRegularBeastFaced = regExpSetMatcher(msg.text, {
      regexpSet: regexps.regularBeastFaced,
    });

    const isWalkingBeastFaced = regExpSetMatcher(msg.text, {
      regexpSet: regexps.walkingBeastFaced,
    });

    const isGiantFaced = regExpSetMatcher(msg.text, {
      regexpSet: regexps.giantFaced,
    });

    const isGiantFought = regExpSetMatcher(msg.text, {
      regexpSet: regexps.giantFought,
    });

    const isGiantOnField = regExpSetMatcher(msg.text, {
      regexpSet: regexps.giantFacedOnField,
    });

    const isDungeonBeastFaced = regExpSetMatcher(msg.text, {
      regexpSet: regexps.dungeonBeastFaced,
    });

    const isHaloDungeonBeastFaced = regExpSetMatcher(msg.text, {
      regexpSet: regexps.haloDungeonBeastFaced,
    });

    const isRegularBeast = regExpSetMatcher(msg.text, {
      regexpSet: regexps.regularBeast,
    });

    const isFlee = regExpSetMatcher(msg.text, {
      regexpSet: regexps.flee,
    });

    const isLocation = regExpSetMatcher(msg.text, {
      regexpSet: regexps.location,
    });

    const isDungeonBeast = regExpSetMatcher(msg.text, {
      regexpSet: regexps.dungeonBeast,
    });

    /* const isLocation = regExpSetMatcher(msg.text, {
            regexpSet: regexps.location
        });

        const isDungeonBeast = regExpSetMatcher(msg.text, {
            regexpSet: regexps.dungeonBeast
        });

        const isFlee = regExpSetMatcher(msg.text, {
            regexpSet: regexps.flee
        }); */

    if (isClassicPip || isSimplePip) {
      const pip = parsePip(msg, isClassicPip);
      let reply;

      updateOrCreate(msg, pip, (result) => {
        if (!result.ok && result.reason === 'PIP_VALIDATION_FAILED') {
          reply = `–Ø –Ω–µ –≤–∏–∂—É —á—Ç–æ –±—ã —Ç—ã –ø—Ä–æ–∫–∞—á–∞–ª –∫–∞–∫–∏–µ-—Ç–æ —Å–∫–∏–ª—ã :c
–°–∫–∏–¥—ã–≤–∞–π –ø–∏–ø-–±–æ–π –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∫–∞—á–∞–µ—à—å—Å—è!`;
        }

        if (!result.ok && result.reason === 'PIP_OUTDATED') {
          reply = '–£ –º–µ–Ω—è –≤ –±–∞–∑–µ –µ—Å—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–æ —Ç–≤–æ–π –ø–∏–ø-–±–æ–π';
        }

        if (result.ok && result.reason === 'USER_CREATED') {
          reply = `
–°—É–ø–µ—Ä, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ç–≤–æ–π –ø–∏–ø!
–ù–µ –∑–∞–±—ã–≤–∞–π —Å–∫–∏–¥—ã–≤–∞—Ç—å –º–Ω–µ —Å–≤–æ–π –ø–∏–ø-–±–æ–π –ø–æ –º–µ—Ä–µ —Ç–æ–≥–æ –∫–∞–∫ –±—É–¥–µ—à—å –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å —Å–∫–∏–ª—ã!`;
        }

        if (result.ok && result.reason === 'USER_UPDATED') {
          reply = `–®–∏–∫–∞—Ä–¥–æ—Å, —è –æ–±–Ω–æ–≤–∏–ª —Ç–≤–æ–π –ø–∏–ø!
–ù–µ –∑–∞–±—É–¥—å —Å–∫–∏–Ω—É—Ç—å –Ω–æ–≤—ã–π –ø–∏–ø, –∫–æ–≥–¥–∞ –∫–∞—á–Ω–µ—à—å—Å—è!`;
        }

        return msg.reply.text(reply, {
          asReply: true,
          replyMarkup: toSkillOMaticKeyboard,
        }).catch(e => console.log(e));
      });
    } else if (isGiantFaced) {
      const giant = parseGiantFaced(msg.text);

      Giant.findOne({
        name: giant.name,
      }).then((fGiant) => {
        const databaseGiant = fGiant;
        if (databaseGiant === null) {
          const newGiant = new Giant({
            distance: giant.distance,
            name: giant.name,
            health: {
              current: giant.healthCurrent,
              cap: giant.healthCap,
            },
            forwardStamp: msg.forward_date,
          });

          newGiant.save().then(() => {
            userManager.addPoints(msg.from.id, forwardPoints.discoveryGiantData).then((result) => {
              if (!result.ok) {
                if (result.reason === 'USER_NOT_FOUND') {
                  return msg.reply.text('–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ç–µ–±–µ —à–º–µ–ø—Å–µ–ª–∏ –ø–æ–∫–∞ —Ç—ã –Ω–µ —Å–∫–∏–Ω–µ—à—å –º–Ω–µ —Å–≤–æ–π –ø–∏–ø-–±–æ–π :—Å');
                }
              }

              return msg.reply.text(`–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ä–≤–∞—Ä–¥! –Ø –¥–æ–±–∞–≤–∏–ª <b>${giant.name}</b> –≤ –±–∞–∑—É!\n–ù–∞—á–∏—Å–ª–∏–ª —Ç–µ–±–µ ${forwardPoints.discoveryGiantData} üíé<b>–®–º–µ–ø—Å–µ–ª–µ–π</b>`, {
                asReply: true,
                parseMode: 'html',
              });
            });
          }).catch(e => console.log(e));
        } else {
          if (databaseGiant.forwardStamp >= msg.forward_date) {
            return msg.reply.text(`–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è –µ—Å—Ç—å –±–æ–ª–µ–µ —Å–≤–µ–∂–∞—è –∏—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ *${giant.name}*`, {
              asReply: true,
              parseMode: 'markdown',
            });
          }
          databaseGiant.health.current = giant.healthCurrent;
          databaseGiant.health.cap = giant.healthCap;
          databaseGiant.forwardStamp = msg.forward_date;

          if (!databaseGiant.distance) {
            databaseGiant.distance = giant.distance;
          }

          const wasDead = databaseGiant.health.current <= 0;
          const isDead = giant.healthCurrent <= 0;

          const pointsToAdd = ((!wasDead && isDead) || (wasDead && !isDead)) ? forwardPoints.newGiantData : forwardPoints.sameGiantData;

          databaseGiant.save().then(() => {
            userManager.addPoints(msg.from.id, pointsToAdd).then((result) => {
              if (!result.ok) {
                if (result.reason === 'USER_NOT_FOUND') {
                  return msg.reply.text('–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ç–µ–±–µ —à–º–µ–ø—Å–µ–ª–∏ –ø–æ–∫–∞ —Ç—ã –Ω–µ —Å–∫–∏–Ω–µ—à—å –º–Ω–µ —Å–≤–æ–π –ø–∏–ø-–±–æ–π :—Å');
                }
              }

              return msg.reply.text(`–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ä–≤–∞—Ä–¥! –Ø –æ–±–Ω–æ–≤–∏–ª <b>${giant.name}</b> –≤ –±–∞–∑–µ!\n–ù–∞—á–∏—Å–ª–∏–ª —Ç–µ–±–µ ${pointsToAdd} üíé<b>–®–º–µ–ø—Å–µ–ª–µ–π</b>`, {
                asReply: true,
                parseMode: 'html',
              });
            });
          }).catch(e => console.log(e));
        }

        return false;
      });
    } else if (isGiantFought) {
      const giant = parseGiant(msg.text);

      Giant.findOne({
        name: giant.name,
      }).then((fGiant) => {
        const databaseGiant = fGiant;
        if (databaseGiant === null) {
          const newGiant = new Giant({
            name: giant.name,
            health: {
              current: giant.healthCurrent,
              cap: giant.healthCap,
            },
            forwardStamp: msg.forward_date,
          });

          newGiant.save().then(() => {
            userManager.addPoints(msg.from.id, forwardPoints.discoveryGiantData).then((result) => {
              if (!result.ok) {
                if (result.reason === 'USER_NOT_FOUND') {
                  return msg.reply.text('–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ç–µ–±–µ —à–º–µ–ø—Å–µ–ª–∏ –ø–æ–∫–∞ —Ç—ã –Ω–µ —Å–∫–∏–Ω–µ—à—å –º–Ω–µ —Å–≤–æ–π –ø–∏–ø-–±–æ–π :—Å');
                }
              }

              return msg.reply.text(`–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ä–≤–∞—Ä–¥! –Ø –¥–æ–±–∞–≤–∏–ª <b>${giant.name}</b> –≤ –±–∞–∑—É!\n–ù–∞—á–∏—Å–ª–∏–ª —Ç–µ–±–µ ${forwardPoints.discoveryGiantData} üíé<b>–®–º–µ–ø—Å–µ–ª–µ–π</b>`, {
                asReply: true,
                parseMode: 'html',
              });
            });
          }).catch(e => console.log(e));
        } else if (databaseGiant.forwardStamp >= msg.forward_date) {
          return msg.reply.text(`–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è –µ—Å—Ç—å –±–æ–ª–µ–µ —Å–≤–µ–∂–∞—è –∏—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ *${giant.name}*`, {
            asReply: true,
            parseMode: 'markdown',
          });
        } else {
          databaseGiant.health.current = giant.healthCurrent;
          databaseGiant.health.cap = giant.healthCap;
          databaseGiant.forwardStamp = msg.forward_date;

          const wasDead = databaseGiant.health.current <= 0;
          const isDead = giant.healthCurrent <= 0;

          const pointsToAdd = ((!wasDead && isDead) || (wasDead && !isDead)) ? forwardPoints.newGiantData : forwardPoints.sameGiantData;

          databaseGiant.save().then(() => {
            userManager.addPoints(msg.from.id, pointsToAdd).then((result) => {
              if (!result.ok) {
                if (result.reason === 'USER_NOT_FOUND') {
                  return msg.reply.text('–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ç–µ–±–µ —à–º–µ–ø—Å–µ–ª–∏ –ø–æ–∫–∞ —Ç—ã –Ω–µ —Å–∫–∏–Ω–µ—à—å –º–Ω–µ —Å–≤–æ–π –ø–∏–ø-–±–æ–π :—Å');
                }
              }

              return msg.reply.text(`–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ä–≤–∞—Ä–¥! –Ø –æ–±–Ω–æ–≤–∏–ª <b>${giant.name}</b> –≤ –±–∞–∑–µ!\n–ù–∞—á–∏—Å–ª–∏–ª —Ç–µ–±–µ ${pointsToAdd} üíé<b>–®–º–µ–ø—Å–µ–ª–µ–π</b>`, {
                asReply: true,
                parseMode: 'html',
              });
            });
          }).catch(e => console.log(e));
        }

        return false;
      });
    } else if (isGiantOnField) {
      const giant = parseGiantOnField(msg.text);

      Giant.findOne({
        name: giant.name,
      }).then((fGiant) => {
        const databaseGiant = fGiant;
        if (fGiant === null) {
          return msg.reply.text(`–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –∑–Ω–∞—é –Ω–∞ –∫–∞–∫–æ–º –∫–∏–ª–æ–º–µ—Ç—Ä–µ –∂–∏–≤—ë—Ç <b>${giant.name}</b>. –¢—ã –º–æ–∂–µ—à—å —Å–Ω–∞—á–∞–ª–∞ —Å–∫–∏–Ω—É—Ç—å –ª–æ–∫–∞—Ü–∏—é —Å —ç—Ç–∏–º –±–æ—Å—Å–æ–º, –∞ –ø–æ—Ç–æ–º —Å–≤–æ—é –±–∏—Ç–≤—É.`, {
            asReply: true,
            parseMode: 'html',
          });
        } if (fGiant.forwardStamp >= msg.forward_date) {
          return msg.reply.text(`–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è –µ—Å—Ç—å –±–æ–ª–µ–µ —Å–≤–µ–∂–∞—è –∏—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ *${giant.name}*`, {
            asReply: true,
            parseMode: 'markdown',
          });
        }

        databaseGiant.health.current = giant.healthCurrent;
        databaseGiant.health.cap = giant.healthCap;
        databaseGiant.forwardStamp = msg.forward_date;

        const wasDead = databaseGiant.health.current <= 0;
        const isDead = giant.healthCurrent <= 0;

        const pointsToAdd = ((!wasDead && isDead) || (wasDead && !isDead)) ? forwardPoints.newGiantData : forwardPoints.sameGiantData;

        databaseGiant.save().then(() => {
          userManager.addPoints(msg.from.id, pointsToAdd).then((result) => {
            if (!result.ok) {
              if (result.reason === 'USER_NOT_FOUND') {
                return msg.reply.text('–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ç–µ–±–µ —à–º–µ–ø—Å–µ–ª–∏ –ø–æ–∫–∞ —Ç—ã –Ω–µ —Å–∫–∏–Ω–µ—à—å –º–Ω–µ —Å–≤–æ–π –ø–∏–ø-–±–æ–π :—Å');
              }
            }

            return msg.reply.text(`–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ä–≤–∞—Ä–¥! –Ø –æ–±–Ω–æ–≤–∏–ª <b>${giant.name}</b> –≤ –±–∞–∑–µ!\n–ù–∞—á–∏—Å–ª–∏–ª —Ç–µ–±–µ ${pointsToAdd} üíé<b>–®–º–µ–ø—Å–µ–ª–µ–π</b>`, {
              asReply: true,
              parseMode: 'html',
            });
          });
        }).catch(e => console.log(e));

        return false;
      });
    } else if (isRegularBeastFaced) {
      const beast = parseBeastFaced.parseRegularBeastFaced(msg.text);

      routedBeastView(Beast, {
        name: beast.name,
        type: beast.type,
        isDungeon: false,
        subType: 'regular',
      }, null, {
        env: process.env.ENV,
        VERSION,
      }).then(({ reply, beast }) => {
        if (reply !== false) {
          const beastReplyMarkup = getBeastKeyboard(beast._id.toJSON());

          return msg.reply.text(reply, {
            replyMarkup: beastReplyMarkup,
            parseMode: 'html',
          }).catch(e => console.log(e));
        }
        return msg.reply.text('–ü—Ä–æ—Å—Ç–∏, —è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—ã—à–∞–ª –ø—Ä–æ —ç—Ç–æ–≥–æ –º–æ–±–∞ :c', {
          asReply: true,
        }).catch(e => console.log(e));
      }).catch(e => console.log(e));
    } else if (isWalkingBeastFaced) {
      const beast = parseBeastFaced.parseWalkingBeastFaced(msg.text);

      Beast.findOne({
        name: new RegExp(beast.name, 'i'),
        subType: 'walking',
      }).then((fBeast) => {
        if (fBeast !== null) {
          return msg.reply.text(`–•–µ–π, —É –º–µ–Ω—è –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ –≥—É–ª—è—é—â–µ–≥–æ *${beast.name}*, –Ω–æ —è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —É–º–µ—é –∏—Ö –≤—ã–≤–æ–¥–∏—Ç—å, –ø—Ä–æ—Å—Ç–∏ :—Å`, {
            asReply: true,
            parseMode: 'markdown',
          }).catch(e => console.log(e));
        }

        return msg.reply.text(`–ß—ë—Ä—Ç, —è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—ã—à–∞–ª –ø—Ä–æ –≥—É–ª—è—é—â–µ–≥–æ *${beast.name}*, –ø—Ä–æ—Å—Ç–∏ :—Å`, {
          asReply: true,
          parseMode: 'markdown',
        });
      }).catch(e => console.log(e));
    } else if (isDungeonBeastFaced) {
      const oBeast = parseBeastFaced.parseDungeonBeastFaced(msg.text);

      routedBeastView(Beast, {
        name: oBeast.name,
        isDungeon: true,
      }, null, {
        env: process.env.ENV,
        VERSION,
      }).then(({ reply }) => {
        if (reply !== false) {
          /* const beastReplyMarkup = getBeastKeyboard(beast._id.toJSON());

                    return msg.reply.text(reply,{
                        replyMarkup: beastReplyMarkup,
                        parseMode: 'html'
                    }).catch(e => console.log(e)); */
          msg.reply.text(`–•–µ–π, —É –º–µ–Ω—è –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ *${oBeast.name}*, –Ω–æ —è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —É–º–µ—é –∏—Ö –≤—ã–≤–æ–¥–∏—Ç—å, –ø—Ä–æ—Å—Ç–∏ :—Å`, {
            asReply: true,
            parseMode: 'markdown',
          }).catch(e => console.log(e));
        } else {
          return msg.reply.text(`–ß—ë—Ä—Ç, —è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—ã—à–∞–ª –ø—Ä–æ *${oBeast.name}*, –ø—Ä–æ—Å—Ç–∏ :—Å`, {
            asReply: true,
            parseMode: 'markdown',
          }).catch(e => console.log(e));
        }

        return false;
      }).catch(e => console.log(e));
    } else if (isHaloDungeonBeastFaced) {
      const oBeast = parseBeastFaced.parseHaloDungeonBeastFaced(msg.text);

      routedBeastView(Beast, {
        name: oBeast.name,
        isDungeon: true,
      }, null, {
        env: process.env.ENV,
        VERSION,
      }).then(({ reply }) => {
        if (reply !== false) {
          /* const beastReplyMarkup = getBeastKeyboard(beast._id.toJSON());

                    return msg.reply.text(reply,{
                        replyMarkup: beastReplyMarkup,
                        parseMode: 'html'
                    }).catch(e => console.log(e)); */
          msg.reply.text(`–•–µ–π, —É –º–µ–Ω—è –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ *${oBeast.name}*, –Ω–æ —è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —É–º–µ—é –∏—Ö –≤—ã–≤–æ–¥–∏—Ç—å, –ø—Ä–æ—Å—Ç–∏ :—Å`, {
            asReply: true,
            parseMode: 'markdown',
          }).catch(e => console.log(e));
        } else {
          return msg.reply.text(`–ß—ë—Ä—Ç, —è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—ã—à–∞–ª –ø—Ä–æ *${oBeast.name}*, –ø—Ä–æ—Å—Ç–∏ :—Å`, {
            asReply: true,
            parseMode: 'markdown',
          }).catch(e => console.log(e));
        }

        return false;
      }).catch(e => console.log(e));
    } else if (isRegularBeast || isFlee || isDungeonBeast) {
      // || isLocation || isDungeonBeast || isFlee
      let data;
      let dataType;

      createSession(msg.from.id);

      if (isFlee) {
        data = parseFlee(msg.text);
        dataType = 'flee';
      } else if (isRegularBeast) {
        data = beastParser.parseRegularBeast(msg.text);
        dataType = 'regularBeast';
      } else if (isDungeonBeast) {
        data = beastParser.parseRegularBeast(msg.text);
        dataType = 'dungeonBeast';
      }

      /* if (isDungeonBeast) {
                data = beastParser.parseDungeonBeast(msg.text);
                dataType = 'dungeonBeast';
            } else if (isFlee) {
                data = parseFlee(msg.text);
                dataType = 'flee';
            } else if (isRegularBeast) {
                data = beastParser.parseRegularBeast(msg.text);
                dataType = 'regularBeast';
            } else if (isLocation) {
                data = parseLocation(msg.text);
                dataType = 'location';
            } */

      sessions[msg.from.id].data.push({
        data,
        dataType,
        date: msg.forward_date,
        userId: msg.from.id,
      });

      processUserData(msg, {
        usePip: sessions[msg.from.id].processDataConfig.usePip,
        useBeastFace: sessions[msg.from.id].processDataConfig.useBeastFace,
        silent: true,
      });
    } else if (isLocation && !isGiantFaced) {
      const location = parseLocation(msg.text);

      Giant.findOne({
        distance: location.distance,
      }).then((databaseGiant) => {
        if (databaseGiant !== null) {
          if (databaseGiant.forwardStamp >= msg.forward_date) {
            return msg.reply.text('–ü—Ä–æ—Å—Ç–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–≥—É —Å —ç—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å ü§∑‚Äç‚ôÇÔ∏è', {
              asReply: true,
              parseMode: 'markdown',
            });
          }

          const wasDead = databaseGiant.health.current <= 0;
          const isDead = 0;

          if (wasDead !== isDead) {
            databaseGiant.health.current = 0;
            databaseGiant.forwardStamp = msg.forward_date;

            databaseGiant.save().then(() => {
              userManager.addPoints(msg.from.id, forwardPoints.newGiantData).then((result) => {
                if (!result.ok) {
                  if (result.reason === 'USER_NOT_FOUND') {
                    msg.reply.text('–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ç–µ–±–µ —à–º–µ–ø—Å–µ–ª–∏ –ø–æ–∫–∞ —Ç—ã –Ω–µ —Å–∫–∏–Ω–µ—à—å –º–Ω–µ —Å–≤–æ–π –ø–∏–ø-–±–æ–π :—Å');
                  }
                }

                return msg.reply.text(`–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ä–≤–∞—Ä–¥! –Ø –æ–±–Ω–æ–≤–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ <b>${databaseGiant.name}</b> –≤ –±–∞–∑–µ!\n–ù–∞—á–∏—Å–ª–∏–ª —Ç–µ–±–µ ${forwardPoints.newGiantData} üíé<b>–®–º–µ–ø—Å–µ–ª–µ–π</b>`, {
                  asReply: true,
                  parseMode: 'html',
                });
              });
            }).catch(e => console.log(e));
          }
        } else {
          return msg.reply.text('–ü—Ä–æ—Å—Ç–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–≥—É —Å —ç—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å ü§∑‚Äç‚ôÇÔ∏è', {
            asReply: true,
            parseMode: 'markdown',
          });
        }

        return false;
      });
    }
  }

  return false;
});

bot.on([
  '/levelUpHealth',
  '/levelUpStrength',
  '/levelUpAccuracy',
  '/levelUpCharisma',
  '/levelUpAgility',
], (msg) => {
  sessions[msg.from.id].upgradeSkill = msg.text;
  sessions[msg.from.id].state = states.WAIT_FOR_DISTANCE;

  askReachableKm(msg);
});

bot.on('/reachableKm', (msg) => {
  sessions[msg.from.id].reachableKm = msg.text;
  sessions[msg.from.id].state = states.WAIT_FOR_LEVELS;

  askAmountOfLevels(msg);
});

bot.on('/locs_text', msg => msg.reply.text(`
[8 –∫–º] üßô‚Äç‚ôÇ –ë–µ–∑—É–º–Ω—ã–π —Å—Ç–∞—Ä–∏–∫
[11–∫–º] ‚õ∞ –°—Ç–∞—Ä–∞—è —à–∞—Ö—Ç–∞
[13–∫–º] ‚ö°Ô∏è –ö—É–ø–æ–ª –ì—Ä–æ–º–∞
[15–∫–º] üõ§ –û—Ä–µ–æ–ª
[19–∫–º] ‚ö†Ô∏è –ü–µ—â–µ—Ä–∞ –û—Ä–µ–æ–ª–∞
[23–∫–º] üöΩ –°—Ç–æ—á–Ω–∞—è —Ç—Ä—É–±–∞
-26–∫–º- üóø –†–∞–¥–∏–æ–∞–∫—Ç–∏–≤. –ì–æ–ª–µ–º
[27–∫–º] üèÉüèø –ë–µ–ª–æ–µ –≥–µ—Ç—Ç–æ
[29–∫–º] ‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç–æ–µ –£–±–µ–∂–∏—â–µ
[30–∫–º] üïé –Ø–¥—Ä–æ
[34–∫–º] ü¶á –ë—ç—Ç-–ø–µ—â–µ—Ä–∞
-36–∫–º- ü§ñ –ö–∏–±–æ—Ä–≥ –ê–Ω–∫–ª–∞–≤–∞
[39–∫–º] ü¶Ü –ü–µ—Ä–µ–≤–∞–ª –£—Ç–∫–∏–Ω–∞
[43–∫–º] üö™ –£—é—Ç–Ω—ã–π –ø–æ–¥–≤–∞–ª—å—á–∏–∫
-44–∫–º- üëπ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ü—É—Å—Ç–æ—à–∏
[45–∫–º] üåÅ –í—ã—Å–æ–∫–∏–π –•—Ä–æ—Ç–≥–∞—Ä
[50–∫–º] üî¥ –†—É–∏–Ω—ã –ì–µ–∫—Å–∞–≥–æ–Ω–∞
[51–∫–º] üõè –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–∏–≤–∞–ª
-55–∫–º- ‚ò†Ô∏è –ö–∏–±–µ—Ä–∫–æ–≥–æ—Ç—å
[56–∫–º] üî¨ –ù–∞—É—á–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å
-64–∫–º- üê∫ –Ø–æ-–ì–∏–≥–∞–Ω—Ç
[69–∫–º] ‚õ© –•—Ä–∞–º –ú—É–¥—Ä–æ—Å—Ç–∏
[74–∫–º] üëÅ‚Äçüó® –ß—ë—Ä–Ω–∞—è –ú–µ–∑–∞
    `, {
  webPreview: false,
}));

bot.on('/raids_text', msg => msg.reply.text(`
–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –¢–†–ò —Ä–µ–π–¥–∞ —Å –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–º –≤ –í–û–°–ï–ú–¨ —á–∞—Å–æ–≤ (–ø–æ –ú–°–ö):
<b>01:00</b> - <b>09:00</b> - <b>17:00</b>

<b>–°—Ç–∞—Ä–∞—è —Ñ–∞–±—Ä–∏–∫–∞</b>
[5–∫–º] üì¶–ú–∞—Ç–µ—Ä–∏–∞–ª—ã

<b>–ó–∞–≤–æ–¥ "–Ø–¥–µ—Ä-–ö–æ–ª–∞"</b>
[9–∫–º] üï≥–ö—Ä—ã—à–∫–∏

<b>–¢—é—Ä—å–º–∞</b>
[12–∫–º] üíä–í–µ—â–µ—Å—Ç–≤–∞

<b>–°–∫–ª–∞–¥—ã</b>
[16–∫–º] üçó–ï–¥–∞

<b>–î–∞—Ç–∞—Ü–µ–Ω—Ç—Ä</b>
[20–∫–º] üîπ–ö–≤–∞—Ä—Ü

<b>–ì–æ—Å–ø–∏—Ç–∞–ª—å</b>
[24–∫–º] ‚ù§Ô∏è–õ–µ—á–µ–Ω–∏–µ

<b>–ó–∞–≤–æ–¥ "–≠–ª–µ–∫—Ç—Ä–æ–Ω"</b>
[28–∫–º] üí°–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã

<b>–û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ</b>
[32–∫–º] üíæ–ú–∏–∫—Ä–æ—á–∏–ø—ã

<b>–ò—Ä–∏–¥–∏–µ–≤—ã–µ —à–∞—Ö—Ç—ã</b>
[38–∫–º] üî©–ò—Ä–∏–¥–∏–π

<b>–°–∫–ª–∞–¥ –º–µ—Ç–∞–ª–ª–∞</b>
[46–∫–º] üîó–ö—É–±–æ–Ω–∏—Ç
    `, {
  webPreview: false,
  parseMode: 'html',
}));

bot.on('/upgradeSkill', (msg) => {
  if (msg.text === '–ú–ê–ö–°–ò–ú–ê–õ–û–ß–ö–ê') {
    getEffort(msg, true);
  } else {
    getEffort(msg);
  }
});

bot.on(['/journeyforwardstart', '/go'], (msg) => {
  createSession(msg.from.id);

  const inlineReplyMarkup = bot.inlineKeyboard([
    [
      bot.inlineButton('üìü –ü–µ—Ä–µ–π—Ç–∏ –≤ –∏–≥—Ä—É.', { url: 'https://t.me/WastelandWarsBot' }),
    ],
  ]);

  sessions[msg.from.id].state = states.WAIT_FOR_FORWARD_END;
  const replyMarkup = bot.keyboard([
    [
      buttons.journeyForwardEnd.label,
      buttons.journeyForwardCancel.label,
    ],
  ], {
    resize: true,
  });

  msg.reply.text(`
–•–µ–π, –≤–∏–∂—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π —Ü–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —Å –ø—É—Å—Ç–æ—à–∏ - –æ—Ç–ª–∏—á–Ω–æ!
*–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é*:
 - –ë–æ–π —Å –º–æ–±–æ–º
 - –ü–æ–±–µ–≥ –æ—Ç –º–æ–±–∞
 - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏(–∫–∏–ª–æ–º–µ—Ç—Ä–µ)

–û–±—Ä–∞–±–æ—Ç–∞–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —è –∑–∞–Ω–µ—Å—É –≤ –±–∞–∑—É, –∫–æ—Ç–æ—Ä–∞—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –∞ —Ç–µ–±–µ –≤ –Ω–∞–≥—Ä–∞–¥—É –æ—Ç—Å—ã–ø–ª—é –ø–∞—Ä—É üíé*–®–º–µ–ø—Å–µ–ª–µ–π*
    `, {
    replyMarkup,
    parseMode: 'markdown',
  }).then(() => msg.reply.text(`
*–Ø —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ –∑–∞ –æ–¥–∏–Ω –∫—Ä—É–≥/–≤—ã–ª–∞–∑–∫—É - –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –≤—ã–ª–∞–∑–∫–∏ —è –ø–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ —Å–º–æ–≥—É :—Å*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –ø–µ—Ä–µ—à–ª—ë—à—å _–≤—Å–µ_ —Å–æ–æ–±—â–µ–Ω–∏—è - –¢–µ–ª–µ–≥—Ä–∞–º –º–æ–∂–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∏—Ç–æ—Ä–º–∞–∂–∏–≤–∞—Ç—å.
–ù—É –∞ –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å - —Å–º–µ–ª–æ –∂–º–∏ –∫–Ω–æ–ø–∫—É \`[üôÖ‚Äç‚ôÇÔ∏è –°—Ç–æ–ø]\`!
            `, {
    replyMarkup: inlineReplyMarkup,
    parseMode: 'markdown',
  })).catch(e => console.log(e));
});


bot.on('/journeyforwardend', (msg) => {
  if (sessions[msg.from.id] === undefined) {
    createSession(msg.from.id);

    return msg.reply.text('–ß—ë—Ä—Ç, –ø–æ—Ö–æ–∂–µ –º–µ–Ω—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª –∫–∞–∫–æ–π-—Ç–æ –º—É–¥–∞–∫ –∏ —Ç–≤–æ–∏ —Ñ–æ—Ä–≤–∞—Ä–¥—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å, –ø—Ä–æ—Å—Ç–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ :—Å', {
      replyMarkup: defaultKeyboard,
    });
  }
  sessions[msg.from.id].state = states.WAIT_FOR_DATA_TO_PROCESS;

  // console.log(JSON.stringify(sessions[msg.from.id].data));
  return processUserData(msg, {
    usePip: sessions[msg.from.id].processDataConfig.usePip,
    useBeastFace: sessions[msg.from.id].processDataConfig.useBeastFace,
  });
});

bot.on('/skippipforward', (msg) => {
  msg.reply.text('–û–∫–µ–π, —Å–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á—Ç–æ —Å–º–æ–≥—É');

  sessions[msg.from.id].processDataConfig.usePip = false;

  processUserData(msg, {
    usePip: sessions[msg.from.id].processDataConfig.usePip,
    useBeastFace: sessions[msg.from.id].processDataConfig.useBeastFace,
  });
});

bot.on(['/skipbeastforward', '/skipbeastforwards'], (msg) => {
  if (_.isEmpty(sessions)) {
    return msg.reply.text('–°–ª—É—à–∞–π, –∞ –º–Ω–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –Ω–µ—á–µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å. –ú–æ–∂–µ—Ç –º–µ–Ω—è –æ–ø—è—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø–∏–¥–æ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª, –Ω–µ –∑–Ω–∞–µ—à—å?', {
      asReply: true,
      replyMarkup: defaultKeyboard,
    });
  }

  sessions[msg.from.id].beastsToValidate.forEach((beast) => {
    sessions[msg.from.id].data = sessions[msg.from.id].data.map((entry) => {
      if (entry.date === beast.date) {
        return {
          ...entry,
          ignore: true,
        };
      }

      return entry;
    });
  });


  msg.reply.text('–û–∫–µ–π, –æ–±—Ä–∞–±–æ—Ç–∞—é —á—Ç–æ —Å–º–æ–≥—É').then(() => {
    sessions[msg.from.id].state = states.WAIT_FOR_DATA_TO_PROCESS;
    sessions[msg.from.id].processDataConfig.useBeastFace = false;
    sessions[msg.from.id].beastsToValidate = [];

    processUserData(msg, {
      usePip: sessions[msg.from.id].processDataConfig.usePip,
      useBeastFace: sessions[msg.from.id].processDataConfig.useBeastFace,
    });
  });
});


bot.on('/version', (msg) => {
  msg.reply.text(`–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ - <b>${config.version}</b> [Œ≤]`, {
    asReply: true,
    parseMode: 'html',
  });
});

bot.on('/eqp', (msg) => {
  // TODO: Inline button resize
  const processMenuButtons = processMenu(equipmentMenu).map(menuItem => bot.inlineButton(menuItem.title, { callback: `equipment_menu-${menuItem.name}` }));

  const inlineReplyMarkup = bot.inlineKeyboard(_.chunk(processMenuButtons, 3));

  return msg.reply.text(equipmentMenu.text, {
    parseMode: 'markdown',
    replyMarkup: inlineReplyMarkup,
  }).catch(e => console.log(e));
});

bot.on('/locations', (msg) => {
  const processMenuButtons = processMenu(locationsMenu).map(menuItem => bot.inlineButton(menuItem.title, { callback: `locations_menu-${menuItem.name}` }));

  const inlineReplyMarkup = bot.inlineKeyboard(_.chunk(processMenuButtons, 3));

  return msg.reply.text(locationsMenu.text, {
    parseMode: 'html',
    replyMarkup: inlineReplyMarkup,
  }).catch(e => console.log(e));
});

bot.on('/sppl', (msg) => {
  const processMenuButtons = processMenu(suppliesMenu).map(menuItem => bot.inlineButton(menuItem.title, { callback: `supplies_menu-${menuItem.name}` }));

  const inlineReplyMarkup = bot.inlineKeyboard(_.chunk(processMenuButtons, 3));

  return msg.reply.text(suppliesMenu.text, {
    parseMode: 'html',
    replyMarkup: inlineReplyMarkup,
  }).catch(e => console.log(e));
});

bot.on('/achv', (msg) => {
  const processMenuButtons = processMenu(achievementsMenu).map(menuItem => bot.inlineButton(menuItem.title, { callback: `achievements_menu-${menuItem.name}` }));

  const inlineReplyMarkup = bot.inlineKeyboard(_.chunk(processMenuButtons, 3));

  return msg.reply.text(achievementsMenu.text, {
    parseMode: 'markdown',
    replyMarkup: inlineReplyMarkup,
  }).catch(e => console.log(e));
});

bot.on('/dng', (msg) => {
  const processMenuButtons = processMenu(dungeonMenu).map(menuItem => bot.inlineButton(menuItem.title, { callback: `dungeons_menu-${menuItem.name}` }));

  const inlineReplyMarkup = bot.inlineKeyboard(_.chunk(processMenuButtons, 2));

  return msg.reply.text(dungeonMenu.text, {
    parseMode: 'html',
    replyMarkup: inlineReplyMarkup,
    webPreview: false,
  }).catch(e => console.log(e));
});

bot.on('/commands_for_lag', msg => msg.reply.text(commandsForLag, {
  parseMode: 'html',
}).catch(e => console.log(e)));

bot.on('/skill_upgrade', (msg) => {
  const skillOMaticText = `
–í ¬´<b>üéì –°–∫–∏–ª–æ–∫–∞—á–∞—Ç–æ—Ä–µ</b>¬ª —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–∫–∞—á–∫—É —Ç–≤–æ–∏—Ö —Å–∫–∏–ª–æ–≤.`;

  findPip(msg, (result) => {
    if (result.ok && result.reason === 'USER_FOUND') {
      if (sessions[msg.from.id] === undefined) {
        createSession(msg.from.id);
      }

      sessions[msg.from.id].pip = result.data.pip;
      sessions[msg.from.id].state = states.WAIT_FOR_SKILL;

      const replyMarkup = bot.keyboard([
        [buttons.skillSelectStrength.label, buttons.skillSelectAccuracy.label, buttons.skillSelectAgility.label],
        [buttons.skillSelectHealth.label, buttons.skillSelectCharisma.label],
        [buttons.cancelAction.label],
      ], {
        resize: true,
      });

      const skillMap = {
        health: '‚ù§ –ñ–∏–≤—É—á–µ—Å—Ç—å',
        strength: 'üí™ –°–∏–ª–∞',
        precision: 'üî´ –ú–µ—Ç–∫–æ—Å—Ç—å',
        charisma: 'üó£ –•–∞—Ä–∏–∑–º–∞',
        agility: 'ü§∏‚Äç‚ôÄÔ∏è –õ–æ–≤–∫–æ—Å—Ç—å',
      };

      const userSkills = Object.keys(skillMap).map((key) => {
        const skillName = skillMap[key];

        return `<b>${skillName}</b>: ${result.data.pip[key]}`;
      });

      return msg.reply.text(`
${skillOMaticText}

–í–æ—Ç —á—Ç–æ —è –∑–Ω–∞—é –ø—Ä–æ —Ç–≤–æ–∏ —Å–∫–∏–ª—ã:
${userSkills.join('\n')}
<i>(–ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –ø–∏–ø-–±–æ–π)</i>


<b>–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–π —Å–∫–∏–ª —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–∫–∞—á–∞—Ç—å</b>

–ß—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <code>[‚Ü©Ô∏è–ù–∞–∑–∞–¥]</code>.
–õ–∏–±–æ, –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–ø–∏—à–∏ /cancel.
            `, {
        replyMarkup,
        parseMode: 'html',
      });
    }

    return msg.reply.text(`
${skillOMaticText}

–û—É, –ø–æ—Ö–æ–∂–µ —è –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é –ø—Ä–æ —Ç–≤–æ–π –ø–∏–ø - –±–µ–∑ –Ω–µ–≥–æ —è –Ω–µ —Å–º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å :—Å
–ü–µ—Ä–µ–π–¥–∏ –≤ –∏–≥—Ä—É –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É –∏ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –µ–≥–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!
        `, {
      replyMarkup: toGameKeyboard,
      parseMode: 'html',
    });
  });
});

bot.on(['/leaderboard', '/top'], (msg) => {
  userManager.leaderboard(msg.from.id).then((result) => {
    if (result.ok && result.reason === 'LEADERBOARD_GENERATED') {
      return msg.reply.text(`<i>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –æ—Ç–ø—Ä–∞–ª—è—é—â–∏—Ö —Ñ–æ—Ä–≤–∞—Ä–¥—ã:</i> \n\n${result.data}`, {
        parseMode: 'html',
      });
    }
    if (result.reason === 'NO_USERS_FOUND') {
      return msg.reply.text('–í –±–∞–∑–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç —é–∑–µ—Ä–æ–≤ :—Å');
    }

    return msg.reply.text(JSON.stringify(result));
  });
});

bot.on('/mypipstats', (msg) => {
  User.findOne({ 'telegram.id': msg.from.id }, (err, person) => {
    if (err) {
      console.log(err);
      return;
    }

    if (person === null) {
      msg.reply.text('–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Ç–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - —Ç—ã –º–Ω–µ –µ—â—ë –Ω–µ —Å–∫–∏–¥—ã–≤–∞–ª —Å–≤–æ–µ–≥–æ –ø–∏–ø-–±–æ—è');
    }

    let pips = person.history.pip.toObject();
    const pipsSize = pips.length;
    const limit = 10;

    if (pips.length <= 1) {
      msg.reply.text(
        '–Ø –Ω–µ –≤–∏–¥–µ–ª —á—Ç–æ –±—ã –ø—Ä–æ–∫–∞—á–∏–≤–∞–ª—Å—è –≤ —Å–∫–∏–ª–∞—Ö. –°–∫–∏–Ω—å —Å–≤–æ–π –ø–∏–ø-–±–æ–π –∫–æ–≥–¥–∞ –ø—Ä–æ–∫–∞—á–∞–µ—à—å –∫–∞–∫–æ–π-—Ç–æ —Å–∫–∏–ª',
        { asReply: true },
      );
    }

    if (pipsSize > limit) {
      pips = pips.slice(pipsSize - limit, pipsSize);
    }

    const whiteListKeys = [
      'health',
      'strength',
      'precision',
      'charisma',
      'agility',
    ];

    const systemToHumanKeysMap = {
      health: '–ñ–∏–≤—É—á–µ—Å—Ç—å',
      strength: '–°–∏–ª–∞',
      precision: '–ú–µ—Ç–∫–æ—Å—Ç—å',
      charisma: '–•–∞—Ä–∏–∑–º–∞',
      agility: '–õ–æ–≤–∫–æ—Å—Ç—å',
    };

    const history = {};

    whiteListKeys.forEach((key) => {
      history[key] = [];
    });

    pips.forEach((pip) => {
      Object.keys(pip).forEach((key) => {
        if (_.contains(whiteListKeys, key)) {
          const value = pip[key];

          history[key].push(value);
        }
      });
    });

    const flattify = (arr) => {
      const maxIndex = arr.length - 1;

      return arr.map((v, i) => {
        if (i !== maxIndex && i !== 0) {
          const prevValue = arr[i - 1];
          const nextValue = arr[i + 1];

          if (prevValue < v && nextValue < v) {
            return prevValue;
          }

          return v;
        } if (i === 0 || i === maxIndex) {
          return v;
        }

        return false;
      });
    };

    Object.keys(history).forEach((key) => {
      const arrayOfValues = history[key];
      history[key] = flattify(arrayOfValues);
    });

    const colors = {
      health: 'rgba(231, 76, 60,1.0)',
      strength: 'rgba(241, 196, 15,1.0)',
      precision: 'rgba(39, 174, 96,1.0)',
      charisma: 'rgba(52, 73, 94,1.0)',
      agility: 'rgba(189, 195, 199,1.0)',
    };

    const createDataSets = inputHistory => whiteListKeys.map(key => ({
      label: systemToHumanKeysMap[key],
      backgroundColor: colors[key],
      borderColor: colors[key],
      data: inputHistory[key],
      fill: false,
      lineTension: 0,
    }));

    const getDateLabels = inputPips => inputPips.map(pip => moment(pip.timeStamp * 1000).format('DD/MM'));

    const chartConfig = {
      type: 'line',
      data: {
        labels: getDateLabels(pips),
        datasets: createDataSets(history),
      },
      options: {
        scales: {
          xAxes: [
            {
              display: true,
              scaleLabel: {
                display: true,
                labelString: '–î–∞—Ç–∞',
              },
            },
          ],
          yAxes: [
            {
              display: true,
              scaleLabel: {
                display: true,
                labelString: '–£—Ä–æ–≤–µ–Ω—å',
              },
            },
          ],
        },
        legend: {
          position: 'bottom',
        },
        title: {
          display: true,
          text: '–ü—Ä–æ–≥—Ä–µ—Å –ø–æ –ü–∏–ø-–ë–æ—é',
        },
      },
    };

    chartGeneration(chartConfig, (buffer) => {
      msg.reply.photo(buffer, {
        asReply: true,
        caption: '–ü–æ–ª—É—á–∏ –∏ —Ä–∞—Å–ø–∏—à–∏—Å—å!',
      }).catch(e => console.log(e));
    });
  });
});

bot.on('/debug', (msg) => {
  createSession(msg.from.id);

  const updatesData = {
    locations: [],
    beasts: [{
      isDungeon: false,
      subType: null,
      name: 'üë§–ú–∞–π–∫–ª –ú–∞–π–µ—Ä—Å (–í–∏–Ω–æ–≤–Ω–∏–∫ —ç—Ç–æ–≥–æ —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞)',
      type: 'DarkZone',
      date: 1541030493,
      proofedByForward: false,
      distanceRange: [{ value: 64 }],
      battles: [
        {
          outcome: 'win',
          stats: { armor: 322, damage: 1384 },
          totalDamageGiven: 2599,
          totalDamageReceived: 0,
          damagesGiven: [1321, 1278],
          damagesReceived: [0],
          healthOnStart: 411,
          stamp: '154103049356019931',
          distance: 64,
        },
      ],
      receivedItems: { –ú–∏–∫—Ä–æ—á–∏–ø: [1] },
      capsReceived: [{ value: 7609 }],
      materialsReceived: [{ value: 11370 }],
    }],
  };

  const { processDataConfig: options } = sessions[msg.from.id];

  actualProcessUserData(msg, {
    errors: [],
  }, updatesData, options);
});

bot.on(/^\d+$/, (msg) => {
  switch (sessions[msg.from.id].state) {
    case states.WAIT_FOR_DISTANCE: {
      const reachableKm = Number(msg.text);

      if (reachableKm > 104) {
        msg.reply.text('–ë–ª—è, –Ω—É –Ω–µ –≥–æ–Ω–∏ - –¥–∞–≤–∞–π —á—É—Ç—å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–µ–π, –æ–∫–µ–π ?)');
      } else if (reachableKm <= 104) {
        sessions[msg.from.id].reachableKm = reachableKm;
        sessions[msg.from.id].state = states.WAIT_FOR_LEVELS;

        askAmountOfLevels(msg);
      }

      break;
    }
    case states.WAIT_FOR_LEVELS: {
      const upgradeAmount = Number(msg.text);
      const { pip } = sessions[msg.from.id];
      const skillToUpgrade = sessions[msg.from.id].upgradeSkill;

      if (upgradeAmountValidation(pip, skillToUpgrade, upgradeAmount)) {
        getEffort(msg);
      } else {
        msg.reply.text('–ß—ë—Ç–æ –¥–æ—Ö—É—è –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π —á–∏—Å–ª–æ –ø–æ–º–µ–Ω—å—à–µ.');
      }

      break;
    }
    default:
      return false;
  }

  return false;
});

bot.on('/show_drones', msg => msg.reply.text(`
üõ∞–ë–∞—Ä–∞—Ö–ª–æ ‚öôÔ∏è–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
‚öîÔ∏è10 üõ°50/50 ‚ö°Ô∏è6%

üõ∞–ú–∞–ª—ã—à ‚öôÔ∏è–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
‚öîÔ∏è18 üõ°80/80 ‚ö°Ô∏è10%

üõ∞–î–µ—Ñ–æ–ª—Ç ‚öôÔ∏è–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
‚öîÔ∏è28 üõ°120/120 ‚ö°Ô∏è12%

üõ∞–®–µ—Ä–ª–æ–∫–¥—Ä–æ–Ω ‚öôÔ∏è–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
‚öîÔ∏è12 üõ°130/130 ‚ö°Ô∏è3%
–ò–º–µ–µ—Ç –º–æ–¥—É–ª—å –†–∞–¥–∞—Ä, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤.
---------------------------------------
üõ∞Robot Rock üî´–ë–æ–µ–≤–æ–π
‚öîÔ∏è46 üõ°150/150 ‚ö°Ô∏è14%

üõ∞–†–∞–¥-–¥—Ä–æ–Ω üî´–ë–æ–µ–≤–æ–π
‚öîÔ∏è68 üõ°180/180 ‚ö°Ô∏è14%
---------------------------------------
üõ∞–ü—Ä–æ—Ç–µ–∫–¥—Ä–æ–Ω üõ°–û–±–æ—Ä–æ–Ω—è—é—â–∏–π
‚öîÔ∏è14 üõ°270/270 ‚ö°Ô∏è14%

üõ∞AWESOM-O üõ°–û–±–æ—Ä–æ–Ω—è—é—â–∏–π
‚öîÔ∏è23 üõ°420/420 ‚ö°Ô∏è16%
---------------------------------------
–ü–æ —Å—Ç–∞—Ç–∞–º:
‚öîÔ∏è - —É—Ä–æ–Ω –¥—Ä–æ–Ω–∞
üõ°- –ø—Ä–æ—á–Ω–æ—Å—Ç—å, —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –º–æ–Ω—Å—Ç—Ä–æ–≤ –∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –¥—Ä–æ–Ω—É.
‚ö°Ô∏è- —à–∞–Ω—Å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±–æ–π.
`, {
  parseMode: 'markdown',
  webPreview: false,
}));

bot.on('/show_hall_of_fame', msg => msg.reply.text(`
<code>–ó–¥–µ—Å—å —É–≤–µ–∫–æ–≤–µ—á–µ–Ω—ã –∂–∏—Ç–µ–ª–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—É—Å—Ç–æ—à–∏, –æ–∫–∞–∑–∞–≤—à–∏–µ —Ç–∏—Ç–∞–Ω–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å –Ω–∞ —ç—Ç–∞–ø–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –±–µ—Ç—ã, –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –±–æ—Ç–∞ –µ—â—ë –∫–∞–∫ –°–∫–∏–ª–æ–∫–∞—á–∞—Ç–æ—Ä–∞</code>

–°–∞–º–æ–º—É —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –≤ –ü—É—Å—Ç–æ—à–∏ - –ò–ª—å–µ (@Rev1veD) –§—É–Ω—Ç—É

–ù–∏–∑–∫–∏–π –ø–æ–∫–ª–æ–Ω –í–ª–∞–¥–∏–º–∏—Ä—É (@radueff) –ö—É–∑—å–º–∏—á—ë–≤—É - —Å–æ–∑–¥–∞—Ç–µ–ª—é –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞-—Ö–µ–ª–ø–µ—Ä–∞

–ë—É–Ω–¥–∞—Ä–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–æ—á–∫–∞ –∫–∞–Ω–∞–ª—É @chetirka_bund –∑–∞ –ø–æ–º–æ—â—å –≤ —Ä–∞—Å–ø–æ—Å—Ç—Ä–æ–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ—ã –æ –±–æ—Ç–µ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ

–Ø–¥–µ—Ä–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª—É @nushit –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –¥—Ä–æ–Ω–æ–≤
https://t.me/nushit/393

–°–æ—Ä–æ–∫ –¥–≤–∞ —Ä–∞–∑–∞ —Å–ø–∞—Å–∏–±–æ "–û—Å–Ω–æ–≤–µ" –∏ —Ç–æ–≤–∞—Ä–∏—â—É –ó–≤—ë–∑–¥–æ–ø—ã–ª—å–∫–∏–Ω—É –∑–∞ –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –ª–æ–∫–∞—Ü–∏–∏
https://t.me/trust_42/57

–û—Ç–¥–µ–ª—å–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞—Å—Ç—å —Ç–æ–≤–∞—Ä–∏—â—É @MohanMC –∑–∞ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—É—é –ø–æ–º–æ—â—å –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤

<code>üèÖ –ú–µ–¥–∞–ª—å —Å –æ—Ç–ª–∏—á–∏–µ–º —Ö3</code> –∏ <code>–û–ì–†–û–ú–ù–û–ï —Å–ø–∞—Å–∏–±–æ —Ö7</code> @K3nny2k –∑–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É–∂–∞—Å–Ω–æ–≥–æ –±–∞–≥–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–±–µ–≥–æ–≤,
–ø–æ–º–æ—â—å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–±–æ–≤, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–∞–≥–æ–≤ —Å –≥–∏–≥–∞–Ω—Ç–∞–º–∏, –∏ —Ö—É–π –∑–Ω–∞–µ—Ç —á—Ç–æ –µ—â—ë.

<code>–ù–µ–æ–±—ã—á–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —Ö1</code> @x59x75x72x79 –∑–∞ –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω—ã–µ –±–∞–≥—Ä–µ–ø–æ—Ä—Ç—ã –æ –≤—ã–≤–æ–¥–µ –∏–Ω—Ñ—ã

<code>üèÖ –ú–µ–¥–∞–ª—å —Å –æ—Ç–ª–∏—á–∏–µ–º —Ö5</code> –∏ <code>–û–ì–†–û–ú–ù–û–ï —Å–ø–∞—Å–∏–±–æ —Ö4</code> @kato_on –∑–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–Ω–æ–≥–∏—Ö —Å—Ç—Ä–∞—à–Ω—ã—Ö –±–∞–≥–æ–≤,
–ø–æ–º–æ—â—å –≤ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏, –Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∏–±—å—é—à–µ–Ω—ã.

–°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è...
`, {
  parseMode: 'html',
  webPreview: false,
}));

const giantsKeyboard = bot.inlineKeyboard([
  [
    bot.inlineButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', { callback: 'update_giants' }),
    bot.inlineButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', { callback: 'show_info' }),
  ],
]);

const beastRangesKeyboard = withBackButton(bot.keyboard, _.chunk(ranges.map((range) => {
  const first = _.min(range);
  const last = _.max(range);

  if (first !== last) {
    return `${first}-${last}`;
  }

  return `${first}-${last}`;
}), 5));

const beastRangesDarkZoneKeyboard = withBackButton(bot.keyboard, _.chunk(dzRanges.map((range) => {
  const first = _.min(range);
  const last = _.max(range);

  if (first !== last) {
    return `${first}‚Äî${last}`;
  }

  return `${first}‚Äî${last}`;
}), 5));


bot.on('/show_giants', (msg) => {
  Giant.find({}).then((giants) => {
    const giantsReply = _.sortBy(giants, 'distance').map((giant) => {
      const isDead = giant.health.current <= 0;
      const time = moment(giant.forwardStamp * 1000).add(3, 'hour').format('DD.MM.YYYY HH:mm');

      return `${giant.distance || '??'}–∫–º - *${giant.name}*\n${time} - ${isDead ? 'üí´ –ø–æ–≤–µ—Ä–∂–µ–Ω' : `‚ù§Ô∏è${giant.health.current}`}`;
    });

    const reply = `
–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≥–∏–≥–∞–Ω—Ç–∞–º (–ú–°–ö):

${_.isEmpty(giantsReply) ? '–ü–æ–∫–∞ —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç' : giantsReply.join('\n\n')}

_–°–∫–∏–¥—ã–≤–∞–π—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥—ã –æ –≤—Å—Ç—Ä–µ—á–µ –∏–ª–∏ –±–æ–µ —Å –≥–∏–≥–∞–Ω—Ç–æ–º - –æ–Ω–∏ –∑–∞–ø–∏—à—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–æ–º._
_–ï—Å–ª–∏ –≥–∏–≥–∞–Ω—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - –∑–Ω–∞—á–∏—Ç –µ–≥–æ –µ—â—ë –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª–∏ –±–æ—Ç—É_
`;

    return msg.reply.text(reply, {
      parseMode: 'markdown',
      replyMarkup: giantsKeyboard,
    });
  }).catch(e => console.log(e));
});

bot.on(['/show_beasts(regular)', '/show_beasts(darkzone)'], (msg) => {
  const reply = `
–≠—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö ${msg.text === 'üíÄ–ú–æ–±—ã' ? '–æ–±—ã—á–Ω—ã—Ö' : ''} –º–æ–±–æ–≤ –≤ –ü—É—Å—Ç–æ—à–∏ ${msg.text !== 'üíÄ–ú–æ–±—ã' ? '–∏–∑ üö∑–¢—ë–º–Ω–æ–π –ó–æ–Ω—ã' : ''} <i>(–Ω–µ –¥–∞–Ω–∂–µ–≤—ã—Ö)</i>
–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤ –æ—Ç –∏–≥—Ä–æ–∫–æ–≤ (–±–æ–∏, –ø–æ–±–µ–≥–∏ –∏ –æ–≥–ª—É—à–µ–Ω–∏—è)

–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤, –ø–æ—Å–ª–µ –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å–ø–∏—Å–æ–∫ –º–æ–±–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–º–µ—á–µ–Ω—ã –Ω–∞ —ç—Ç–æ–º –∫–∏–ª–æ–º–µ—Ç—Ä–µ.

–ñ–º—è–∫–∞–π –ø–æ <b>/mob_1234qwerty...</b> –ø–æ–¥ –Ω—É–∂–Ω—ã–º –≤–∞–º –º–æ–±–æ–º, –ø–æ—Å–ª–µ –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ "–∫–∞—Ä—Ç–æ—á–∫–∞" –ø—Ä–æ—Å—Ç–æ–º—Ç—Ä–∞ –º–æ–±–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏:
[<code>–ò–Ω—Ñ–æ</code>], [<code>–õ—É—Ç</code>], [<code>–ë–æ–π</code>] –∏ [<code>–û–≥–ª—É—à–µ–Ω–∏—è</code>]

–ì–∞–π–¥ —Ç—É—Ç: https://teletype.in/@eko24/Sy4pCyiRM
`;
  msg.reply.text(reply, {
    replyMarkup: msg.text === 'üíÄ–ú–æ–±—ã' ? beastRangesKeyboard : beastRangesDarkZoneKeyboard,
    parseMode: 'html',
    webPreview: false,
  }).catch(e => console.log(e));
});

bot.on(/mob_(.+)/, (msg) => {
  const [, id] = /mob_(.+)/.exec(msg.text);

  const searchParams = process.env.ENV === 'PRODUCTION' ? {
    _id: id,
    isDungeon: false,
  } : {
    _id: id,
  };

  routedBeastView(Beast, {
    ...searchParams,
  }, null, {
    env: process.env.ENV,
    VERSION,
  }).then(({ reply, beast }) => {
    if (reply !== false) {
      const beastReplyMarkup = getBeastKeyboard(beast._id.toJSON());

      return msg.reply.text(reply, {
        asReply: true,
        parseMode: 'html',
        replyMarkup: beastReplyMarkup,
      }).catch(e => console.log(e));
    }
    return msg.reply.text('–ü—Ä–æ—Å—Ç–∏, —è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—ã—à–∞–ª –ø—Ä–æ —ç—Ç–æ–≥–æ –º–æ–±–∞ :c', {
      asReply: true,
    }).catch(e => console.log(e));
  });
});


bot.on(['/cancel', '/journeyforwardcancel', '/force_cancel'], (msg) => {
  const backMessage = _.random(0, 100) >= 90 ? '–¢—ã –≤–µ—Ä–Ω—É—Å–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n<i>–í–µ—Ä–Ω—É—Å–ª—è - –ø–æ—á—ë—Ç–Ω—ã–π —á–ª–µ–Ω —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –æ–±–∏–∂–∞–π—Ç–µ –µ—ë</i>' : '–¢—ã –≤–µ—Ä–Ω—É—Å–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';

  if (sessions[msg.from.id] === undefined) {
    createSession(msg.from.id);

    return msg.reply.text(backMessage, {
      replyMarkup: defaultKeyboard,
      parseMode: 'html',
    }).catch(e => console.log(e));
  }

  if (sessions[msg.from.id].state === states.WAIT_FOR_DATA_TO_PROCESS && msg.text !== '/force_cancel') {
    return msg.reply.text('–î–æ–∂–¥–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é - –∂–º–∏ /force_cancel', {
      asReply: true,
    }).catch(e => console.log(e));
  }

  createSession(msg.from.id);

  return msg.reply.text(backMessage, {
    replyMarkup: defaultKeyboard,
    parseMode: 'html',
  }).catch(e => console.log(e));
});

bot.on('/delete_accaunt', (msg) => {
  if (process.env.ENV === 'STAGING') {
    userManager.delete(msg.from.id).then((result) => {
      if (!result.ok && result.reason === 'USER_NOT_FOUND') {
        return msg.reply.text('–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–≤–æ—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ', {
          asReply: true,
        }).catch(e => console.log(e));
      }

      if (result.ok && result.reason === 'USER_DELETED') {
        return msg.reply.text('–Ø —É–¥–∞–ª–∏–ª —Ç–≤–æ—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ', {
          asReply: true,
        }).catch(e => console.log(e));
      }

      return false;
    });
  }
});

bot.on('/delete_beasts', (msg) => {
  if (process.env.ENV === 'STAGING') {
    Beast.find({ 'battles.stamp': { $regex: `.+${msg.from.id}` } }).then((beasts) => {
      if (beasts.length === 0) {
        return msg.reply.text('–Ø –Ω–µ –Ω–∞—à—ë–ª —Ç–≤–æ–∏—Ö –±–∏—Ç–≤', {
          asReply: true,
        }).catch(e => console.log(e));
      }
      async.forEach(beasts, (dBeast, next) => {
        const stampRegexp = new RegExp(`.+${msg.from.id}`);
        const databaseBeast = dBeast;
        databaseBeast.battles = databaseBeast.battles.filter(battle => !stampRegexp.test(battle.stamp));

        databaseBeast.save().then(() => {
          next();
        });
      }, () => msg.reply.text('–Ø —É–¥–∞–ª–∏–ª —Ç–≤–æ–∏ –±–∏—Ç–≤—ã', {
        asReply: true,
      }).catch(e => console.log(e)));

      return false;
    });
  }
});

bot.on('/delete_giants', (msg) => {
  if (process.env.ENV === 'STAGING') {
    Giant.collection.drop().then(() => msg.reply.text('–Ø —É–¥–∞–ª–∏–ª –≤—Å–µ—Ö –≥–∏–≥–∞–Ω—Ç–æ–≤', {
      asReply: true,
    }));
  }
});

bot.on('callbackQuery', (msg) => {
  const chatId = msg.from.id;
  const messageId = msg.message.message_id;
  const showMobRegExp = /show_beast_(\d+)-(\d+)\+(.+)/;
  const showEquipmentKeyboardRegExp = /equipment_menu-(.+)/;
  const showLocationsKeyboardRegExp = /locations_menu-(.+)/;
  const showSuppliesKeyboardRegExp = /supplies_menu-(.+)/;
  const showAchievementsKeyboardRegExp = /achievements_menu-(.+)/;
  const showDungeonsKeyboardRegExp = /dungeons_menu-(.+)/;
  const showMobRouteRegExp = /show_beast_page_(.+)-(.+)/;

  if (msg.data === 'update_giants') {
    Giant.find({}).then((giants) => {
      bot.answerCallbackQuery(msg.id);

      const giantsReply = _.sortBy(giants, 'distance').map((giant) => {
        const isDead = giant.health.current <= 0;
        const time = moment(giant.forwardStamp * 1000).add(3, 'hour').format('DD.MM.YYYY HH:mm');

        return `${giant.distance || '??'}–∫–º - *${giant.name}*\n${time} - ${isDead ? 'üí´ –ø–æ–≤–µ—Ä–∂–µ–Ω' : `‚ù§Ô∏è${giant.health.current}`}`;
      });

      const reply = `
–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≥–∏–≥–∞–Ω—Ç–∞–º (–ú–°–ö):

${_.isEmpty(giantsReply) ? '–ü–æ–∫–∞ —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç' : giantsReply.join('\n\n')}

_–°–∫–∏–¥—ã–≤–∞–π—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥—ã –æ –≤—Å—Ç—Ä–µ—á–µ –∏–ª–∏ –±–æ–µ —Å –≥–∏–≥–∞–Ω—Ç–æ–º - –æ–Ω–∏ –∑–∞–ø–∏—à—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–æ–º._
_–ï—Å–ª–∏ –≥–∏–≥–∞–Ω—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - –∑–Ω–∞—á–∏—Ç –µ–≥–æ –µ—â—ë –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª–∏ –±–æ—Ç—É_
        `;


      return bot.editMessageText({ chatId, messageId }, reply, { replyMarkup: giantsKeyboard, parseMode: 'markdown' });
    }).catch(e => console.log(e));
  } else if (msg.data === 'show_info') {
    bot.answerCallbackQuery(msg.id);

    const reply = `
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —Å–ª–µ–¥—É—é—â–∏—Ö –≥–∏–≥–∞–Ω—Ç–∞—Ö:
‚ñ´Ô∏è26–∫–º - *üóø–†–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—ã–π –ì–æ–ª–µ–º*
‚ñ´Ô∏è36–∫–º - *ü§ñ–ö–∏–±–æ—Ä–≥ –ê–Ω–∫–ª–∞–≤–∞*
‚ñ´Ô∏è44–∫–º - *üëπ–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ü—É—Å—Ç–æ—à–∏*
‚ñ´Ô∏è55–∫–º - *‚ò†Ô∏è–ö–∏–±–µ—Ä–∫–æ–≥–æ—Ç—å*
‚ñ´Ô∏è64–∫–º - *üê∫–Ø–æ-–ì–∏–≥–∞–Ω—Ç*

–ì–∏–≥–∞–Ω—Ç—ã –∏–º–µ—é—Ç –æ–≥—Ä–æ–º–Ω—ã–π –∑–∞–ø–∞—Å –∑–¥–æ—Ä–æ–≤—å—è. –ò–≥—Ä–æ–∫ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –≥–∏–≥–∞–Ω—Ç–∞, –Ω–µ —É–±–∏–≤ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–ª—å–∑—è –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ. –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –ì–∏–≥–∞–Ω—Ç–∞.

*–ï—Å–ª–∏ –ì–∏–≥–∞–Ω—Ç –≤–∞—Å —É–¥–∞—Ä–∏—Ç –≤ –æ—Ç–≤–µ—Ç –∏ —É –≤–∞—Å –Ω–µ –º–µ–Ω–µ–µ 25% –∑–¥–æ—Ä–æ–≤—å—è, —Ç–æ —É –≤–∞—Å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è 1 —Ö–ø. –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–µ—Ç—Å—è –º–µ–Ω–µ–µ 25% –∑–¥–æ—Ä–æ–≤—å—è –∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–¥–∞—Ä, —Ç–æ –≤—ã —É–º–∏—Ä–∞–µ—Ç–µ.*

–ï—Å–ª–∏ –≤—ã –≤ —á–∏—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∏–≤–∞–µ—Ç–µ –≥–∏–≥–∞–Ω—Ç–∞ - –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É.

–ì–∏–≥–∞–Ω—Ç—ã –æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ñ—Ä–∞–∫—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, —á–µ–º –±–æ–ª—å—à–µ –∏–≥—Ä–æ–∫–æ–≤ –∏—Ö –∞—Ç–∞–∫—É—é—Ç, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ —Å–º–æ–≥—É—Ç —Ö–æ–¥–∏—Ç—å –¥–∞–ª—å—à–µ.

–ü–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –Ω–∞–¥ –ì–∏–≥–∞–Ω—Ç–æ–º, –æ–Ω –≤–Ω–æ–≤—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Ç–æ–º –∂–µ –∫–∏–ª–æ–º–µ—Ç—Ä–µ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±–µ—Å–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –¥–∞–ª—å—à–µ –≤ –ü—É—Å—Ç–æ—à—å –≤–ø–ª–æ—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ì–∏–≥–∞–Ω—Ç–∞.
        `;

    return bot.editMessageText({ chatId, messageId }, reply, {
      replyMarkup: giantsKeyboard,
      parseMode: 'markdown',
    }).catch(e => console.log(e));
  } else if (showMobRegExp.test(msg.data)) {
    const [, from, to, type] = showMobRegExp.exec(msg.data);
    const beastType = type === 'regular' ? 'Regular' : 'DarkZone';

    Beast.find({
      isDungeon: false, subType: 'regular', distanceRange: { $gte: Number(from), $lte: Number(to) }, type: beastType,
    }, 'battles.totalDamageReceived name id').then((beasts) => {
      bot.answerCallbackQuery(msg.id);

      const jsonBeasts = beasts.map((b) => {
        const jsoned = b.toJSON();

        return {
          id: b.id,
          ...jsoned,
        };
      });

      const beastsByDamage = _.sortBy(jsonBeasts, v => v.battles.totalDamageReceived);

      const beastsList = beastsByDamage.map(beast => `
${beast.name}
/mob_${beast.id}`).join('\n');

      const reply = `
<b>–ú–æ–±—ã(${type === 'regular' ? 'üíÄ' : 'üö∑'}) –Ω–∞ ${from}-${to}–∫–º</b>
<i>–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç —Å–ª–∞–±—ã–º –∫ —Å–∏–ª—å–Ω—ã–º</i>
${beastsList}
`;

      return bot.editMessageText({ chatId, messageId }, reply, {
        replyMarkup: type === 'regular' ? beastRangesKeyboard : beastRangesDarkZoneKeyboard,
        parseMode: 'html',
      }).catch(e => console.log(e));
    }).catch(e => console.log(e));
  } else if (showMobRouteRegExp.test(msg.data)) {
    bot.answerCallbackQuery(msg.id);

    const [, route, beastId] = showMobRouteRegExp.exec(msg.data);

    const searchParams = process.env.ENV === 'PRODUCTION' ? {
      _id: beastId,
      isDungeon: false,
    } : {
      _id: beastId,
    };

    routedBeastView(Beast, searchParams, route, {
      env: process.env.ENV,
      VERSION,
    }).then(({ reply, beast }) => {
      // TODO: Fix keyboard for dungeon beasts
      const beastReplyMarkup = getBeastKeyboard(beast._id.toJSON());

      return bot.editMessageText({ chatId, messageId }, reply, {
        replyMarkup: beastReplyMarkup,
        parseMode: 'html',
      }).catch(e => console.log(e));
    });
  } else if (showEquipmentKeyboardRegExp.test(msg.data)) {
    bot.answerCallbackQuery(msg.id);
    const submenuRegExp = /equipment_menu-(.+)_.+/;

    const [, menuRoute] = showEquipmentKeyboardRegExp.exec(msg.data);

    const chosenMenu = objectDeepSearch.findFirst(equipmentMenu, { name: menuRoute });

    let buttonsMenu = chosenMenu;

    if (submenuRegExp.test(msg.data)) {
      const [, parentMenuName] = submenuRegExp.exec(msg.data);
      buttonsMenu = objectDeepSearch.findFirst(equipmentMenu, { name: parentMenuName });
    }

    const chosenMenuButtons = processMenu(buttonsMenu).map(menuItem => bot.inlineButton(menuItem.title, { callback: `equipment_menu-${menuItem.name}` }));

    const inlineReplyMarkup = bot.inlineKeyboard(_.chunk(chosenMenuButtons, 3));

    return bot.editMessageText({ chatId, messageId }, chosenMenu.text, {
      parseMode: 'markdown',
      replyMarkup: inlineReplyMarkup,
    }).catch(e => console.log(e));
  } else if (showLocationsKeyboardRegExp.test(msg.data)) {
    bot.answerCallbackQuery(msg.id);
    const submenuRegExp = /locations_menu-(.+)+/;
    const [, menuRoute] = showLocationsKeyboardRegExp.exec(msg.data);
    const chosenMenu = objectDeepSearch.findFirst(locationsMenu, { name: menuRoute });
    let buttonsMenu = chosenMenu;

    if (submenuRegExp.test(msg.data)) {
      const [, parentMenuName] = submenuRegExp.exec(msg.data);
      buttonsMenu = objectDeepSearch.findFirst(locationsMenu, { name: parentMenuName });
    }

    let chosenMenuButtons = processMenu(buttonsMenu).map(menuItem => bot.inlineButton(menuItem.title, { callback: `locations_menu-${menuItem.name}` }));

    if (_.isEmpty(chosenMenuButtons)) {
      chosenMenuButtons = processMenu(locationsMenu).map(menuItem => bot.inlineButton(menuItem.title, { callback: `locations_menu-${menuItem.name}` }));
    }

    const inlineReplyMarkup = bot.inlineKeyboard(_.chunk(chosenMenuButtons, 3));

    return bot.editMessageText({ chatId, messageId }, chosenMenu.text, {
      parseMode: locationsMenu.config.parseMode,
      replyMarkup: inlineReplyMarkup,
    }).catch(e => console.log(e));
  } else if (showSuppliesKeyboardRegExp.test(msg.data)) {
    bot.answerCallbackQuery(msg.id);


    const submenuRegExp = /supplies_menu-(.+)+/;
    const [, menuRoute] = showSuppliesKeyboardRegExp.exec(msg.data);
    const chosenMenu = objectDeepSearch.findFirst(suppliesMenu, { name: menuRoute });
    let buttonsMenu = chosenMenu;

    if (submenuRegExp.test(msg.data)) {
      const [, parentMenuName] = submenuRegExp.exec(msg.data);
      buttonsMenu = objectDeepSearch.findFirst(suppliesMenu, { name: parentMenuName });
    }

    let chosenMenuButtons = processMenu(buttonsMenu).map(menuItem => bot.inlineButton(menuItem.title, { callback: `supplies_menu-${menuItem.name}` }));

    if (_.isEmpty(chosenMenuButtons)) {
      chosenMenuButtons = processMenu(suppliesMenu).map(menuItem => bot.inlineButton(menuItem.title, { callback: `supplies_menu-${menuItem.name}` }));
    }

    const inlineReplyMarkup = bot.inlineKeyboard(_.chunk(chosenMenuButtons, 3));

    return bot.editMessageText({ chatId, messageId }, chosenMenu.text, {
      parseMode: suppliesMenu.config.parseMode,
      replyMarkup: inlineReplyMarkup,
    }).catch(e => console.log(e));
  } else if (showAchievementsKeyboardRegExp.test(msg.data)) {
    bot.answerCallbackQuery(msg.id);


    const submenuRegExp = /achievements_menu-(.+)+/;
    const [, menuRoute] = showAchievementsKeyboardRegExp.exec(msg.data);
    const chosenMenu = objectDeepSearch.findFirst(achievementsMenu, { name: menuRoute });
    let buttonsMenu = chosenMenu;

    if (submenuRegExp.test(msg.data)) {
      const [, parentMenuName] = submenuRegExp.exec(msg.data);
      buttonsMenu = objectDeepSearch.findFirst(achievementsMenu, { name: parentMenuName });
    }

    let chosenMenuButtons = processMenu(buttonsMenu).map(menuItem => bot.inlineButton(menuItem.title, { callback: `achievements_menu-${menuItem.name}` }));

    if (_.isEmpty(chosenMenuButtons)) {
      chosenMenuButtons = processMenu(achievementsMenu).map(menuItem => bot.inlineButton(menuItem.title, { callback: `achievements_menu-${menuItem.name}` }));
    }

    const inlineReplyMarkup = bot.inlineKeyboard(_.chunk(chosenMenuButtons, 3));

    return bot.editMessageText({ chatId, messageId }, chosenMenu.text, {
      parseMode: achievementsMenu.config.parseMode,
      replyMarkup: inlineReplyMarkup,
    }).catch(e => console.log(e));
  } else if (showDungeonsKeyboardRegExp.test(msg.data)) {
    bot.answerCallbackQuery(msg.id);

    const submenuRegExp = /dungeons_menu-(.+)+/;
    const [, menuRoute] = showDungeonsKeyboardRegExp.exec(msg.data);
    const chosenMenu = objectDeepSearch.findFirst(dungeonMenu, { name: menuRoute });
    let buttonsMenu = chosenMenu;

    if (submenuRegExp.test(msg.data)) {
      const [, parentMenuName] = submenuRegExp.exec(msg.data);
      buttonsMenu = objectDeepSearch.findFirst(dungeonMenu, { name: parentMenuName });
    }

    let chosenMenuButtons = processMenu(buttonsMenu).map(menuItem => bot.inlineButton(menuItem.title, { callback: `dungeons_menu-${menuItem.name}` }));

    if (_.isEmpty(chosenMenuButtons)) {
      chosenMenuButtons = processMenu(dungeonMenu).map(menuItem => bot.inlineButton(menuItem.title, { callback: `dungeons_menu-${menuItem.name}` }));
    }

    const inlineReplyMarkup = bot.inlineKeyboard(_.chunk(chosenMenuButtons, 2));

    return bot.editMessageText({ chatId, messageId }, chosenMenu.text, {
      parseMode: dungeonMenu.config.parseMode,
      replyMarkup: inlineReplyMarkup,
    }).catch(e => console.log(e));
  } else if (msg.data === 'initialize_skill_upgrade') {
    const skillOMaticText = `
–í ¬´<b>üéì –°–∫–∏–ª–æ–∫–∞—á–∞—Ç–æ—Ä–µ</b>¬ª —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–∫–∞—á–∫—É —Ç–≤–æ–∏—Ö —Å–∫–∏–ª–æ–≤.`;

    findPip(msg, (result) => {
      bot.answerCallbackQuery(msg.id);
      if (result.ok && result.reason === 'USER_FOUND') {
        if (sessions[msg.from.id] === undefined) {
          createSession(msg.from.id);
        }

        sessions[msg.from.id].pip = result.data.pip;
        sessions[msg.from.id].state = states.WAIT_FOR_SKILL;

        const replyMarkup = bot.keyboard([
          [buttons.skillSelectStrength.label, buttons.skillSelectAccuracy.label, buttons.skillSelectAgility.label],
          [buttons.skillSelectHealth.label, buttons.skillSelectCharisma.label],
          [buttons.cancelAction.label],
        ], {
          resize: true,
        });

        const skillMap = {
          health: '‚ù§ –ñ–∏–≤—É—á–µ—Å—Ç—å',
          strength: 'üí™ –°–∏–ª–∞',
          precision: 'üî´ –ú–µ—Ç–∫–æ—Å—Ç—å',
          charisma: 'üó£ –•–∞—Ä–∏–∑–º–∞',
          agility: 'ü§∏‚Äç‚ôÄÔ∏è –õ–æ–≤–∫–æ—Å—Ç—å',
        };

        const userSkills = Object.keys(skillMap).map((key) => {
          const skillName = skillMap[key];

          return `<b>${skillName}</b>: ${result.data.pip[key]}`;
        });

        return bot.sendMessage(msg.from.id, `
${skillOMaticText}

–í–æ—Ç —á—Ç–æ —è –∑–Ω–∞—é –ø—Ä–æ —Ç–≤–æ–∏ —Å–∫–∏–ª—ã:
${userSkills.join('\n')}
<i>(–ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∞–∫—É—Ç–∞–ª—å–Ω—ã–µ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –ø–∏–ø-–±–æ–π)</i>


<b>–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–π —Å–∫–∏–ª —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–∫–∞—á–∞—Ç—å</b>

–ß—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <code>[‚Ü©Ô∏è–ù–∞–∑–∞–¥]</code>.
–õ–∏–±–æ, –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–ø–∏—à–∏ /cancel.
            `, {
          replyMarkup,
          parseMode: 'html',
        }).catch(e => console.log(e));
      }

      return bot.sendMessage(msg.from.id, `
${skillOMaticText}

–û—É, –ø–æ—Ö–æ–∂–µ —è –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é –ø—Ä–æ —Ç–≤–æ–π –ø–∏–ø :—Å
–ü–µ—Ä–µ–π–¥–∏ –≤ –∏–≥—Ä—É –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É –∏ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –µ–≥–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!
        `, {
        replyMarkup: toGameKeyboard,
        parseMode: 'html',
      }).catch(e => console.log(e));
    });
  }

  return false;
});

const validateRange = (rangeToValidate, _from, _to) => {
  const from = Number(_from);
  const to = Number(_to);
  return rangeToValidate.filter(range => range[0] === from && range[1] === to).length === 1;
};

bot.on('text', (msg) => {
  const regularZoneBeastsRequestRegExp = /(\d+)-(\d+)/;
  const rangeRegExp = /(\d+)(-|‚Äî|--)(\d+)/;


  if (!rangeRegExp.test(msg.text)) {
    return;
  }

  const range = regularZoneBeastsRequestRegExp.test(msg.text) ? ranges : dzRanges;


  const [, from,, to] = rangeRegExp.exec(msg.text);

  if (!validateRange(range, from, to)) {
    msg.reply.text('–î–∞, –æ—á–µ–Ω—å —É–º–Ω–æ —Å —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã. –ù–∞—á–∏—Å–ª–∏–ª —Ç–µ–±–µ <i>–Ω–∏—Ö—É—è</i> üíé<b>–®–º–µ–ø—Å–µ–ª–µ–π</b> –∑–∞ —Å–º–µ–∫–∞–ª–æ—á–∫—É, –∞ —Ç–µ–ø–µ—Ä—å –∏–¥–∏ –Ω–∞—Ö—É–π –∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É.', {
      parseMode: 'html',
    });
  }

  const beastType = regularZoneBeastsRequestRegExp.test(msg.text) ? 'Regular' : 'DarkZone';

  Beast.find({
    isDungeon: false,
    subType: 'regular',
    'distanceRange.value': {
      $gte: Number(from),
      $lte: Number(to),
    },
    type: beastType,
  }, 'battles.totalDamageReceived name id distanceRange').then((beasts) => {
    const jsonBeasts = beasts.map((b) => {
      const jsoned = b.toJSON();

      return {
        id: b.id,
        ...jsoned,
      };
    });

    const beastsByDamage = _.sortBy(jsonBeasts, v => v.battles.totalDamageReceived);

    const actualBeasts = beastsByDamage.filter(({ distanceRange }) => {
      const actualRanges = distanceRange.filter(({ version }) => version === VERSION);
      const deprecatedRanges = distanceRange.filter(({ version }) => version !== VERSION);

      const actualRangesFulfillGiven = actualRanges.every(({ value }) => value >= from && value <= to);

      if (actualRanges.length >= DATA_THRESHOLD) {
        return actualRangesFulfillGiven;
      } if (actualRanges.length <= DATA_THRESHOLD && deprecatedRanges.length > 0) {
        return true;
      }

      return false;
    });

    const beastsList = actualBeasts.map(beast => `
${beast.name}
/mob_${beast.id}`).join('\n');

    const reply = `
<b>–ú–æ–±—ã(${beastType === 'DarkZone' ? 'üö∑' : 'üíÄ'}) –Ω–∞ ${from}-${to}–∫–º</b>
<i>–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç —Å–ª–∞–±—ã–º –∫ —Å–∏–ª—å–Ω—ã–º</i>
${beastsList}
`;

    return msg.reply.text(reply, {
      replyMarkup: beastType === 'DarkZone' ? beastRangesDarkZoneKeyboard : beastRangesKeyboard,
      parseMode: 'html',
    }).catch(e => console.log(e));
  }).catch(e => console.log(e));
});

bot.on('/d', (msg) => {
  if (process.env.ENV === 'STAGING' || process.env.ENV === 'LOCAL') {
    Beast.find({
      isDungeon: true,
    }, 'battles.totalDamageReceived name id').then((beasts) => {
      const jsonBeasts = beasts.map((b) => {
        const jsoned = b.toJSON();

        return {
          id: b.id,
          ...jsoned,
        };
      });

      const beastsByDamage = _.sortBy(jsonBeasts, v => v.battles.totalDamageReceived);

      const beastsList = beastsByDamage.map(beast => `
${beast.name}
/mob_${beast.id}`).join('\n');

      const reply = `
<b>–î–∞–Ω–∂–µ–≤—ã–µ –º–æ–±—ã</b>
<i>–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç —Å–ª–∞–±—ã–º –∫ —Å–∏–ª—å–Ω—ã–º</i>
${beastsList}
`;

      return msg.reply.text(reply, {
        parseMode: 'html',
      }).catch(e => console.log(e));
    }).catch(e => console.log(e));
  }
});

bot.on('/show_encyclopedia', (msg) => {
  msg.reply.text(`–í <b>üìî–≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏</b> –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏—Ä–µ Wasteland Wars
<b>üéí–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞</b> - –û—Ä—É–∂–∏–µ, –±—Ä–æ–Ω—è –∏ —Ç–æ–º—É –ø–æ–¥–æ–±–Ω–æ–µ.
<b>üóÉ–ü—Ä–∏–ø–∞—Å—ã</b> - –ï–¥–∞, –±–∞—Ñ—Ñ—ã –∏ –º–µ–¥–∏—Ü–∏–Ω–∞
<b>üõ∞–î—Ä–æ–Ω—ã</b> - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞—à–∏—Ö –≤–µ—Ä–Ω—ã—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤
<b>‚ö†Ô∏è–ü–æ–¥–∑–µ–º–µ–ª—å—è</b> - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é, –∏–Ω—Ñ–∞ –æ –ª—É—Ç–µ –∏ –º–æ–±–∞—Ö
<b>üèúÔ∏è–õ–æ–∫–∞—Ü–∏–∏</b> - –†–µ–π–¥–æ–≤—ã–µ –∏ –æ–±—ã—á–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
<b>‚úÖ–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b> - –ó–∞ —á—Ç–æ –≤—ã–¥–∞—é—Ç –Ω–∞–≥—Ä–∞–¥—ã
`, {
    replyMarkup: withBackButton(bot.keyboard, encyclopediaKeyboard, {
      resize: true,
      position: 'bottom',
    }),
    parseMode: 'html',
  });
});

bot.on(/\/battle_(.+)/, (msg) => {
  if (process.env.ENV === 'PRODUCTION') {
    return msg.reply.text('–ù—É –∏ —Ö—É–ª–∏ —Ç—ã —Å—é–¥–∞ –ª–µ–∑–µ—à—å?)', {
      asReply: true,
    }).catch(e => console.log(e));
  }

  const [, battleId] = /\/battle_(.+)/.exec(msg.text);
  // msg.reply.text('neat!');

  routedBattleView(Beast, {
    battleId: mongoose.Types.ObjectId(battleId),
  }).then(({ reply }) => {
    if (reply !== false) {
      return msg.reply.text(reply, {
        parseMode: 'html',
      }).catch(e => console.log(e));
    }
    return msg.reply.text('–ü—Ä–æ—Å—Ç–∏, —è –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é –ø—Ä–æ —ç—Ç—É –±–∏—Ç–≤—É :c', {
      asReply: true,
    }).catch(e => console.log(e));
  }).catch(e => console.log(e));

  return false;
});

bot.on(/\/ignore_(.+)/, (msg) => {
  if (_.isEmpty(sessions)) {
    return msg.reply.text('–°–ª—É—à–∞–π, –∞ –º–Ω–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –Ω–µ—á–µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å. –ú–æ–∂–µ—Ç –º–µ–Ω—è –æ–ø—è—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø–∏–¥–æ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª, –Ω–µ –∑–Ω–∞–µ—à—å?', {
      asReply: true,
      replyMarkup: defaultKeyboard,
    });
  }

  const [, date] = /\/ignore_(.+)/.exec(msg.text);
  const { beastsToValidate } = sessions[msg.from.id];
  const index = _.findIndex(beastsToValidate, beast => beast.date === Number(date));

  if (Number.isInteger(index) || !date) {
    if (beastsToValidate !== undefined && beastsToValidate.length > 0) {
      if (beastsToValidate[index] !== undefined) {
        const { data } = sessions[msg.from.id];

        sessions[msg.from.id].beastsToValidate = sessions[msg.from.id].beastsToValidate.filter((entry, key) => key !== index);
        sessions[msg.from.id].data = data.map((entry) => {
          if (entry.date === Number(date)) {
            return {
              ...entry,
              ignore: true,
            };
          }

          return entry;
        });

        if (beastsToValidate.length === 1) {
          sessions[msg.from.id].state = states.WAIT_FOR_DATA_TO_PROCESS;

          processUserData(msg, {
            usePip: sessions[msg.from.id].processDataConfig.usePip,
            useBeastFace: sessions[msg.from.id].processDataConfig.useBeastFace,
          });

          return;
        }
        return msg.reply.text(getBeastToValidateMessage(sessions[msg.from.id].beastsToValidate, sessions[msg.from.id].beastRequest), {
          parseMode: 'html',
          replyMarkup: 'hide',
        });
      }

      return msg.reply.text('–≠–º, —è —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç–µ–±–µ –Ω–µ –¥–∞–≤–∞–ª, –∞ —Ç—É–¥–∞ –ª–∏ —Ç—ã –≤–æ—é–µ—à—å?', {
        asReply: true,
      });
    }

    return msg.reply.text('–°–ª—É—à–∞–π, –∞ –º–Ω–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –Ω–µ—á–µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å. –ú–æ–∂–µ—Ç –º–µ–Ω—è –æ–ø—è—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø–∏–¥–æ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª, –Ω–µ –∑–Ω–∞–µ—à—å?', {
      asReply: true,
      replyMarkup: defaultKeyboard,
    });
  }

  return msg.reply.text('–¢—ã –∫–∞–∫—É—é-—Ç–æ —Ö—É–π–Ω—é —Å–¥–µ–ª–∞–ª. –ú–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å.', {
    asReply: true,
  });
});

bot.on('/delete_all_beasts', (msg) => {
  if (process.env.ENV === 'STAGING' || process.env.ENV === 'LOCAL') {
    mongoose.connection.db.dropCollection('beasts', (err, result) => msg.reply.text('–í—Å–µ –º–æ–±—ã —É–¥–∞–ª—ë–Ω—ã'));
  }
});

bot.on('/state', (msg) => {
  if (process.env.ENV === 'STAGING' || process.env.ENV === 'LOCAL') {
    return msg.reply.text(sessions ? (sessions[msg.from.id] ? sessions[msg.from.id].state : 'null') : 'null');
  }
});

bot.on('/showBeastsToValidate', (msg) => {
  if (!_.isEmpty(sessions)) {
    if (sessions[msg.from.id] !== undefined) {
      if (sessions[msg.from.id].beastsToValidate.length > 0) {
        return msg.reply.text(getBeastToValidateMessage(sessions[msg.from.id].beastsToValidate, sessions[msg.from.id].beastRequest), {
          parseMode: 'html',
          replyMarkup: 'hide',
        }).catch(e => console.log(e));
      }
    }
  }
});

bot.on('/reset_beast_database', (msg) => {
  if (process.env.ENV === 'STAGING' || process.env.ENV === 'LOCAL') {
    msg.reply.text('–ü–ï–†–ï–•–û–ñ–£ –í –†–ï–ñ–ò–ú –°–ë–†–û–°–ê –ë–ê–ó–´...\n–ñ–î–ò –°–û–û–ë–©–ï–ù–ò–Ø –° ‚úÖ–ì–ê–õ–û–ß–ö–ê–ú–ò‚úÖ');

    const performBulkInsert = () => {
      Beast.insertMany(signedBeasts, (error) => {
        if (error) {
          msg.reply.text(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞: ${error}`);
        } else {
          msg.reply.text('‚úÖ–ë–ê–ó–ê –ú–û–ë–û–í –ù–ê–ü–û–õ–ù–ï–ù–ê!‚úÖ');
        }
      });
    };

    Beast.find().then((beasts) => {
      if (beasts.length === 0) {
        performBulkInsert();
      } else {
        Beast.remove({}, () => {
          performBulkInsert();
        });
      }
    });
  }
});

bot.on('/help_icons', msg => msg.reply.text(`
‚úÖ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞ <b>—Ç–æ–ª—å–∫–æ</b> –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –í–í
‚ö†Ô∏è - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –í–í –∏ –ø—Ä–æ—à–ª—ã—Ö –≤–µ—Ä—Å–∏–π –í–í
‚ÄºÔ∏è - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞ <b>—Ç–æ–ª—å–∫–æ</b> –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –≤–µ—Ä—Å–∏–π –í–í

–ò–∫–æ–Ω–∫–∏ —Å–æ–æ–±—â–∞—é—Ç –æ–± "—Å–≤–µ–∂–µ—Å—Ç–∏" –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–±–µ.
    –ß—Ç–æ –≤ –Ω–∞—à–µ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏ "—Å–≤–µ–∂–µ—Å—Ç—å"? –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ –º–æ–±–∞ "üê≤–¢—Ä–æ–≥ (–í–æ–∏–Ω)". –ï–≥–æ —É—Ä–æ–Ω, –∑–¥–æ—Ä–æ–≤—å–µ, –ª—É—Ç –∏ –¥—Ä—É–≥–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –∫–∞–∂–¥–æ–π –∏–∑ –≤–µ—Ä—Å–∏–π WW (2.1/2.0/1.8). –†–∞–Ω—å—à–µ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–µ—Ä–∂–∞–ª –≤—Å–µ —ç—Ç–∏ –≤–µ—Ä—Å–∏–∏ —É—Å–ª–æ–≤–Ω–æ–≥–æ –º–æ–±–∞ –∫–∞–∫ –µ–¥–∏–Ω—É—é –∑–∞–ø–∏—Å—å, –∏–∑ –∑–∞ —ç—Ç–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ —Å–ª–∏—à–∫–æ–º —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç–∞.
    –ú—ã –∂–µ –≤–Ω–µ–¥—Ä–∏–ª–∏ —Å–∏—Å—Ç–µ–º—É –≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–ª–∏—á–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –º–æ–±–æ–≤ –∫–∞–∫ —Ä–∞–∑ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.
    –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - –æ–Ω –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –º–æ–±–µ —Å–æ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π, –∏ –∫–æ–Ω–µ—á–Ω–æ –∂–µ - –æ–Ω –≤–∞–º —Å–æ–æ–±—â–∏—Ç –∫–æ–≥–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å "—É—Å—Ç–∞—Ä–µ–≤—à—É—é" –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á—Ç–æ –±—ã –≤—ã –ø–æ–Ω–∏–º–∞–ª–∏ —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –¥–µ–ª–æ —Å —Ä–∏—Å–∫–æ–≤—ã–º –≤—ã–±–æ—Ä–æ–º.`, {
  parseMode: 'html',
  asReply: true,
}));


bot.connect();
